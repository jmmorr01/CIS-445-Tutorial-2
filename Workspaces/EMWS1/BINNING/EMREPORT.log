MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 25, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:41:50" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                October 25, 2018
Time:                23:41:50
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0BJMBUJ "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0BJMBUJ new;
MPRINT(EM_DIAGRAM):   run;
37216      %let EMEXCEPTIONSTRING=;
37217      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
37218      * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
37219      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37220      %let EM_ACTION = REPORT;
37221      %let syscc = 0;
37222      %macro main;
37223      
37224        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
37225        %include temp;
37226        filename temp;
37227      
37228        %setProperties;
37229      
37230        %if %upcase(&EM_ACTION) = CREATE %then %do;
37231          filename temp catalog 'sashelp.emmdfy.binning_create.source';
37232          %include temp;
37233          filename temp;
37234      
37235          %create;
37236        %end;
37237      
37238         %else
37239         %if %upcase(&EM_ACTION) = TRAIN %then %do;
37240      
37241             filename temp catalog 'sashelp.emmdfy.binning_train.source';
37242             %include temp;
37243             filename temp;
37244             %train;
37245         %end;
37246      
37247        %else
37248        %if %upcase(&EM_ACTION) = SCORE %then %do;
37249          filename temp catalog 'sashelp.emmdfy.binning_score.source';
37250          %include temp;
37251          filename temp;
37252      
37253          %score;
37254      
37255        %end;
37256      
37257        %else
37258        %if %upcase(&EM_ACTION) = REPORT %then %do;
37259      
37260             filename temp catalog 'sashelp.emmdfy.binning_report.source';
37261             %include temp;
37262             filename temp;
37263      
37264             %report;
37265         %end;
37266      
37267         %doendm:
37268      %mend main;
37269      
37270      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
37272     +%macro SetProperties;
37274     +     /* IGN options */
37275     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
37276     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
37277     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
37279     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
37280     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
37281     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
37282     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
37283     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
37284     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
37285     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
37286     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
37287     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
37288     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
37289     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
37290     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
37291     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
37292     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
37294     +     %em_checkmacro(name=EM_PROPERTY_INTTARGETMETHOD, value=CUTMEAN, global=Y);
37295     +     %em_checkmacro(name=EM_PROPERTY_USERCUTVALUE, value=0.2, global=Y);
37296     +     %em_checkmacro(name=EM_PROPERTY_RejectIntTarget, value=N, global=Y);
37299     +%mend SetProperties;
37300     +%macro appendfiles(fileref1, fileref2);
37301     +     data _null_;
37302     +       length c $256;
37303     +       fid1=fopen("&fileref1",'A');
37304     +       fid2=fopen("&fileref2",'I');
37305     +       cval = finfo(fid2,'lrecl');
37306     +       put cval= fid1= fid2=;
37307     +       if (fid2 > 0) then
37308     +         do while(fread(fid2)=0);
37309     +           rc = fget(fid2,c,256);
37310     +           _msg_=sysmsg();
37311     +           /* put rc= c= _msg_=; */
37312     +           rc = fput(fid1,strip(c));
37313     +           rc = fwrite(fid1);
37314     +         end;
37315     +         _msg_=sysmsg();
37316     +         put _msg_=;
37317     +       rc = fclose(fid1);
37318     +       rc = fclose(fid2);
37319     +     run;
37320     +%mend appendfiles;
37322     +%macro buildOptScoreCode;
37324     +    %em_register(key=BINCODE, type=FOLDER);
37326     +    filename x catalog 'sashelp.emutil.em_deldir.source';
37327     +    %inc x;
37328     +    filename x;
37329     +    %delDir(folder=%nrbquote(&em_user_bincode));
37331     +    data _null_; length rc $200;
37332     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
37333     +    run;
37335     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
37337     +    %let dsid = %sysfunc(open(class_nosv));
37338     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
37339     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
37341     +    %let oldname=;
37342     +    %do %while(^%sysfunc(fetch(&dsid)));
37343     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
37344     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
37346     +        %if &name ne &oldname %then %do;
37347     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
37348     +             data _null_;
37349     +                length string $200 flag endflag 8;
37350     +                retain string flag endflag;
37351     +                set class_nosv end=eof;
37352     +                where DISPLAY_VAR ="&name";
37353     +                by _variable_ _group_;
37354     +                file _F1;
37355     +                index = kindex(_variable_, "BIN_");
37356     +                if index gt 0 then do;
37357     +                   if first._variable_ then do;
37358     +                      put ' ';
37359     +                      put "&EM_CODEBAR;";
37360     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
37361     +                      put string;
37362     +                      put "&EM_CODEBAR;";
37364     +                      if origLabel ne "" then do;
37365     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
37366     +                            put string;
37367     +                            string = tranwrd(origLabel,"'","''");
37368     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
37369     +                            put string;
37370     +                      end;
37371     +                      else do;
37372     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
37373     +                             put string;
37374     +                      end;
37376     +                      put ' ';
37378     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
37379     +                      put string;
37380     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
37381     +                      put string;
37382     +                      put "end;";
37383     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
37384     +                      put string;
37385     +                   end;
37386     +                   if first._group_ then do;
37387     +                      flag = 0;
37388     +                      endflag = 1;
37389     +                      if ^first._variable_ then do;
37390     +                         put "else";
37391     +                      end;
37392     +                      if LB ne . then do;
37393     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
37394     +                      end;
37395     +                      else do;
37396     +                         flag = 1;
37397     +                         string = "if";
37398     +                      end;
37399     +                   end;
37400     +                   if last._Group_ then do;
37401     +                      if UB ne . then do;
37402     +                        if flag ne 1 then do;
37403     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
37404     +                        end;
37405     +                        else do;
37406     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
37407     +                        end;
37408     +                      end;
37409     +                      else do;
37410     +                         if flag=1 then do;
37411     +                            string = strip(DISPLAY_VAR) ;
37412     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
37413     +                            endflag=0;
37414     +                            string="";
37415     +                         end;
37416     +                         else do;
37417     +                            string = strip(string)!!" then do;";
37418     +                         end;
37419     +                      end;
37420     +                      put string;
37421     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
37422     +                      put string;
37423     +                      if endflag eq 1 then do;
37424     +                        put "end;";
37425     +                      end;
37426     +                   end;
37427     +                   if last._variable_ then do;
37428     +                     string = "end;";
37429     +                     put string;
37430     +                   end;
37432     +                end;
37433     +                else do;
37434     +                   _split_value_ = tranwrd(_split_value_,"'","''");
37435     +                   if first._group_ then do;
37436     +                      flag=0;
37437     +                      if ^first._variable_ then
37438     +                         put 'else';
37439     +                      else do;
37440     +                         put ' ';
37441     +                         put "&EM_CODEBAR;";
37442     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
37443     +                         put string;
37444     +                         put "&EM_CODEBAR;";
37446     +                         if origLabel ne "" then do;
37447     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
37448     +                               put string;
37449     +                               string = tranwrd(origLabel,"'","''");
37450     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
37451     +                               put string;
37452     +                         end;
37453     +                         else do;
37454     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
37455     +                               put string;
37456     +                         end;
37458     +                         put ' ';
37460     +                         if format ne '' then do;
37461     +                            if first._variable_ then do;
37462     +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
37463     +                               put string;
37464     +                               string = '%dmnormip(_UFormat);';
37465     +                               put string;
37467     +                               string ="if MISSING(_UFORMAT) then do;";
37468     +                               put string;
37469     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
37470     +                               put string;
37471     +                               put "end;";
37473     +                               string="else if NOT MISSING(_UFORMAT) then do;";
37474     +                               put string;
37476     +                            end;
37477     +                         end;
37478     +                         else do;
37479     +                            if type = 'N' then do;
37480     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
37481     +                              put string;
37482     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
37483     +                              put string;
37484     +                              put "end;";
37486     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
37487     +                              put string;
37488     +                            end;
37489     +                            else if type='C' then do;
37490     +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
37491     +                              put string;
37492     +                              string = '%dmnormip(_UFormat);';
37493     +                              put string;
37495     +                              string ="if MISSING(_UFORMAT) then do;";
37496     +                              put string;
37497     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
37498     +                              put string;
37499     +                              put "end;";
37501     +                              string="else if NOT MISSING(_UFORMAT) then do;";
37502     +                              put string;
37503     +                              string = '%dmnormip(_UFormat);';
37504     +                              put string;
37505     +                           end;
37506     +                         end;
37507     +                      end;
37508     +                      if format ne '' OR type='C' then do;
37509     +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
37510     +                      end;
37511     +                      else do;
37512     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
37513     +                      end;
37514     +                   end;
37515     +                   else do;
37516     +                      if flag ne 1 then do;
37517     +                       if format ne '' OR type='C' then do;
37518     +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
37519     +                       end;
37520     +                       else do;
37521     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
37522     +                       end;
37523     +                         length = length(tempstring);
37525     +                         if length < 195 then do;
37526     +                            string = tempstring;
37527     +                         end;
37528     +                         else do;
37530     +                            string = strip(string);
37531     +                            put string;
37532     +                            string = ") then do;";
37533     +                            put string;
37535     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
37536     +                            put string;
37537     +                            put "end;";
37539     +                            put 'else';
37540     +                            if format ne '' OR type='C' then do;
37541     +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
37542     +                            end;
37543     +                            else do;
37544     +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
37545     +                            end;
37546     +                         end;
37547     +                      end;
37548     +                   end;
37550     +                   if last._group_ then do;
37551     +                      string = strip(string);
37552     +                      put string;
37554     +                      string = ") then do;";
37555     +                      put string;
37557     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
37558     +                      put string;
37559     +                      put "end;";
37560     +                   end;
37562     +                   if last._variable_ then do;
37563     +                     put "else do;";
37565     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
37566     +                     put string;
37568     +                     put "end;";
37569     +                     put "end;";
37570     +                   end;
37571     +                end;
37572     +             run;
37574     +             %let oldname = &name;
37575     +        %end;
37576     +    %end;
37577     +    %let dsid = %sysfunc(close(&dsid));
37579     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
37580     +    data _null_;
37581     +       file _F1;
37582     +       put "length _UFormat $200;";
37583     +       put "drop _UFormat;";
37584     +       put "_UFormat='';";
37585     +    run;
37586     +    filename _F1;
37588     +   %em_register(key=EMSCOREVAR, type=DATA);
37589     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
37590     +   proc datasets lib=&em_lib nolist;
37591     +      delete &scorevarDs;
37592     +   run;
37593     +   quit;
37595     +   %let filrf=mydir;
37596     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
37597     +   %let did=%sysfunc(dopen(&filrf));
37599     +   %if &did %then %do;  %PUT  did= &did;
37600     +       %let memcount=%sysfunc(dnum(&did));
37601     +       %if &memcount > 0 %then %do;
37602     +           data &em_user_emscorevar;
37603     +              length Name $32 formula $70 file $200;
37604     +              keep NAME Formula file;
37605     +              formula  = '';
37606     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
37607     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
37608     +               output;
37609     +           %end;
37610     +           %do i=1 %to &memcount;
37611     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
37612     +               %let newvar = %scan(&name, 1, .);
37613     +               %if "&newvar" ne "_ALL_" %then %do;
37614     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
37615     +                   output;
37616     +               %end;
37617     +           %end;
37619     +           run;
37620     +       %end;
37621     +       %let did = %sysfunc(dclose(&did));
37622     +  %end;
37624     +   %doendu:
37625     +%mend buildOptScoreCode;
37628     +%macro buildScoreCode(flowCode, publishCode);
37631     +  filename x "&flowCode";
37633     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
37634     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
37635     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
37637     +  data temp;
37638     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
37639     +    by display_var _Split_value_;
37640     +     if upcase(_Split_value_) ne 'MISSING';
37641     +   run;
37643     +   data temp_missing;
37644     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
37645     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
37646     +     by display_var _Split_value_;
37647     +     if upcase(_Split_value_) eq 'MISSING';
37648     +     keep _variable_ display_var missgrp;
37649     +   run;
37651     +   proc sort data=temp_missing; by display_var missgrp; run;
37653     +   data temp_missing;
37654     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
37655     +     by display_var missgrp;
37656     +     if ^_a then delete;
37657     +     keep _variable_ display_var missgrp ;
37658     +   run;
37660     +   data temp;
37661     +     merge temp temp_missing;
37662     +     by display_var;
37663     +     if display_Var eq '' then delete;
37664     +    run;
37666     +    /* pull in wtev values */
37667     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
37668     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
37669     +    proc sort data=temp;  by display_var _group_; run;
37671     +   data temp;
37672     +      merge temp tempcoarse(keep=display_var _group_  role) ;
37673     +      by display_var _group_;
37674     +    run;
37676     +    data temp;
37677     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
37678     +      by display_var;
37680     +      if _group_ = . then delete;
37681     +      if _variable_ = '' then delete;
37682     +    run;
37684     +    proc sort data=temp out=class;
37685     +       by _variable_ _group_ LB;
37686     +    run;
37688     +    data _null_;
37689     +      file X;
37691     +      put "length _UFormat $200;";
37692     +      put "drop _UFormat;";
37693     +      put "_UFormat='';";
37694     +    run;
37696     +    data class_nosv;
37697     +      set class;
37698     +      if upcase(role)="INPUT";
37699     +    run;
37701     +    data _null_;
37702     +       file X MOD;
37703     +       length string $200 flag endflag 8;
37704     +       retain string flag endflag;
37705     +       set class_nosv end=eof;
37706     +       by _variable_ _group_;
37708     +       index = kindex(_variable_, "BIN_");
37709     +       if index gt 0 then do;
37711     +         if first._variable_ then do;
37712     +            put ' ';
37713     +            put "&EM_CODEBAR;";
37714     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
37715     +            put string;
37716     +            put "&EM_CODEBAR;";
37719     +            if origLabel ne "" then do;
37720     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
37721     +              put string;
37722     +              string = tranwrd(origLabel,"'","''");
37723     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
37724     +              put string;
37725     +            end;
37726     +            else do;
37727     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
37728     +             put string;
37729     +            end;
37731     +            put ' ';
37733     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
37734     +            put string;
37735     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
37736     +            put string;
37737     +            put "end;";
37738     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
37739     +            put string;
37740     +          end;
37741     +           if first._group_ then do;
37742     +              flag = 0;
37743     +              endflag = 1;
37744     +              if ^first._variable_ then do;
37745     +                put "else";
37746     +              end;
37747     +              if LB ne . then do;
37748     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
37749     +              end;
37750     +              else do;
The SAS System

37751     +                 flag = 1;
37752     +                 string = "if";
37753     +              end;
37755     +           end;
37756     +           if last._Group_ then do;
37757     +              if UB ne . then do;
37758     +                if flag ne 1 then do;
37759     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
37760     +                end;
37761     +                else do;
37762     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
37763     +                end;
37764     +              end;
37765     +              else do;
37766     +                 if flag=1 then do;
37767     +                   string = strip(DISPLAY_VAR) ;
37768     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
37769     +                   endflag = 0;
37770     +                   string="";
37771     +                 end;
37772     +                 else do;
37773     +                   string = strip(string)!!" then do;";
37774     +                 end;
37775     +              end;
37776     +              put string;
37778     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
37779     +              put string;
37780     +              if endflag eq 1 then do;
37781     +                put "end;";
37782     +              end;
37783     +           end;
37784     +           if last._variable_ then do;
37785     +             string = "end;";
37786     +             put string;
37787     +           end;
37788     +       end;
37789     +       else do;
37790     +           _split_value_ = tranwrd(_split_value_,"'","''");
37791     +           if first._group_ then do;
37792     +              flag=0;
37793     +              if ^first._variable_ then
37794     +                 put 'else';
37795     +              else do;
37796     +                 put ' ';
37797     +                 put "&EM_CODEBAR;";
37798     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
37799     +                 put string;
37800     +                 put "&EM_CODEBAR;";
37802     +                 if origLabel ne "" then do;
37803     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
37804     +                   put string;
37805     +                   string = tranwrd(origLabel,"'","''");
37806     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
37807     +                   put string;
37808     +                 end;
37809     +                 else do;
37810     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
37811     +                   put string;
37812     +                 end;
37814     +                 put ' ';
37816     +                if format ne '' then do;
37817     +                  if first._variable_ then do;
37818     +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
37819     +                    put string;
37820     +                    string = '%dmnormip(_UFormat);';
37821     +                    put string;
37823     +                     string ="if MISSING(_UFORMAT) then do;";
37824     +                     put string;
37825     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
37826     +                     put string;
37827     +                     put "end;";
37829     +                     string="else if NOT MISSING(_UFORMAT) then do;";
37830     +                     put string;
37832     +                  end;
37833     +                end;
37834     +                else do;
37835     +                     if type = 'N' then do;
37836     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
37837     +                       put string;
37838     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
37839     +                       put string;
37840     +                       put "end;";
37842     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
37843     +                       put string;
37845     +                     end;
37846     +                     else if type='C' then do;
37847     +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
37848     +                        put string;
37849     +                        string = '%dmnormip(_UFormat);';
37850     +                        put string;
37852     +                        string ="if MISSING(_UFORMAT) then do;";
37853     +                        put string;
37854     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
37855     +                        put string;
37856     +                        put "end;";
37858     +                        string="else if NOT MISSING(_UFORMAT) then do;";
37859     +                        put string;
37860     +                        string = '%dmnormip(_UFormat);';
37861     +                        put string;
37862     +                    end;
37863     +                end;
37864     +              end;
37865     +              if format ne '' OR type='C' then do;
37866     +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
37867     +              end;
37868     +              else do;
37869     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
37870     +              end;
37871     +           end;
37872     +           else do;
37873     +              if flag ne 1 then do;
37874     +                if format ne '' OR type='C' then do;
37875     +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
37876     +                end;
37877     +                else do;
37878     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
37879     +                end;
37880     +                length = klength(tempstring);
37882     +                if length < 195 then do;
37883     +                   string = tempstring;
37884     +                end;
37885     +                else do;
37887     +                   string = strip(string);
37888     +                   put string;
37889     +                   string = ") then do;";
37890     +                   put string;
37892     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
37893     +                   put string;
37894     +                   put "end;";
37896     +                 /*  string = strip(string)||",'...';"; */
37898     +                   put 'else';
37899     +                   if format ne '' OR type='C' then do;
37900     +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
37901     +                   end;
37902     +                   else do;
37903     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
37904     +                   end;
37907     +                end;
37908     +              end;
37909     +           end;
37911     +           if last._group_ then do;
37912     +              string = strip(string);
37913     +              put string;
37914     +              string = ") then do;";
37915     +              put string;
37917     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
37918     +              put string;
37919     +              put "end;";
37920     +           end;
37922     +           if last._variable_ then do;
37923     +             put "else do;";
37925     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
37926     +             put string;
37928     +             put "end;";
37929     +             put "end;";
37930     +           end;
37931     +         *end;
37932     +       end;
37933     +    run;
37935     +    /* generate PublishCode the same as flowscorecode */
37936     +    filename Y "&publishCode";
37938     +    /* if publishCode already exists, wipe it out first */
37939     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
37940     +      %let rc = %sysfunc(fdelete(Y));
37941     +    %end;
37943     +    %appendfiles(Y, X);
37945     +    %if %EM_BINARY_TARGET= %then %do;
37946     +      %if %symexist(EM_NUM_INTERVAL_TARGET)=0 %then %do;
37947     +         %em_varMacro(name=EM_INTERVAL_TARGET, metadata=&EM_DATA_variableSet, where=%nrbquote(ROLE="TARGET" and LEVEL="INTERVAL" and (USE="Y" or USE="D")), nummacro=em_num_interval_Target);
37948     +      %end;
37949     +      %let ibn_inttarget=%EM_INTERVAL_TARGET;
37950     +      %let ibn_inttarget_orig = &ibn_inttarget;
37952     +      %if %symexist(IGNBinTarget)=0 %then %do;
37953     +         %global ignbintarget ignfreqvar;
37954     +         filename temp catalog 'sashelp.emutil.em_getvarname.source';
37955     +         %include temp;
37956     +         filename temp;
37957     +         %getVarName(&EM_IMPORT_DATA, BIN_%substr(&ibn_inttarget,1,%sysfunc(min(%length(&ibn_inttarget),28))), IGNBinTarget);
37959     +         %if &EM_PROPERTY_INTTARGETMETHOD = DUPFREQ %then %do;
37960     +            %getVarName(&EM_IMPORT_DATA, _FREQ_, ignfreqvar);
37961     +         %end;
37962     +      %end;
37963     +      %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
37964     +         proc sql noprint;
37965     +            %if %EM_FREQ ne %then %do;
37966     +               select sum(&ibn_inttarget * %EM_FREQ) / sum(%EM_FREQ)
37967     +            %end;
37968     +            %else %do;
37969     +               select mean(&ibn_inttarget)
37970     +            %end;
37971     +            into :ignbincut trimmed from &EM_IMPORT_DATA;
37972     +         quit;
37973     +      %end;
37975     +      %let dsid=%sysfunc(open(&EM_IMPORT_DATA,i));
37976     +      %if &dsid %then %do;
37977     +         %let tarlabel=%trim(%sysfunc(varlabel(&dsid,%sysfunc(varnum(&dsid,&ibn_inttarget)))));
37978     +         %let rc=%sysfunc(close(&dsid));
37979     +      %end;
37980     +      %if %length(&tarlabel)=0 %then %let tarlabel = &ibn_inttarget;
37982     +      data _null_;
37983     +         file x mod;
37984     +         put ' ';
37986     +         %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
37987     +             put "&EM_CODEBAR;";
37988     +             %let note = Mean Cutoff Binary Transformation for Target;
37989     +             put "* &note;";
37990     +             put "&EM_CODEBAR;";
37991     +         %end;
37992     +         %else %if &EM_PROPERTY_INTTARGETMETHOD = CUTUSER %then %do;
37993     +             put "&EM_CODEBAR;";
37994     +             %let note = User-Specified Cutoff Binary Transformation for Target;
37995     +             put "* &note;";
37996     +             put "&EM_CODEBAR;";
37997     +             %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
37998     +         %end;
37999     +         put "if &ibn_inttarget = . then &IGNBinTarget = .;";
38000     +         put "else do;";
38001     +         put "   if &ibn_inttarget > &ignbincut then &IGNBinTarget=1;";
38002     +         put "   else &IGNBinTarget=0;";
38003     +         put "end;";
38005     +         put "label &IGNBinTarget = 'Binary: %nrbquote(%substr(&tarlabel,1,192))';";
38006     +      run;
38008     +      filename deltaref "&EM_FILE_CDELTA_TRAIN";
38010     +      %if &EM_PROPERTY_RejectIntTarget = Y %then %do;
38012     +         data _null_;
38013     +            file deltaref;
38014     +            put "if name='&ibn_inttarget_orig' then role='REJECTED';";
38015     +            put "if name='&IGNBinTarget' then do;";
38016     +            put "   role='TARGET';";
38017     +            put "   level='BINARY';";
38018     +            put "end;";
38019     +         run;
38021     +      %end;
38022     +      %else %do;
38024     +         data _null_;
38025     +            file deltaref;
38026     +            put "if name='&ibn_inttarget_orig' then role='TARGET';";
38027     +            put "if name='&IGNBinTarget' then do;";
38028     +            put "   role='REJECTED';";
38029     +            put "   level='BINARY';";
38030     +            put "end;";
38031     +         run;
38032     +      %end;
38034     +      filename deltaref;
38036     +   %end;
38038     +    filename X;
38039     +    filename Y;
38041     +    %buildOptScoreCode;
38043     +    proc datasets library=work nolist;
38044     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
38045     +    run;
38046     +    quit;
38048     +%mend buildScoreCode;
38050     +%macro buildMetaCode(DeltaCodeFile=);
38052     +   /* set variable roles based on New Role column in the Results table */
38053     +   data _null_;
38054     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
38055     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
38056     +      %if &dsid %then %do;
38057     +        %let obs = %sysfunc(fetch(&dsid));
38058     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
38059     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
38060     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
38062     +        %do %while(&obs=0);
38063     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
38064     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
38065     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
38067     +          /* retrieve grp and woe names from varmappings dataset */
38068     +          %let choice = _VARIABLE_ = "&inputname";
38069     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
38070     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
38071     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
38072     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
38073     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
38075     +          put "if name = '&inputname' then role='REJECTED';";
38076     +          %if "&role" ne "DEFAULT" %then %do;
38077     +            put "if name = '&grpname' then role='&role';";
38078     +          %end;
38079     +          %else %do;
38080     +            put "if name = '&grpname' then role='&oldrole';";
38081     +          %end;
38082     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
38084     +          %let obs = %sysfunc(fetch(&dsid));
38085     +        %end;
38086     +      %end;
38087     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
38088     +   run;
38090     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
38091     +   data _null_;
38092     +      file &DeltaCodeFile MOD;
38094     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
38095     +      %if &sdsid %then %do;
38096     +        %let sobs = %sysfunc(fetch(&sdsid));
38097     +        %do %while(&sobs=0);
38098     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
38099     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
38100     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
38101     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
38103     +          %let checkgrp = GRP_&checkname;
38104     +          %let lenname = %length(&checkgrp);
38105     +          %if %eval(&lenname-32) > 0 %then %do;
38106     +            %let checkgrp = %substr(&checkgrp, 1, 32);
38107     +          %end;
38109     +          %let choice = _VARIABLE_ ="&checkname";
38110     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
38112     +          /* if var not found in varmappings, delete variables; */
38113     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
38114     +          %if &vdsid eq 0 %then %do;
38115     +            put 'if name="&displayvar" then delete;';
38116     +            %let dispgrp = GRP_&displayvar;
38117     +            put 'if name="&dispgrp" then delete;';
38118     +          %end;
38120     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
38121     +          %let sobs = %sysfunc(fetch(&sdsid));
38122     +        %end;
38123     +      %end;
38124     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
38125     +   run;
38127     +%mend buildMetaCode;
38129     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
38131     +   proc sort data=&coarse out=sortedcoarse nodupkey;
38132     +     by display_var;
38133     +   run;
38134     +   proc sort data=&varmappings nodupkey;
38135     +     by _variable_;
38136     +   run;
38137     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
38138     +     proc sort data=&resultstable; by display_var; run;
38140     +     /* check that _new_role exists - did not exist in earlier releases */
38141     +     %let rds=%sysfunc(open(&resultstable));
38142     +     %let _newrolenum = %sysfunc(VARNUM(&rds, _new_role_));
38143     +     %let rds=%sysfunc(close(&rds));
38144     +   %end;
38146     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
38147     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
38148     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
38149     +        &resultstable (keep = display_var %if &_newrolenum %then _new_role_; )
38150     +     %end;
38151     +     ;
38152     +     by display_var;
38153     +     length _role_ _new_role_ $10;
38154     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
38155     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
38156     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_calcrole_vlabel, NOQUOTE))"
38157     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
38158     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
38159     +           ;
38161     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
38162     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
38163     +                _role_ = "Rejected";
38164     +             else _role_ = "Input";
38165     +           %end;
38166     +           %else %do;
38167     +             _role_ = "Input";
38168     +           %end;
38169     +           if _new_role_ eq "" then _new_role_="Default";
38170     +      if ^_a then do;
38171     +        _gini_ = 0;
38172     +        _role_ = 'Rejected';
38173     +        if _new_role_ eq "" then _new_role_="Default";
38174     +      end;
38175     +   run;
38176     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
38177     +     by NAME;
38178     +   run;
38179     +   data outlabel;
38180     +     set outlabel;
38181     +     if _label_ = '' then _label_ = _variable_;
38182     +   run;
38183     +   data &resultstable;
38184     +     merge &resultstable(in=_a_) outlabel;
38185     +     by display_Var;
38186     +     if _a_ then output;
38187     +   run;
38188     +   proc datasets library=work nolist;
38189     +     delete sortedcoarse outlabel;
38190     +   run;
38191     +   quit;
38192     +   proc sort data=&resultstable nodupkey;
38193     +      by DESCENDING
38194     +        _gini_ display_Var;
38195     +   run;
38196     +   data &resultstable;
38197     +     set &resultstable;
38199     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
38200     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
38201     +     giniOrder = _N_;
38202     +     _gini_ = round(_GINI_, .001);
38203     +     drop _variable_;
38204     +   run;
38206     +   proc print data=&resultstable label;
38207     +   run;
38209     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
38210     +   data &coarse;
38211     +     set &coarse;
38212     +     length role $10;
38213     +     %let dsid = %sysfunc(open(&resultstable));
38214     +     %if &dsid %then %do;
38215     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
38216     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
38217     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
38219     +       %let obs = %sysfunc(fetch(&dsid));
38220     +       %do %while(&obs=0);
38221     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
38222     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
38223     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
38225     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
38226     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
38227     +            giniOrder = &order;
38228     +            role = "&role";
38229     +          end;
38231     +          %let obs = %sysfunc(fetch(&dsid));
38232     +       %end;
38233     +     %end;
38234     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
38235     +   run;
38238     +%mend EM_GENERATE_RESULTSTABLE;
38240     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
38242     +    /* instantiate the zchar macro to be used in adding bin definition */
38243     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
38244     +    %inc _temp;
38245     +    filename _temp;
38247     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
38248     +      by _variable_ binFlag _group_ LB;
38249     +    run;
38251     +    data tempExport;
38252     +      set sortedFine;
38253     +      by _variable_ binFlag _group_;
38254     +      length _split_value_ $200;
38256     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
38257     +      if binFlag = 0 then do;
38258     +        index = kindex(_variable_, "BIN_");
38259     +        if index gt 0 then do;
38260     +          _LEVEL_ = "INTERVAL";
38261     +        end;
38262     +        _Split_value_ = _split_value_;
38263     +        output;
38264     +      end;
38265     +      else do;
38266     +         * if last._group_ then do;
38267     +          index = kindex(_variable_, "BIN_");
38268     +          if index gt 0 then do;
38269     +            _LEVEL_ = "INTERVAL";
38270     +          end;
38271     +          _Split_value_ = %zchar(UB);
38272     +          output;
38273     +         * end;
38274     +      end;
38276     +      rename display_Var = _variable_;
38277     +      keep display_var _level_ _group_ _split_value_ binFlag;
38278     +    run;
38280     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
38281     +       data &EXPORTGROUPING;
38282     +         set tempexport;
38283     +       run;
38284     +    %end;
38285     +    %else %do;
38286     +       /* determine if EXPORTGROUPING already exists */
38287     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
38288     +         data &EXPORTGROUPING;
38289     +            set &EXPORTGROUPING tempexport;
38290     +         run;
38291     +       %end;
38292     +       %else %do;
38293     +         data &EXPORTGROUPING;
38294     +            set tempexport;
38295     +         run;
38296     +       %end;
38297     +    %end;
38299     +    proc datasets lib=work nolist;
38300     +      delete sortedFine tempexport;
38301     +    run;
38302     +    quit;
38304     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
38308     +
38309     +%macro report;
38310     +
38311     +   /* if createGrouping then create a dataset for export */
38312     +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
38313     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
38314     +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
38315     +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
38316     +   %end;
38317     +   %else %do;
38318     +     proc datasets library=&EM_LIB nolist;
38319     +       delete &EM_NODEID._EXPORTGROUP;
38320     +     run;
38321     +     quit;
38322     +   %end;
38323     +
38324     +
38325     +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
38326     +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
38327     +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
38328     +   %end;
38329     +   %else %do;
38330     +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
38331     +   %end;
38332     +
38333     +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
38334     +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
38335     +
38336     +
38337     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS1 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;

NOTE: The file EMWS1.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.79 seconds
      cpu time            0.23 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 20) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.55259612740604;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
38338      *------------------------------------------------------------*;
38339      * End REPORT: BINNING;
38340      *------------------------------------------------------------*;
38341      

38342      /* Reset EM Options */
38343      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
38344      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
38345      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
38346      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
38347      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
38348      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 134 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
