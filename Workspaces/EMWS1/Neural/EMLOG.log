*------------------------------------------------------------*
User:                jmmorr01
Date:                October 26, 2018
Time:                00:11:21
Site:                70080761
Platform:            X64_8PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 26, 2018"
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:10:59" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                October 26, 2018
Time:                00:10:59
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O289K_S3 "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O289K_S3 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 26, 2018"
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:10:59" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                jmmorr01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080761";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 26, 2018"
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:10:59" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                jmmorr01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
62308      proc freq data=EMWS1.Neural_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Neural_VariableSet noprint;
62309      table ROLE*LEVEL/out=WORK.NeuralMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.NeuralMETA;
62310      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 29 observations read from the data set EMWS1.NEURAL_VARIABLESET.
NOTE: The data set WORK.NEURALMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
62311      proc print data=WORK.NeuralMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.NeuralMETA label noobs;
62312      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
62313      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
62313    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
62313    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
62314      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
62315      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
62316      run;
 
NOTE: There were 5 observations read from the data set WORK.NEURALMETA.
NOTE: The PROCEDURE PRINT printed page 26.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
62317      title10;
MPRINT(EM_DIAGRAM):   title10;
62318      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.BINNING_TRAIN EMWS1.BINNING_TRAIN
EMWS1.BINNING_TRAIN EMWS1.BINNING_TRAIN EMWS1 BINNING_TRAIN
EMWS1.BINNING_TRAIN EMWS1.BINNING_TRAIN
EMWS1.BINNING_TRAIN EMWS1.BINNING_TRAIN EMWS1 BINNING_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.BINNING_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class BAD(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=BAD));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids_BAD_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
62347      data WORK.Neural_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Neural_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
62348      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
62349      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
62349    ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
62349    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
62350         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
62350    ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
62350    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
62351      set EMWS1.IDS_BAD_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS_BAD_DM( where=(_TYPE_="TARGET"));
62352      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
62353      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
62354      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
62355      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
62356      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
62357      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
62358      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
62359      end;
MPRINT(EM_DIAGRAM):   end;
62360      output;
MPRINT(EM_DIAGRAM):   output;
62361      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.NEURAL_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
62362      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
62363      proc print data=WORK.Neural_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Neural_EVENT noobs label;
62364      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
62365      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
62366      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
62367      run;
 
NOTE: There were 1 observations read from the data set WORK.NEURAL_EVENT.
NOTE: The PROCEDURE PRINT printed page 27.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
62368      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "BAD"."
62369      proc print data = EMWS1.Ids_BAD_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_BAD_DM noobs label;
62370      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
62371      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
62372      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
62372    ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
62372    ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
62373      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
62374      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
62375      run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS_BAD_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 28.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
62376      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M2ALKKKA;
MPRINT(EM_DIAGRAM):   set WORK.M2ALKKKA;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
62386      data WORK.M2ALKKKA;
MPRINT(EM_DIAGRAM):    data WORK.M2ALKKKA;
62387      set WORK.M2ALKKKA end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M2ALKKKA end=eof;
62388      output;
MPRINT(EM_DIAGRAM):   output;
62389      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
62390      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
62391      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
62392      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
62393      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
62394      output;
MPRINT(EM_DIAGRAM):   output;
62395      end;
MPRINT(EM_DIAGRAM):   end;
62396      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 15 observations read from the data set WORK.M2ALKKKA.
NOTE: The data set WORK.M2ALKKKA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_BAD_DD.
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
NOTE: There were 2 observations read from the data set EMWS1.IDS_BAD_DD.
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
62397      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
62398      * Neural: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Neural: Create decision matrix;
62399      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62400      data WORK.BAD;
MPRINT(EM_DIAGRAM):   data WORK.BAD;
62401        length   BAD                              $  32
62402                 COUNT                                8
62403                 DATAPRIOR                            8
62404                 TRAINPRIOR                           8
62405                 DECPRIOR                             8
62406                 DECISION1                            8
62407                 DECISION2                            8
62408                 ;
MPRINT(EM_DIAGRAM):   length BAD $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8
DECISION2 8 ;
62409
62410        label    COUNT="Level Counts"
62411                 DATAPRIOR="Data Proportions"
62412                 TRAINPRIOR="Training Proportions"
62413                 DECPRIOR="Decision Priors"
62414                 DECISION1="1"
62415                 DECISION2="0"
62416                 ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
62417        format   COUNT 10.
62418                 ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
62419      BAD="1"; COUNT=1189; DATAPRIOR=0.1994966442953; TRAINPRIOR=0.1994966442953;
62419    ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   BAD="1";
MPRINT(EM_DIAGRAM):   COUNT=1189;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.1994966442953;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.1994966442953;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
62420      output;
MPRINT(EM_DIAGRAM):   output;
62421      BAD="0"; COUNT=4771; DATAPRIOR=0.80050335570469; TRAINPRIOR=0.80050335570469;
62421    ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   BAD="0";
MPRINT(EM_DIAGRAM):   COUNT=4771;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.80050335570469;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.80050335570469;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
62422      output;
MPRINT(EM_DIAGRAM):   output;
62423      ;
MPRINT(EM_DIAGRAM):   ;
62424      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
62425      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
62426      modify BAD(type=PROFIT label=BAD);
MPRINT(EM_DIAGRAM):   modify BAD(type=PROFIT label= BAD);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
62427      label DECISION1= '1';
62428      label DECISION2= '0';
62429      run;
 
NOTE: MODIFY was successful for WORK.BAD.DATA.
62430      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
62431      data EM_Neural;
MPRINT(EM_DIAGRAM):   data EM_Neural;
62432      set EMWS1.BINNING_TRAIN(keep=
62433      BAD GRP_INDELINQ GRP_INDEROG GRP_JOB GRP_LOG_CLAGE GRP_LOG_CLNO
62434      GRP_LOG_DEBTINC GRP_LOG_DELINQ GRP_LOG_DEROG GRP_LOG_LOAN GRP_LOG_MORTDUE
62435      GRP_LOG_VALUE GRP_LOG_YOJ GRP_NINQ GRP_REASON );
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_TRAIN(keep= BAD GRP_INDELINQ GRP_INDEROG GRP_JOB
GRP_LOG_CLAGE GRP_LOG_CLNO GRP_LOG_DEBTINC GRP_LOG_DELINQ GRP_LOG_DEROG GRP_LOG_LOAN
GRP_LOG_MORTDUE GRP_LOG_VALUE GRP_LOG_YOJ GRP_NINQ GRP_REASON );
62436      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2382 observations read from the data set EMWS1.PART_TRAIN.
NOTE: View EMWS1.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2382 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 2382 observations read from the data set EMWS1.BINNING_TRAIN.
NOTE: The data set WORK.EM_NEURAL has 2382 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
62437      *------------------------------------------------------------* ;
62438      * Neural: DMDBClass Macro ;
62439      *------------------------------------------------------------* ;
62440      %macro DMDBClass;
62441          BAD(DESC) GRP_INDELINQ(ASC) GRP_INDEROG(ASC) GRP_JOB(ASC) GRP_LOG_CLAGE(ASC)
62442         GRP_LOG_CLNO(ASC) GRP_LOG_DEBTINC(ASC) GRP_LOG_DELINQ(ASC) GRP_LOG_DEROG(ASC)
62443         GRP_LOG_LOAN(ASC) GRP_LOG_MORTDUE(ASC) GRP_LOG_VALUE(ASC) GRP_LOG_YOJ(ASC)
62444         GRP_NINQ(ASC) GRP_REASON(ASC)
62445      %mend DMDBClass;
62446      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
62447      * Neural: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Neural: DMDBVar Macro ;
62448      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
62449      %macro DMDBVar;
62450
62451      %mend DMDBVar;
62452      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62453      * Neural: Create DMDB;
MPRINT(EM_DIAGRAM):   * Neural: Create DMDB;
62454      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62455      proc dmdb batch data=WORK.EM_Neural
62456      dmdbcat=WORK.Neural_DMDB
62457      maxlevel = 513
62458      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_Neural dmdbcat=WORK.Neural_DMDB maxlevel =
513 ;
MPRINT(EM_DIAGRAM):   class
62459      class %DMDBClass;
MPRINT(DMDBCLASS):   BAD(DESC) GRP_INDELINQ(ASC) GRP_INDEROG(ASC) GRP_JOB(ASC)
GRP_LOG_CLAGE(ASC) GRP_LOG_CLNO(ASC) GRP_LOG_DEBTINC(ASC) GRP_LOG_DELINQ(ASC)
GRP_LOG_DEROG(ASC) GRP_LOG_LOAN(ASC) GRP_LOG_MORTDUE(ASC) GRP_LOG_VALUE(ASC) GRP_LOG_YOJ(ASC)
GRP_NINQ(ASC) GRP_REASON(ASC)
MPRINT(EM_DIAGRAM):  ;
62460      var %DMDBVar;
MPRINT(EM_DIAGRAM):   var
MPRINT(EM_DIAGRAM):  ;
62461      target
62462      BAD
62463      ;
MPRINT(EM_DIAGRAM):   target BAD ;
62464      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2382   Memory used = 511K.
NOTE: There were 2382 observations read from the data set WORK.EM_NEURAL.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
62465      quit;
62466      *--- end code ---*;
 
62467      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
62468      * Neural: Interval Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Interval Input Variables Macro ;
62469      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
62470      %macro INTINPUTS;
62471
62472      %mend INTINPUTS;
62473      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
62474      * Neural: Binary Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Binary Inputs Macro ;
62475      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
62476      %macro BININPUTS;
62477
62478      %mend BININPUTS;
62479      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
62480      * Neural: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Nominal Inputs Macro ;
62481      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
62482      %macro NOMINPUTS;
62483
62484      %mend NOMINPUTS;
62485      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
62486      * Neural: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Ordinal Inputs Macro ;
62487      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
62488      %macro ORDINPUTS;
62489          GRP_INDELINQ GRP_INDEROG GRP_JOB GRP_LOG_CLAGE GRP_LOG_CLNO GRP_LOG_DEBTINC
62490         GRP_LOG_DELINQ GRP_LOG_DEROG GRP_LOG_LOAN GRP_LOG_MORTDUE GRP_LOG_VALUE
62491         GRP_LOG_YOJ GRP_NINQ GRP_REASON
62492      %mend ORDINPUTS;
62493      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62494      * Neural Network Training;
MPRINT(EM_DIAGRAM):   * Neural Network Training;
62495      ;
MPRINT(EM_DIAGRAM):   ;
62496      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62497      proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB
62498      validdata = EMWS1.BINNING_VALIDATE
62499      random=12345
62500      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB validdata =
EMWS1.BINNING_VALIDATE random=12345 ;
62501      nloptions
62502      ;
MPRINT(EM_DIAGRAM):   nloptions ;
62503      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
62504      netopts
62505      decay=0;
MPRINT(EM_DIAGRAM):   netopts decay=0;
MPRINT(EM_DIAGRAM):   input
62506      input %ORDINPUTS / level=ordinal id=ord
MPRINT(ORDINPUTS):   GRP_INDELINQ GRP_INDEROG GRP_JOB GRP_LOG_CLAGE GRP_LOG_CLNO
GRP_LOG_DEBTINC GRP_LOG_DELINQ GRP_LOG_DEROG GRP_LOG_LOAN GRP_LOG_MORTDUE GRP_LOG_VALUE
GRP_LOG_YOJ GRP_NINQ GRP_REASON
62507      ;
MPRINT(EM_DIAGRAM):   / level=ordinal id=ord ;
62508      target BAD / level=NOMINAL id=BAD
62509      bias
62510      ;
MPRINT(EM_DIAGRAM):   target BAD / level=NOMINAL id=BAD bias ;
62511      arch MLP
62512      Hidden=3
62513      ;
MPRINT(EM_DIAGRAM):   arch MLP Hidden=3 ;
62514      Prelim 5 preiter=10
62515      pretime=3600
62516      Outest=EMWS1.Neural_PRELIM_OUTEST
62517      ;
MPRINT(EM_DIAGRAM):   Prelim 5 preiter=10 pretime=3600 Outest=EMWS1.Neural_PRELIM_OUTEST ;
NOTE:  Synchronizing the objectives and the Solution.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 10 iterations or 2147483647 function calls.
NOTE: The data set EMWS1.NEURAL_PRELIM_OUTEST has 11 observations and 148 variables.
62518      save network=EMWS1.Neural_NETWORK.dm_neural;
MPRINT(EM_DIAGRAM):   save network=EMWS1.Neural_NETWORK.dm_neural;
NOTE: Creating a new Catalogue with entry EMWS1.NEURAL_NETWORK.DM_NEURAL.
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been closed.
62519      train Maxiter=50
62520      maxtime=14400
62521      Outest=EMWS1.Neural_outest estiter=1
62522      Outfit=EMWS1.Neural_OUTFIT
62523      ;
MPRINT(EM_DIAGRAM):   train Maxiter=50 maxtime=14400 Outest=EMWS1.Neural_outest estiter=1
Outfit=EMWS1.Neural_OUTFIT ;
WARNING: QUANEW Optimization cannot be completed.
NOTE: QUANEW needs more than 50 iterations or 2147483647 function calls.
NOTE: The data set EMWS1.NEURAL_OUTEST has 53 observations and 148 variables.
NOTE: The data set EMWS1.NEURAL_OUTFIT has 104 observations and 36 variables.
62524      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL has 2382 observations and 15 variables.
NOTE: The data set EMWS1.BINNING_VALIDATE has . observations and 39 variables.
NOTE: There were 1788 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.BINNING_VALIDATE.VIEW used (Total process time):
      real time           3.17 seconds
      cpu time            2.81 seconds
 
NOTE: There were 1788 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: The PROCEDURE NEURAL printed pages 29-32.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           3.20 seconds
      cpu time            2.82 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
62525      quit;
 
62526      proc sort data=EMWS1.Neural_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL"))
62526    ! out=fit_Neural;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_OUTFIT(where=(_iter_ ne . and
_NAME_="OVERALL")) out=fit_Neural;
62527      by _VAVERR_;
MPRINT(EM_DIAGRAM):   by _VAVERR_;
62528      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL_OUTFIT.
      WHERE (_iter_ not = .) and (_NAME_='OVERALL');
NOTE: The data set WORK.FIT_NEURAL has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
62529      %GLOBAL ITER;
62530      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
62531      set fit_Neural(obs=1);
MPRINT(EM_DIAGRAM):   set fit_Neural(obs=1);
62532      call symput('ITER',put(_ITER_, 6.));
MPRINT(EM_DIAGRAM):   call symput('ITER',put(_ITER_, 6.));
62533      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_NEURAL.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
62534      data EMWS1.Neural_INITIAL;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_INITIAL;
62535      set EMWS1.Neural_outest(where=(_ITER_ eq &ITER and _OBJ_ ne .));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_outest(where=(_ITER_ eq 50 and _OBJ_ ne .));
62536      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL_OUTEST.
      WHERE (_ITER_=50) and (_OBJ_ not = .);
NOTE: The data set EMWS1.NEURAL_INITIAL has 2 observations and 148 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.00 seconds
 
 
62537      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
62538      * Neural Network Model Selection;
MPRINT(EM_DIAGRAM):   * Neural Network Model Selection;
62539      ;
MPRINT(EM_DIAGRAM):   ;
62540      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62541      proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB
62542      validdata = EMWS1.BINNING_VALIDATE
62543      network = EMWS1.Neural_NETWORK.dm_neural
62544      random=12345
62545      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB validdata =
EMWS1.BINNING_VALIDATE network = EMWS1.Neural_NETWORK.dm_neural random=12345 ;
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS1.NEURAL_NETWORK.DM_NEURAL has been closed.
62546      nloptions noprint;
MPRINT(EM_DIAGRAM):   nloptions noprint;
62547      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
62548      initial inest=EMWS1.Neural_INITIAL;
MPRINT(EM_DIAGRAM):   initial inest=EMWS1.Neural_INITIAL;
NOTE: The data set EMWS1.NEURAL_INITIAL has 2 observations and 148 variables.
62549      train tech=NONE;
MPRINT(EM_DIAGRAM):   train tech=NONE;
NOTE: No optimization performed.
62550      code file="J:\JMMORR01\CIS 445\Tutorial 2\My
62550    ! Project\Workspaces\EMWS1\Neural\SCORECODE.sas"
62551      group=Neural
62552      ;
MPRINT(EM_DIAGRAM):   code file="J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\SCORECODE.sas" group=Neural ;
NOTE: External file J:\JMMORR01\CIS 445\Tutorial 2\My
      Project\Workspaces\EMWS1\Neural\SCORECODE.sas opened.
62553      ;
MPRINT(EM_DIAGRAM):   ;
62554      code file="J:\JMMORR01\CIS 445\Tutorial 2\My
62554    ! Project\Workspaces\EMWS1\Neural\RESIDUALSCORECODE.sas"
62555      group=Neural
62556      residual
62557      ;
MPRINT(EM_DIAGRAM):   code file="J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\RESIDUALSCORECODE.sas" group=Neural residual ;
NOTE: External file J:\JMMORR01\CIS 445\Tutorial 2\My
      Project\Workspaces\EMWS1\Neural\RESIDUALSCORECODE.sas opened.
62558      ;
MPRINT(EM_DIAGRAM):   ;
62559      score data=EMWS1.BINNING_TRAIN out=_NULL_
NOTE: View EMWS1.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.07 seconds
 
62560      outfit=WORK.FIT1
62561      role=TRAIN
62562      outkey=EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.BINNING_TRAIN out=_NULL_ outfit=WORK.FIT1 role=TRAIN
outkey=EMWS1.Neural_OUTKEY;
NOTE: The data set EMWS1.NEURAL_OUTKEY has 57 observations and 8 variables.
NOTE: The data set EMWS1.BINNING_TRAIN has . observations and 39 variables.
NOTE: There were 2382 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2382 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: The data set WORK.FIT1 has 2 observations and 23 variables.
62563      score data=EMWS1.BINNING_VALIDATE out=_NULL_
NOTE: View EMWS1.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.06 seconds
 
62564      outfit=WORK.FIT2
62565      role=VALID
62566      outkey=EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.BINNING_VALIDATE out=_NULL_ outfit=WORK.FIT2 role=VALID
outkey=EMWS1.Neural_OUTKEY;
NOTE: The data set EMWS1.NEURAL_OUTKEY has 57 observations and 8 variables.
NOTE: The data set EMWS1.BINNING_VALIDATE has . observations and 39 variables.
NOTE: There were 1788 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: The data set WORK.FIT2 has 2 observations and 15 variables.
62567      score data=EMWS1.BINNING_TEST out=_NULL_
NOTE: View EMWS1.BINNING_TEST.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.06 seconds
 
62568      outfit=WORK.FIT3
62569      role=TEST
62570      outkey=EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS1.BINNING_TEST out=_NULL_ outfit=WORK.FIT3 role=TEST
outkey=EMWS1.Neural_OUTKEY;
NOTE: The data set EMWS1.NEURAL_OUTKEY has 57 observations and 8 variables.
NOTE: The data set EMWS1.BINNING_TEST has . observations and 39 variables.
NOTE: There were 1790 observations read from the data set EMWS1.PART_TEST.
NOTE: There were 1790 observations read from the data set EMWS1.TRANS_TEST.
NOTE: The data set WORK.FIT3 has 2 observations and 17 variables.
62571      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL has 2382 observations and 15 variables.
NOTE: The data set EMWS1.BINNING_VALIDATE has . observations and 39 variables.
NOTE: There were 1788 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.93 seconds
      cpu time            0.48 seconds
 
NOTE: There were 1788 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: Closing the Neural Application.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.96 seconds
      cpu time            0.51 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
62572      quit;
62573      data EMWS1.Neural_OUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_OUTFIT;
62574      merge WORK.FIT1 WORK.FIT2 WORK.FIT3;
MPRINT(EM_DIAGRAM):   merge WORK.FIT1 WORK.FIT2 WORK.FIT3;
62575      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.FIT1.
NOTE: There were 2 observations read from the data set WORK.FIT2.
NOTE: There were 2 observations read from the data set WORK.FIT3.
NOTE: The data set EMWS1.NEURAL_OUTFIT has 2 observations and 51 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
62576      data EMWS1.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMESTIMATE;
62577      set EMWS1.Neural_outest;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_outest;
62578      if _type_ ^in('HESSIAN' 'GRAD');
MPRINT(EM_DIAGRAM):   if _type_ ^in('HESSIAN' 'GRAD');
62579      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 53 observations read from the data set EMWS1.NEURAL_OUTEST.
NOTE: The data set EMWS1.NEURAL_EMESTIMATE has 52 observations and 148 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.04 seconds
 
 
62580      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
62581      delete EM_Neural;
MPRINT(EM_DIAGRAM):   delete EM_Neural;
62582      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.EM_NEURAL (memtype=DATA).
62583      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
62584      data EMWS1.Neural_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
62585      set fit_Neural;
MPRINT(EM_DIAGRAM):   set fit_Neural;
62586      attrib _ITER_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_trainiterations_vlabel  ,
62586    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _ITER_ label="Training Iterations";
62587      attrib _NAME_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name  ,
62587    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _NAME_ label="Name";
62588      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set WORK.FIT_NEURAL.
NOTE: The data set EMWS1.NEURAL_PLOTDS has 52 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
 
 
62589      proc sort data=EMWS1.Neural_PLOTDS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_PLOTDS;
62590      by _ITER_;
MPRINT(EM_DIAGRAM):   by _ITER_;
62591      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL_PLOTDS.
NOTE: The data set EMWS1.NEURAL_PLOTDS has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.14 seconds
      cpu time            0.04 seconds
 
 
62592      data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_
62592    ! where=(_type_ eq "PARMS" and _iter_ eq 50) );
MPRINT(EM_DIAGRAM):    data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_
_averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 50) );
62593      set EMWS1.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMESTIMATE;
62594      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS1.NEURAL_EMESTIMATE.
NOTE: The data set WORK.TEMPWEIGHT has 2 observations and 140 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
62595      proc sort;
MPRINT(EM_DIAGRAM):   proc sort;
62596      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
62597      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set WORK.TEMPWEIGHT has 2 observations and 140 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
62598      proc transpose data=tempweight out=EMWS1.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   proc transpose data=tempweight out=EMWS1.Neural_WEIGHTDS;
62599      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
62600      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set EMWS1.NEURAL_WEIGHTDS has 276 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
 
 
62601      data EMWS1.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_WEIGHTDS;
62602      set EMWS1.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_WEIGHTDS;
62603      FROM = trim(left(scan(_LABEL_, 1, '->')));
MPRINT(EM_DIAGRAM):   FROM = trim(left(scan(_LABEL_, 1, '->')));
62604      TO = trim(left(scan(_LABEL_, 2, '>')));
MPRINT(EM_DIAGRAM):   TO = trim(left(scan(_LABEL_, 2, '>')));
62605      WEIGHT = COL1;
MPRINT(EM_DIAGRAM):   WEIGHT = COL1;
62606      if (TO eq '') or (FROM eq '') then delete;
MPRINT(EM_DIAGRAM):   if (TO eq '') or (FROM eq '') then delete;
62607      label _LABEL_ ="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))" FROM
62607    ! = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel  , NOQUOTE))" TO =
62607    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel  , NOQUOTE))" WEIGHT =
62608         "%sysfunc(sasmsg(sashelp.dmine, rpt_weight_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LABEL_ = "Label" FROM = "From" TO = "Into" WEIGHT = "Weight";
62609      keep FROM TO WEIGHT _LABEL_;
MPRINT(EM_DIAGRAM):   keep FROM TO WEIGHT _LABEL_;
62610      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 276 observations read from the data set EMWS1.NEURAL_WEIGHTDS.
NOTE: The data set EMWS1.NEURAL_WEIGHTDS has 266 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
 
 
62611      proc sort data=EMWS1.Neural_WEIGHTDS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_WEIGHTDS nodupkey;
62612      by _LABEL_;
MPRINT(EM_DIAGRAM):   by _LABEL_;
62613      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 266 observations read from the data set EMWS1.NEURAL_WEIGHTDS.
NOTE: 133 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL_WEIGHTDS has 133 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.14 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 26, 2018"
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:11:08" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                October 26, 2018
Time:                00:11:08
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0SOLCID "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0SOLCID new;
MPRINT(EM_DIAGRAM):   run;
62715      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
62716      set EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTKEY;
62717      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
62718      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 57 observations read from the data set EMWS1.NEURAL_OUTKEY.
NOTE: The data set WORK.OUTKEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
62719      filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My
62719    ! Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
62720      *------------------------------------------------------------*;
62721      * Neural: Scoring DATA data;
62722      *------------------------------------------------------------*;
62723      data EMWS1.Neural_TRAIN
62724      / view=EMWS1.Neural_TRAIN
62725      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_TRAIN / view=EMWS1.Neural_TRAIN ;
62726      set EMWS1.BINNING_TRAIN
62727      ;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_TRAIN ;
62728      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\JMMORR01\CIS 445\Tutorial 2\My
      Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
62729     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
62730     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
62731     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
62732     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
62733     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
62734     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
62735     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
62736     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
62737     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
62738     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
62739     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
62740     +LENGTH _WARN_ $4
62741     +      F_BAD  $ 12
62742     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_BAD $ 12 ;
62743     +      label GRP_INDELINQ3 = 'Dummy: GRP_INDELINQ=3' ;
MPRINT(EM_DIAGRAM):   label GRP_INDELINQ3 = 'Dummy: GRP_INDELINQ=3' ;
62744     +
62745     +      label GRP_INDEROG3 = 'Dummy: GRP_INDEROG=3' ;
MPRINT(EM_DIAGRAM):   label GRP_INDEROG3 = 'Dummy: GRP_INDEROG=3' ;
62746     +
62747     +      label GRP_JOB1 = 'Dummy: GRP_JOB=1' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB1 = 'Dummy: GRP_JOB=1' ;
62748     +
62749     +      label GRP_JOB2 = 'Dummy: GRP_JOB=2' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB2 = 'Dummy: GRP_JOB=2' ;
62750     +
62751     +      label GRP_JOB3 = 'Dummy: GRP_JOB=3' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB3 = 'Dummy: GRP_JOB=3' ;
62752     +
62753     +      label GRP_JOB4 = 'Dummy: GRP_JOB=4' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB4 = 'Dummy: GRP_JOB=4' ;
62754     +
62755     +      label GRP_JOB5 = 'Dummy: GRP_JOB=5' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB5 = 'Dummy: GRP_JOB=5' ;
62756     +
62757     +      label GRP_JOB6 = 'Dummy: GRP_JOB=6' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB6 = 'Dummy: GRP_JOB=6' ;
62758     +
62759     +      label GRP_LOG_CLAGE1 = 'Dummy: GRP_LOG_CLAGE=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLAGE1 = 'Dummy: GRP_LOG_CLAGE=1' ;
62760     +
62761     +      label GRP_LOG_CLAGE2 = 'Dummy: GRP_LOG_CLAGE=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLAGE2 = 'Dummy: GRP_LOG_CLAGE=2' ;
62762     +
62763     +      label GRP_LOG_CLAGE3 = 'Dummy: GRP_LOG_CLAGE=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLAGE3 = 'Dummy: GRP_LOG_CLAGE=3' ;
62764     +
62765     +      label GRP_LOG_CLAGE4 = 'Dummy: GRP_LOG_CLAGE=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLAGE4 = 'Dummy: GRP_LOG_CLAGE=4' ;
62766     +
62767     +      label GRP_LOG_CLNO1 = 'Dummy: GRP_LOG_CLNO=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLNO1 = 'Dummy: GRP_LOG_CLNO=1' ;
62768     +
62769     +      label GRP_LOG_CLNO2 = 'Dummy: GRP_LOG_CLNO=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLNO2 = 'Dummy: GRP_LOG_CLNO=2' ;
62770     +
62771     +      label GRP_LOG_CLNO3 = 'Dummy: GRP_LOG_CLNO=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLNO3 = 'Dummy: GRP_LOG_CLNO=3' ;
62772     +
62773     +      label GRP_LOG_CLNO4 = 'Dummy: GRP_LOG_CLNO=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLNO4 = 'Dummy: GRP_LOG_CLNO=4' ;
62774     +
62775     +      label GRP_LOG_DEBTINC1 = 'Dummy: GRP_LOG_DEBTINC=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEBTINC1 = 'Dummy: GRP_LOG_DEBTINC=1' ;
62776     +
62777     +      label GRP_LOG_DEBTINC2 = 'Dummy: GRP_LOG_DEBTINC=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEBTINC2 = 'Dummy: GRP_LOG_DEBTINC=2' ;
62778     +
62779     +      label GRP_LOG_DEBTINC3 = 'Dummy: GRP_LOG_DEBTINC=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEBTINC3 = 'Dummy: GRP_LOG_DEBTINC=3' ;
62780     +
62781     +      label GRP_LOG_DEBTINC4 = 'Dummy: GRP_LOG_DEBTINC=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEBTINC4 = 'Dummy: GRP_LOG_DEBTINC=4' ;
62782     +
62783     +      label GRP_LOG_DELINQ1 = 'Dummy: GRP_LOG_DELINQ=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DELINQ1 = 'Dummy: GRP_LOG_DELINQ=1' ;
62784     +
62785     +      label GRP_LOG_DEROG1 = 'Dummy: GRP_LOG_DEROG=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEROG1 = 'Dummy: GRP_LOG_DEROG=1' ;
62786     +
62787     +      label GRP_LOG_LOAN2 = 'Dummy: GRP_LOG_LOAN=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_LOAN2 = 'Dummy: GRP_LOG_LOAN=2' ;
62788     +
62789     +      label GRP_LOG_LOAN3 = 'Dummy: GRP_LOG_LOAN=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_LOAN3 = 'Dummy: GRP_LOG_LOAN=3' ;
62790     +
62791     +      label GRP_LOG_LOAN4 = 'Dummy: GRP_LOG_LOAN=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_LOAN4 = 'Dummy: GRP_LOG_LOAN=4' ;
62792     +
62793     +      label GRP_LOG_MORTDUE1 = 'Dummy: GRP_LOG_MORTDUE=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_MORTDUE1 = 'Dummy: GRP_LOG_MORTDUE=1' ;
62794     +
62795     +      label GRP_LOG_MORTDUE2 = 'Dummy: GRP_LOG_MORTDUE=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_MORTDUE2 = 'Dummy: GRP_LOG_MORTDUE=2' ;
62796     +
62797     +      label GRP_LOG_MORTDUE3 = 'Dummy: GRP_LOG_MORTDUE=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_MORTDUE3 = 'Dummy: GRP_LOG_MORTDUE=3' ;
62798     +
62799     +      label GRP_LOG_MORTDUE4 = 'Dummy: GRP_LOG_MORTDUE=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_MORTDUE4 = 'Dummy: GRP_LOG_MORTDUE=4' ;
62800     +
62801     +      label GRP_LOG_VALUE1 = 'Dummy: GRP_LOG_VALUE=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_VALUE1 = 'Dummy: GRP_LOG_VALUE=1' ;
62802     +
62803     +      label GRP_LOG_VALUE2 = 'Dummy: GRP_LOG_VALUE=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_VALUE2 = 'Dummy: GRP_LOG_VALUE=2' ;
62804     +
62805     +      label GRP_LOG_VALUE3 = 'Dummy: GRP_LOG_VALUE=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_VALUE3 = 'Dummy: GRP_LOG_VALUE=3' ;
62806     +
62807     +      label GRP_LOG_VALUE4 = 'Dummy: GRP_LOG_VALUE=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_VALUE4 = 'Dummy: GRP_LOG_VALUE=4' ;
62808     +
62809     +      label GRP_LOG_YOJ1 = 'Dummy: GRP_LOG_YOJ=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_YOJ1 = 'Dummy: GRP_LOG_YOJ=1' ;
62810     +
62811     +      label GRP_LOG_YOJ2 = 'Dummy: GRP_LOG_YOJ=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_YOJ2 = 'Dummy: GRP_LOG_YOJ=2' ;
62812     +
62813     +      label GRP_LOG_YOJ3 = 'Dummy: GRP_LOG_YOJ=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_YOJ3 = 'Dummy: GRP_LOG_YOJ=3' ;
62814     +
62815     +      label GRP_LOG_YOJ4 = 'Dummy: GRP_LOG_YOJ=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_YOJ4 = 'Dummy: GRP_LOG_YOJ=4' ;
62816     +
62817     +      label GRP_NINQ1 = 'Dummy: GRP_NINQ=1' ;
MPRINT(EM_DIAGRAM):   label GRP_NINQ1 = 'Dummy: GRP_NINQ=1' ;
62818     +
62819     +      label GRP_NINQ2 = 'Dummy: GRP_NINQ=2' ;
MPRINT(EM_DIAGRAM):   label GRP_NINQ2 = 'Dummy: GRP_NINQ=2' ;
62820     +
62821     +      label GRP_NINQ3 = 'Dummy: GRP_NINQ=3' ;
MPRINT(EM_DIAGRAM):   label GRP_NINQ3 = 'Dummy: GRP_NINQ=3' ;
62822     +
62823     +      label GRP_REASON1 = 'Dummy: GRP_REASON=1' ;
MPRINT(EM_DIAGRAM):   label GRP_REASON1 = 'Dummy: GRP_REASON=1' ;
62824     +
62825     +      label GRP_REASON2 = 'Dummy: GRP_REASON=2' ;
MPRINT(EM_DIAGRAM):   label GRP_REASON2 = 'Dummy: GRP_REASON=2' ;
62826     +
62827     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
62828     +
62829     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
62830     +
62831     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
62832     +
62833     +      label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
62834     +
62835     +      label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
62836     +
62837     +      label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
62838     +
62839     +      label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
62840     +
62841     +      label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
62842     +
62843     +      label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
62844     +
62845     +      label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
62846     +
62847     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
62848     +
62849     +*** Generate dummy variables for GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDELINQ ;
62850     +drop GRP_INDELINQ3 ;
MPRINT(EM_DIAGRAM):   drop GRP_INDELINQ3 ;
62851     +if missing( GRP_INDELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDELINQ ) then do;
62852     +   GRP_INDELINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = .;
62853     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
62854     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
62855     +end;
MPRINT(EM_DIAGRAM):   end;
62856     +else do;
MPRINT(EM_DIAGRAM):   else do;
62857     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
62858     +   _dm12 = put( GRP_INDELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDELINQ , BEST12. );
62859     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
62860     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
62861     +      GRP_INDELINQ3 = -1;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = -1;
62862     +   end;
MPRINT(EM_DIAGRAM):   end;
62863     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
62864     +      GRP_INDELINQ3 = 1;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = 1;
62865     +   end;
MPRINT(EM_DIAGRAM):   end;
62866     +   else do;
MPRINT(EM_DIAGRAM):   else do;
62867     +      GRP_INDELINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = .;
62868     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
62869     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
62870     +   end;
MPRINT(EM_DIAGRAM):   end;
62871     +end;
MPRINT(EM_DIAGRAM):   end;
62872     +
62873     +*** Generate dummy variables for GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDEROG ;
62874     +drop GRP_INDEROG3 ;
MPRINT(EM_DIAGRAM):   drop GRP_INDEROG3 ;
62875     +if missing( GRP_INDEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDEROG ) then do;
62876     +   GRP_INDEROG3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDEROG3 = .;
62877     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
62878     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
62879     +end;
MPRINT(EM_DIAGRAM):   end;
62880     +else do;
MPRINT(EM_DIAGRAM):   else do;
62881     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
62882     +   _dm12 = put( GRP_INDEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDEROG , BEST12. );
62883     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
62884     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
62885     +      GRP_INDEROG3 = -1;
MPRINT(EM_DIAGRAM):   GRP_INDEROG3 = -1;
62886     +   end;
MPRINT(EM_DIAGRAM):   end;
62887     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
62888     +      GRP_INDEROG3 = 1;
MPRINT(EM_DIAGRAM):   GRP_INDEROG3 = 1;
62889     +   end;
MPRINT(EM_DIAGRAM):   end;
62890     +   else do;
MPRINT(EM_DIAGRAM):   else do;
62891     +      GRP_INDEROG3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDEROG3 = .;
62892     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
62893     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
62894     +   end;
MPRINT(EM_DIAGRAM):   end;
62895     +end;
MPRINT(EM_DIAGRAM):   end;
62896     +
62897     +*** Generate dummy variables for GRP_JOB ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_JOB ;
62898     +drop GRP_JOB1 GRP_JOB2 GRP_JOB3 GRP_JOB4 GRP_JOB5 GRP_JOB6 ;
MPRINT(EM_DIAGRAM):   drop GRP_JOB1 GRP_JOB2 GRP_JOB3 GRP_JOB4 GRP_JOB5 GRP_JOB6 ;
62899     +if missing( GRP_JOB ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_JOB ) then do;
62900     +   GRP_JOB1 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = .;
62901     +   GRP_JOB2 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = .;
62902     +   GRP_JOB3 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = .;
62903     +   GRP_JOB4 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = .;
62904     +   GRP_JOB5 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = .;
62905     +   GRP_JOB6 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = .;
62906     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
62907     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
62908     +end;
MPRINT(EM_DIAGRAM):   end;
62909     +else do;
MPRINT(EM_DIAGRAM):   else do;
62910     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
62911     +   _dm12 = put( GRP_JOB , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_JOB , BEST12. );
62912     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
62913     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
62914     +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
62915     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
62916     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
62917     +            GRP_JOB1 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = -0.46770717334674;
62918     +            GRP_JOB2 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = -0.46770717334674;
62919     +            GRP_JOB3 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = -0.46770717334674;
62920     +            GRP_JOB4 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = -0.46770717334674;
62921     +            GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
62922     +            GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
62923     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
62924     +         end;
MPRINT(EM_DIAGRAM):   end;
62925     +         else do;
MPRINT(EM_DIAGRAM):   else do;
62926     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
62927     +               GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
62928     +               GRP_JOB2 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = -0.46770717334674;
62929     +               GRP_JOB3 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = -0.46770717334674;
62930     +               GRP_JOB4 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = -0.46770717334674;
62931     +               GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
62932     +               GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
62933     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
62934     +            end;
MPRINT(EM_DIAGRAM):   end;
62935     +         end;
MPRINT(EM_DIAGRAM):   end;
62936     +      end;
MPRINT(EM_DIAGRAM):   end;
62937     +      else do;
MPRINT(EM_DIAGRAM):   else do;
62938     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
62939     +            GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
62940     +            GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
62941     +            GRP_JOB3 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = -0.46770717334674;
62942     +            GRP_JOB4 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = -0.46770717334674;
62943     +            GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
62944     +            GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
62945     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
62946     +         end;
MPRINT(EM_DIAGRAM):   end;
62947     +         else do;
MPRINT(EM_DIAGRAM):   else do;
62948     +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
62949     +               GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
62950     +               GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
62951     +               GRP_JOB3 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = 0.46770717334674;
62952     +               GRP_JOB4 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = -0.46770717334674;
62953     +               GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
62954     +               GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
62955     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
62956     +            end;
MPRINT(EM_DIAGRAM):   end;
62957     +         end;
MPRINT(EM_DIAGRAM):   end;
62958     +      end;
MPRINT(EM_DIAGRAM):   end;
62959     +   end;
MPRINT(EM_DIAGRAM):   end;
62960     +   else do;
MPRINT(EM_DIAGRAM):   else do;
62961     +      if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
62962     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
62963     +            GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
62964     +            GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
62965     +            GRP_JOB3 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = 0.46770717334674;
62966     +            GRP_JOB4 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = 0.46770717334674;
62967     +            GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
62968     +            GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
62969     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
62970     +         end;
MPRINT(EM_DIAGRAM):   end;
62971     +         else do;
MPRINT(EM_DIAGRAM):   else do;
62972     +            if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
62973     +               GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
62974     +               GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
62975     +               GRP_JOB3 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = 0.46770717334674;
62976     +               GRP_JOB4 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = 0.46770717334674;
62977     +               GRP_JOB5 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = 0.46770717334674;
62978     +               GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
62979     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
62980     +            end;
MPRINT(EM_DIAGRAM):   end;
62981     +         end;
MPRINT(EM_DIAGRAM):   end;
62982     +      end;
MPRINT(EM_DIAGRAM):   end;
62983     +      else do;
MPRINT(EM_DIAGRAM):   else do;
62984     +         if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
62985     +            GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
62986     +            GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
62987     +            GRP_JOB3 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = 0.46770717334674;
62988     +            GRP_JOB4 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = 0.46770717334674;
62989     +            GRP_JOB5 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = 0.46770717334674;
62990     +            GRP_JOB6 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = 0.46770717334674;
62991     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
62992     +         end;
MPRINT(EM_DIAGRAM):   end;
62993     +      end;
MPRINT(EM_DIAGRAM):   end;
62994     +   end;
MPRINT(EM_DIAGRAM):   end;
62995     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
62996     +      GRP_JOB1 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = .;
62997     +      GRP_JOB2 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = .;
62998     +      GRP_JOB3 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = .;
62999     +      GRP_JOB4 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = .;
63000     +      GRP_JOB5 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = .;
63001     +      GRP_JOB6 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = .;
63002     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63003     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63004     +   end;
MPRINT(EM_DIAGRAM):   end;
63005     +end;
MPRINT(EM_DIAGRAM):   end;
63006     +
63007     +*** Generate dummy variables for GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLAGE ;
63008     +drop GRP_LOG_CLAGE1 GRP_LOG_CLAGE2 GRP_LOG_CLAGE3 GRP_LOG_CLAGE4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_CLAGE1 GRP_LOG_CLAGE2 GRP_LOG_CLAGE3 GRP_LOG_CLAGE4 ;
63009     +if missing( GRP_LOG_CLAGE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLAGE ) then do;
63010     +   GRP_LOG_CLAGE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = .;
63011     +   GRP_LOG_CLAGE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = .;
63012     +   GRP_LOG_CLAGE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = .;
63013     +   GRP_LOG_CLAGE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = .;
63014     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63015     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63016     +end;
MPRINT(EM_DIAGRAM):   end;
63017     +else do;
MPRINT(EM_DIAGRAM):   else do;
63018     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63019     +   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
63020     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63021     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
63022     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
63023     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
63024     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
63025     +            GRP_LOG_CLAGE1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = -0.55901699437494;
63026     +            GRP_LOG_CLAGE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = -0.55901699437494;
63027     +            GRP_LOG_CLAGE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = -0.55901699437494;
63028     +            GRP_LOG_CLAGE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = -0.55901699437494;
63029     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63030     +         end;
MPRINT(EM_DIAGRAM):   end;
63031     +         else do;
MPRINT(EM_DIAGRAM):   else do;
63032     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
63033     +               GRP_LOG_CLAGE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = 0.55901699437494;
63034     +               GRP_LOG_CLAGE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = -0.55901699437494;
63035     +               GRP_LOG_CLAGE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = -0.55901699437494;
63036     +               GRP_LOG_CLAGE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = -0.55901699437494;
63037     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63038     +            end;
MPRINT(EM_DIAGRAM):   end;
63039     +         end;
MPRINT(EM_DIAGRAM):   end;
63040     +      end;
MPRINT(EM_DIAGRAM):   end;
63041     +      else do;
MPRINT(EM_DIAGRAM):   else do;
63042     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
63043     +            GRP_LOG_CLAGE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = 0.55901699437494;
63044     +            GRP_LOG_CLAGE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = 0.55901699437494;
63045     +            GRP_LOG_CLAGE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = -0.55901699437494;
63046     +            GRP_LOG_CLAGE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = -0.55901699437494;
63047     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63048     +         end;
MPRINT(EM_DIAGRAM):   end;
63049     +      end;
MPRINT(EM_DIAGRAM):   end;
63050     +   end;
MPRINT(EM_DIAGRAM):   end;
63051     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63052     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
63053     +         GRP_LOG_CLAGE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = 0.55901699437494;
63054     +         GRP_LOG_CLAGE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = 0.55901699437494;
63055     +         GRP_LOG_CLAGE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = 0.55901699437494;
63056     +         GRP_LOG_CLAGE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = -0.55901699437494;
63057     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63058     +      end;
MPRINT(EM_DIAGRAM):   end;
63059     +      else do;
MPRINT(EM_DIAGRAM):   else do;
63060     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
63061     +            GRP_LOG_CLAGE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = 0.55901699437494;
63062     +            GRP_LOG_CLAGE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = 0.55901699437494;
63063     +            GRP_LOG_CLAGE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = 0.55901699437494;
63064     +            GRP_LOG_CLAGE4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = 0.55901699437494;
63065     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63066     +         end;
MPRINT(EM_DIAGRAM):   end;
63067     +      end;
MPRINT(EM_DIAGRAM):   end;
63068     +   end;
MPRINT(EM_DIAGRAM):   end;
63069     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
63070     +      GRP_LOG_CLAGE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = .;
63071     +      GRP_LOG_CLAGE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = .;
63072     +      GRP_LOG_CLAGE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = .;
63073     +      GRP_LOG_CLAGE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = .;
63074     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63075     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63076     +   end;
MPRINT(EM_DIAGRAM):   end;
63077     +end;
MPRINT(EM_DIAGRAM):   end;
63078     +
63079     +*** Generate dummy variables for GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLNO ;
63080     +drop GRP_LOG_CLNO1 GRP_LOG_CLNO2 GRP_LOG_CLNO3 GRP_LOG_CLNO4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_CLNO1 GRP_LOG_CLNO2 GRP_LOG_CLNO3 GRP_LOG_CLNO4 ;
63081     +if missing( GRP_LOG_CLNO ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLNO ) then do;
63082     +   GRP_LOG_CLNO1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = .;
63083     +   GRP_LOG_CLNO2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = .;
63084     +   GRP_LOG_CLNO3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = .;
63085     +   GRP_LOG_CLNO4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = .;
63086     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63087     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63088     +end;
MPRINT(EM_DIAGRAM):   end;
63089     +else do;
MPRINT(EM_DIAGRAM):   else do;
63090     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63091     +   _dm12 = put( GRP_LOG_CLNO , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLNO , BEST12. );
63092     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63093     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
63094     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
63095     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
63096     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
63097     +            GRP_LOG_CLNO1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = -0.55901699437494;
63098     +            GRP_LOG_CLNO2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = -0.55901699437494;
63099     +            GRP_LOG_CLNO3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = -0.55901699437494;
63100     +            GRP_LOG_CLNO4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = -0.55901699437494;
63101     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63102     +         end;
MPRINT(EM_DIAGRAM):   end;
63103     +         else do;
MPRINT(EM_DIAGRAM):   else do;
63104     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
63105     +               GRP_LOG_CLNO1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = 0.55901699437494;
63106     +               GRP_LOG_CLNO2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = -0.55901699437494;
63107     +               GRP_LOG_CLNO3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = -0.55901699437494;
63108     +               GRP_LOG_CLNO4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = -0.55901699437494;
63109     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63110     +            end;
MPRINT(EM_DIAGRAM):   end;
63111     +         end;
MPRINT(EM_DIAGRAM):   end;
63112     +      end;
MPRINT(EM_DIAGRAM):   end;
63113     +      else do;
MPRINT(EM_DIAGRAM):   else do;
63114     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
63115     +            GRP_LOG_CLNO1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = 0.55901699437494;
63116     +            GRP_LOG_CLNO2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = 0.55901699437494;
63117     +            GRP_LOG_CLNO3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = -0.55901699437494;
63118     +            GRP_LOG_CLNO4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = -0.55901699437494;
63119     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63120     +         end;
MPRINT(EM_DIAGRAM):   end;
63121     +      end;
MPRINT(EM_DIAGRAM):   end;
63122     +   end;
MPRINT(EM_DIAGRAM):   end;
63123     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63124     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
63125     +         GRP_LOG_CLNO1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = 0.55901699437494;
63126     +         GRP_LOG_CLNO2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = 0.55901699437494;
63127     +         GRP_LOG_CLNO3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = 0.55901699437494;
63128     +         GRP_LOG_CLNO4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = -0.55901699437494;
63129     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63130     +      end;
MPRINT(EM_DIAGRAM):   end;
63131     +      else do;
MPRINT(EM_DIAGRAM):   else do;
63132     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
63133     +            GRP_LOG_CLNO1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = 0.55901699437494;
63134     +            GRP_LOG_CLNO2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = 0.55901699437494;
63135     +            GRP_LOG_CLNO3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = 0.55901699437494;
63136     +            GRP_LOG_CLNO4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = 0.55901699437494;
63137     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63138     +         end;
MPRINT(EM_DIAGRAM):   end;
63139     +      end;
MPRINT(EM_DIAGRAM):   end;
63140     +   end;
MPRINT(EM_DIAGRAM):   end;
63141     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
63142     +      GRP_LOG_CLNO1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = .;
63143     +      GRP_LOG_CLNO2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = .;
63144     +      GRP_LOG_CLNO3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = .;
63145     +      GRP_LOG_CLNO4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = .;
63146     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63147     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63148     +   end;
MPRINT(EM_DIAGRAM):   end;
63149     +end;
MPRINT(EM_DIAGRAM):   end;
63150     +
63151     +*** Generate dummy variables for GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEBTINC ;
63152     +drop GRP_LOG_DEBTINC1 GRP_LOG_DEBTINC2 GRP_LOG_DEBTINC3 GRP_LOG_DEBTINC4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_DEBTINC1 GRP_LOG_DEBTINC2 GRP_LOG_DEBTINC3 GRP_LOG_DEBTINC4
;
63153     +if missing( GRP_LOG_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEBTINC ) then do;
63154     +   GRP_LOG_DEBTINC1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = .;
63155     +   GRP_LOG_DEBTINC2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = .;
63156     +   GRP_LOG_DEBTINC3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = .;
63157     +   GRP_LOG_DEBTINC4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = .;
63158     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63159     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63160     +end;
MPRINT(EM_DIAGRAM):   end;
63161     +else do;
MPRINT(EM_DIAGRAM):   else do;
63162     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63163     +   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
63164     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63165     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
63166     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
63167     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
63168     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
63169     +            GRP_LOG_DEBTINC1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = -0.55901699437494;
63170     +            GRP_LOG_DEBTINC2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = -0.55901699437494;
63171     +            GRP_LOG_DEBTINC3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = -0.55901699437494;
63172     +            GRP_LOG_DEBTINC4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = -0.55901699437494;
63173     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63174     +         end;
MPRINT(EM_DIAGRAM):   end;
63175     +         else do;
MPRINT(EM_DIAGRAM):   else do;
63176     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
63177     +               GRP_LOG_DEBTINC1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = 0.55901699437494;
63178     +               GRP_LOG_DEBTINC2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = -0.55901699437494;
63179     +               GRP_LOG_DEBTINC3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = -0.55901699437494;
63180     +               GRP_LOG_DEBTINC4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = -0.55901699437494;
63181     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63182     +            end;
MPRINT(EM_DIAGRAM):   end;
63183     +         end;
MPRINT(EM_DIAGRAM):   end;
63184     +      end;
MPRINT(EM_DIAGRAM):   end;
63185     +      else do;
MPRINT(EM_DIAGRAM):   else do;
63186     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
63187     +            GRP_LOG_DEBTINC1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = 0.55901699437494;
63188     +            GRP_LOG_DEBTINC2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = 0.55901699437494;
63189     +            GRP_LOG_DEBTINC3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = -0.55901699437494;
63190     +            GRP_LOG_DEBTINC4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = -0.55901699437494;
63191     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63192     +         end;
MPRINT(EM_DIAGRAM):   end;
63193     +      end;
MPRINT(EM_DIAGRAM):   end;
63194     +   end;
MPRINT(EM_DIAGRAM):   end;
63195     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63196     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
63197     +         GRP_LOG_DEBTINC1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = 0.55901699437494;
63198     +         GRP_LOG_DEBTINC2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = 0.55901699437494;
63199     +         GRP_LOG_DEBTINC3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = 0.55901699437494;
63200     +         GRP_LOG_DEBTINC4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = -0.55901699437494;
63201     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63202     +      end;
MPRINT(EM_DIAGRAM):   end;
63203     +      else do;
MPRINT(EM_DIAGRAM):   else do;
63204     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
63205     +            GRP_LOG_DEBTINC1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = 0.55901699437494;
63206     +            GRP_LOG_DEBTINC2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = 0.55901699437494;
63207     +            GRP_LOG_DEBTINC3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = 0.55901699437494;
63208     +            GRP_LOG_DEBTINC4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = 0.55901699437494;
63209     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63210     +         end;
MPRINT(EM_DIAGRAM):   end;
63211     +      end;
MPRINT(EM_DIAGRAM):   end;
63212     +   end;
MPRINT(EM_DIAGRAM):   end;
63213     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
63214     +      GRP_LOG_DEBTINC1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = .;
63215     +      GRP_LOG_DEBTINC2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = .;
63216     +      GRP_LOG_DEBTINC3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = .;
63217     +      GRP_LOG_DEBTINC4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = .;
63218     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63219     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63220     +   end;
MPRINT(EM_DIAGRAM):   end;
63221     +end;
MPRINT(EM_DIAGRAM):   end;
63222     +
63223     +*** Generate dummy variables for GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DELINQ ;
63224     +drop GRP_LOG_DELINQ1 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_DELINQ1 ;
63225     +if missing( GRP_LOG_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DELINQ ) then do;
63226     +   GRP_LOG_DELINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ1 = .;
63227     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63228     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63229     +end;
MPRINT(EM_DIAGRAM):   end;
63230     +else do;
MPRINT(EM_DIAGRAM):   else do;
63231     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63232     +   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
63233     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63234     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
63235     +      GRP_LOG_DELINQ1 = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ1 = 1;
63236     +   end;
MPRINT(EM_DIAGRAM):   end;
63237     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
63238     +      GRP_LOG_DELINQ1 = -1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ1 = -1;
63239     +   end;
MPRINT(EM_DIAGRAM):   end;
63240     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63241     +      GRP_LOG_DELINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ1 = .;
63242     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63243     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63244     +   end;
MPRINT(EM_DIAGRAM):   end;
63245     +end;
MPRINT(EM_DIAGRAM):   end;
63246     +
63247     +*** Generate dummy variables for GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEROG ;
63248     +drop GRP_LOG_DEROG1 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_DEROG1 ;
63249     +if missing( GRP_LOG_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEROG ) then do;
63250     +   GRP_LOG_DEROG1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG1 = .;
63251     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63252     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63253     +end;
MPRINT(EM_DIAGRAM):   end;
63254     +else do;
MPRINT(EM_DIAGRAM):   else do;
63255     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63256     +   _dm12 = put( GRP_LOG_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEROG , BEST12. );
63257     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63258     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
63259     +      GRP_LOG_DEROG1 = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG1 = 1;
63260     +   end;
MPRINT(EM_DIAGRAM):   end;
63261     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
63262     +      GRP_LOG_DEROG1 = -1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG1 = -1;
63263     +   end;
MPRINT(EM_DIAGRAM):   end;
63264     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63265     +      GRP_LOG_DEROG1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG1 = .;
63266     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63267     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63268     +   end;
MPRINT(EM_DIAGRAM):   end;
63269     +end;
MPRINT(EM_DIAGRAM):   end;
63270     +
63271     +*** Generate dummy variables for GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_LOAN ;
63272     +drop GRP_LOG_LOAN2 GRP_LOG_LOAN3 GRP_LOG_LOAN4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_LOAN2 GRP_LOG_LOAN3 GRP_LOG_LOAN4 ;
63273     +if missing( GRP_LOG_LOAN ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_LOAN ) then do;
63274     +   GRP_LOG_LOAN2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = .;
63275     +   GRP_LOG_LOAN3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = .;
63276     +   GRP_LOG_LOAN4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = .;
63277     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63278     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63279     +end;
MPRINT(EM_DIAGRAM):   end;
63280     +else do;
MPRINT(EM_DIAGRAM):   else do;
63281     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63282     +   _dm12 = put( GRP_LOG_LOAN , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_LOAN , BEST12. );
63283     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63284     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
63285     +      GRP_LOG_LOAN2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = 0.63245553203367;
63286     +      GRP_LOG_LOAN3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = -0.63245553203367;
63287     +      GRP_LOG_LOAN4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = -0.63245553203367;
63288     +   end;
MPRINT(EM_DIAGRAM):   end;
63289     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
63290     +      GRP_LOG_LOAN2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = 0.63245553203367;
63291     +      GRP_LOG_LOAN3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = 0.63245553203367;
63292     +      GRP_LOG_LOAN4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = 0.63245553203367;
63293     +   end;
MPRINT(EM_DIAGRAM):   end;
63294     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
63295     +      GRP_LOG_LOAN2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = -0.63245553203367;
63296     +      GRP_LOG_LOAN3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = -0.63245553203367;
63297     +      GRP_LOG_LOAN4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = -0.63245553203367;
63298     +   end;
MPRINT(EM_DIAGRAM):   end;
63299     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
63300     +      GRP_LOG_LOAN2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = 0.63245553203367;
63301     +      GRP_LOG_LOAN3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = 0.63245553203367;
63302     +      GRP_LOG_LOAN4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = -0.63245553203367;
63303     +   end;
MPRINT(EM_DIAGRAM):   end;
63304     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63305     +      GRP_LOG_LOAN2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = .;
63306     +      GRP_LOG_LOAN3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = .;
63307     +      GRP_LOG_LOAN4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = .;
63308     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63309     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63310     +   end;
MPRINT(EM_DIAGRAM):   end;
63311     +end;
MPRINT(EM_DIAGRAM):   end;
63312     +
63313     +*** Generate dummy variables for GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_MORTDUE ;
63314     +drop GRP_LOG_MORTDUE1 GRP_LOG_MORTDUE2 GRP_LOG_MORTDUE3 GRP_LOG_MORTDUE4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_MORTDUE1 GRP_LOG_MORTDUE2 GRP_LOG_MORTDUE3 GRP_LOG_MORTDUE4
;
63315     +if missing( GRP_LOG_MORTDUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_MORTDUE ) then do;
63316     +   GRP_LOG_MORTDUE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = .;
63317     +   GRP_LOG_MORTDUE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = .;
63318     +   GRP_LOG_MORTDUE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = .;
63319     +   GRP_LOG_MORTDUE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = .;
63320     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63321     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63322     +end;
MPRINT(EM_DIAGRAM):   end;
63323     +else do;
MPRINT(EM_DIAGRAM):   else do;
63324     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63325     +   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
63326     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63327     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
63328     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
63329     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
63330     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
63331     +            GRP_LOG_MORTDUE1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = -0.55901699437494;
63332     +            GRP_LOG_MORTDUE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = -0.55901699437494;
63333     +            GRP_LOG_MORTDUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = -0.55901699437494;
63334     +            GRP_LOG_MORTDUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = -0.55901699437494;
63335     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63336     +         end;
MPRINT(EM_DIAGRAM):   end;
63337     +         else do;
MPRINT(EM_DIAGRAM):   else do;
63338     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
63339     +               GRP_LOG_MORTDUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = 0.55901699437494;
63340     +               GRP_LOG_MORTDUE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = -0.55901699437494;
63341     +               GRP_LOG_MORTDUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = -0.55901699437494;
63342     +               GRP_LOG_MORTDUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = -0.55901699437494;
63343     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63344     +            end;
MPRINT(EM_DIAGRAM):   end;
63345     +         end;
MPRINT(EM_DIAGRAM):   end;
63346     +      end;
MPRINT(EM_DIAGRAM):   end;
63347     +      else do;
MPRINT(EM_DIAGRAM):   else do;
63348     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
63349     +            GRP_LOG_MORTDUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = 0.55901699437494;
63350     +            GRP_LOG_MORTDUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = 0.55901699437494;
63351     +            GRP_LOG_MORTDUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = -0.55901699437494;
63352     +            GRP_LOG_MORTDUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = -0.55901699437494;
63353     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63354     +         end;
MPRINT(EM_DIAGRAM):   end;
63355     +      end;
MPRINT(EM_DIAGRAM):   end;
63356     +   end;
MPRINT(EM_DIAGRAM):   end;
63357     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63358     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
63359     +         GRP_LOG_MORTDUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = 0.55901699437494;
63360     +         GRP_LOG_MORTDUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = 0.55901699437494;
63361     +         GRP_LOG_MORTDUE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = 0.55901699437494;
63362     +         GRP_LOG_MORTDUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = -0.55901699437494;
63363     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63364     +      end;
MPRINT(EM_DIAGRAM):   end;
63365     +      else do;
MPRINT(EM_DIAGRAM):   else do;
63366     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
63367     +            GRP_LOG_MORTDUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = 0.55901699437494;
63368     +            GRP_LOG_MORTDUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = 0.55901699437494;
63369     +            GRP_LOG_MORTDUE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = 0.55901699437494;
63370     +            GRP_LOG_MORTDUE4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = 0.55901699437494;
63371     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63372     +         end;
MPRINT(EM_DIAGRAM):   end;
63373     +      end;
MPRINT(EM_DIAGRAM):   end;
63374     +   end;
MPRINT(EM_DIAGRAM):   end;
63375     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
63376     +      GRP_LOG_MORTDUE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = .;
63377     +      GRP_LOG_MORTDUE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = .;
63378     +      GRP_LOG_MORTDUE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = .;
63379     +      GRP_LOG_MORTDUE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = .;
63380     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63381     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63382     +   end;
MPRINT(EM_DIAGRAM):   end;
63383     +end;
MPRINT(EM_DIAGRAM):   end;
63384     +
63385     +*** Generate dummy variables for GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_VALUE ;
63386     +drop GRP_LOG_VALUE1 GRP_LOG_VALUE2 GRP_LOG_VALUE3 GRP_LOG_VALUE4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_VALUE1 GRP_LOG_VALUE2 GRP_LOG_VALUE3 GRP_LOG_VALUE4 ;
63387     +if missing( GRP_LOG_VALUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_VALUE ) then do;
63388     +   GRP_LOG_VALUE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = .;
63389     +   GRP_LOG_VALUE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = .;
63390     +   GRP_LOG_VALUE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = .;
63391     +   GRP_LOG_VALUE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = .;
63392     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63393     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63394     +end;
MPRINT(EM_DIAGRAM):   end;
63395     +else do;
MPRINT(EM_DIAGRAM):   else do;
63396     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63397     +   _dm12 = put( GRP_LOG_VALUE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_VALUE , BEST12. );
63398     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63399     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
63400     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
63401     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
63402     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
63403     +            GRP_LOG_VALUE1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = -0.55901699437494;
63404     +            GRP_LOG_VALUE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = -0.55901699437494;
63405     +            GRP_LOG_VALUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = -0.55901699437494;
63406     +            GRP_LOG_VALUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = -0.55901699437494;
63407     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63408     +         end;
MPRINT(EM_DIAGRAM):   end;
63409     +         else do;
MPRINT(EM_DIAGRAM):   else do;
63410     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
63411     +               GRP_LOG_VALUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = 0.55901699437494;
63412     +               GRP_LOG_VALUE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = -0.55901699437494;
63413     +               GRP_LOG_VALUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = -0.55901699437494;
63414     +               GRP_LOG_VALUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = -0.55901699437494;
63415     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63416     +            end;
MPRINT(EM_DIAGRAM):   end;
63417     +         end;
MPRINT(EM_DIAGRAM):   end;
63418     +      end;
MPRINT(EM_DIAGRAM):   end;
63419     +      else do;
MPRINT(EM_DIAGRAM):   else do;
63420     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
63421     +            GRP_LOG_VALUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = 0.55901699437494;
63422     +            GRP_LOG_VALUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = 0.55901699437494;
63423     +            GRP_LOG_VALUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = -0.55901699437494;
63424     +            GRP_LOG_VALUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = -0.55901699437494;
63425     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63426     +         end;
MPRINT(EM_DIAGRAM):   end;
63427     +      end;
MPRINT(EM_DIAGRAM):   end;
63428     +   end;
MPRINT(EM_DIAGRAM):   end;
63429     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63430     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
63431     +         GRP_LOG_VALUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = 0.55901699437494;
63432     +         GRP_LOG_VALUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = 0.55901699437494;
63433     +         GRP_LOG_VALUE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = 0.55901699437494;
63434     +         GRP_LOG_VALUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = -0.55901699437494;
63435     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63436     +      end;
MPRINT(EM_DIAGRAM):   end;
63437     +      else do;
MPRINT(EM_DIAGRAM):   else do;
63438     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
63439     +            GRP_LOG_VALUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = 0.55901699437494;
63440     +            GRP_LOG_VALUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = 0.55901699437494;
63441     +            GRP_LOG_VALUE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = 0.55901699437494;
63442     +            GRP_LOG_VALUE4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = 0.55901699437494;
63443     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63444     +         end;
MPRINT(EM_DIAGRAM):   end;
63445     +      end;
MPRINT(EM_DIAGRAM):   end;
63446     +   end;
MPRINT(EM_DIAGRAM):   end;
63447     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
63448     +      GRP_LOG_VALUE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = .;
63449     +      GRP_LOG_VALUE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = .;
63450     +      GRP_LOG_VALUE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = .;
63451     +      GRP_LOG_VALUE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = .;
63452     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63453     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63454     +   end;
MPRINT(EM_DIAGRAM):   end;
63455     +end;
MPRINT(EM_DIAGRAM):   end;
63456     +
63457     +*** Generate dummy variables for GRP_LOG_YOJ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_YOJ ;
63458     +drop GRP_LOG_YOJ1 GRP_LOG_YOJ2 GRP_LOG_YOJ3 GRP_LOG_YOJ4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_YOJ1 GRP_LOG_YOJ2 GRP_LOG_YOJ3 GRP_LOG_YOJ4 ;
63459     +if missing( GRP_LOG_YOJ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_YOJ ) then do;
63460     +   GRP_LOG_YOJ1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = .;
63461     +   GRP_LOG_YOJ2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = .;
63462     +   GRP_LOG_YOJ3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = .;
63463     +   GRP_LOG_YOJ4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = .;
63464     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63465     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63466     +end;
MPRINT(EM_DIAGRAM):   end;
63467     +else do;
MPRINT(EM_DIAGRAM):   else do;
63468     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63469     +   _dm12 = put( GRP_LOG_YOJ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_YOJ , BEST12. );
63470     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63471     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
63472     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
63473     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
63474     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
63475     +            GRP_LOG_YOJ1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = -0.55901699437494;
63476     +            GRP_LOG_YOJ2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = -0.55901699437494;
63477     +            GRP_LOG_YOJ3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = -0.55901699437494;
63478     +            GRP_LOG_YOJ4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = -0.55901699437494;
63479     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63480     +         end;
MPRINT(EM_DIAGRAM):   end;
63481     +         else do;
MPRINT(EM_DIAGRAM):   else do;
63482     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
63483     +               GRP_LOG_YOJ1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = 0.55901699437494;
63484     +               GRP_LOG_YOJ2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = -0.55901699437494;
63485     +               GRP_LOG_YOJ3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = -0.55901699437494;
63486     +               GRP_LOG_YOJ4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = -0.55901699437494;
63487     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63488     +            end;
MPRINT(EM_DIAGRAM):   end;
63489     +         end;
MPRINT(EM_DIAGRAM):   end;
63490     +      end;
MPRINT(EM_DIAGRAM):   end;
63491     +      else do;
MPRINT(EM_DIAGRAM):   else do;
63492     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
63493     +            GRP_LOG_YOJ1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = 0.55901699437494;
63494     +            GRP_LOG_YOJ2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = 0.55901699437494;
63495     +            GRP_LOG_YOJ3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = -0.55901699437494;
63496     +            GRP_LOG_YOJ4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = -0.55901699437494;
63497     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63498     +         end;
MPRINT(EM_DIAGRAM):   end;
63499     +      end;
MPRINT(EM_DIAGRAM):   end;
63500     +   end;
MPRINT(EM_DIAGRAM):   end;
63501     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63502     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
63503     +         GRP_LOG_YOJ1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = 0.55901699437494;
63504     +         GRP_LOG_YOJ2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = 0.55901699437494;
63505     +         GRP_LOG_YOJ3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = 0.55901699437494;
63506     +         GRP_LOG_YOJ4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = -0.55901699437494;
63507     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63508     +      end;
MPRINT(EM_DIAGRAM):   end;
63509     +      else do;
MPRINT(EM_DIAGRAM):   else do;
63510     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
63511     +            GRP_LOG_YOJ1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = 0.55901699437494;
63512     +            GRP_LOG_YOJ2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = 0.55901699437494;
63513     +            GRP_LOG_YOJ3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = 0.55901699437494;
63514     +            GRP_LOG_YOJ4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = 0.55901699437494;
63515     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63516     +         end;
MPRINT(EM_DIAGRAM):   end;
63517     +      end;
MPRINT(EM_DIAGRAM):   end;
63518     +   end;
MPRINT(EM_DIAGRAM):   end;
63519     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
63520     +      GRP_LOG_YOJ1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = .;
63521     +      GRP_LOG_YOJ2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = .;
63522     +      GRP_LOG_YOJ3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = .;
63523     +      GRP_LOG_YOJ4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = .;
63524     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63525     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63526     +   end;
MPRINT(EM_DIAGRAM):   end;
63527     +end;
MPRINT(EM_DIAGRAM):   end;
63528     +
63529     +*** Generate dummy variables for GRP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NINQ ;
63530     +drop GRP_NINQ1 GRP_NINQ2 GRP_NINQ3 ;
MPRINT(EM_DIAGRAM):   drop GRP_NINQ1 GRP_NINQ2 GRP_NINQ3 ;
63531     +if missing( GRP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NINQ ) then do;
63532     +   GRP_NINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = .;
63533     +   GRP_NINQ2 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = .;
63534     +   GRP_NINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = .;
63535     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63536     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63537     +end;
MPRINT(EM_DIAGRAM):   end;
63538     +else do;
MPRINT(EM_DIAGRAM):   else do;
63539     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63540     +   _dm12 = put( GRP_NINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NINQ , BEST12. );
63541     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63542     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
63543     +      GRP_NINQ1 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = -0.63245553203367;
63544     +      GRP_NINQ2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = -0.63245553203367;
63545     +      GRP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = -0.63245553203367;
63546     +   end;
MPRINT(EM_DIAGRAM):   end;
63547     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
63548     +      GRP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = 0.63245553203367;
63549     +      GRP_NINQ2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = -0.63245553203367;
63550     +      GRP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = -0.63245553203367;
63551     +   end;
MPRINT(EM_DIAGRAM):   end;
63552     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
63553     +      GRP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = 0.63245553203367;
63554     +      GRP_NINQ2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = 0.63245553203367;
63555     +      GRP_NINQ3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = 0.63245553203367;
63556     +   end;
MPRINT(EM_DIAGRAM):   end;
63557     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
63558     +      GRP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = 0.63245553203367;
63559     +      GRP_NINQ2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = 0.63245553203367;
63560     +      GRP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = -0.63245553203367;
63561     +   end;
MPRINT(EM_DIAGRAM):   end;
63562     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63563     +      GRP_NINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = .;
63564     +      GRP_NINQ2 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = .;
63565     +      GRP_NINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = .;
63566     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63567     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63568     +   end;
MPRINT(EM_DIAGRAM):   end;
63569     +end;
MPRINT(EM_DIAGRAM):   end;
63570     +
63571     +*** Generate dummy variables for GRP_REASON ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_REASON ;
63572     +drop GRP_REASON1 GRP_REASON2 ;
MPRINT(EM_DIAGRAM):   drop GRP_REASON1 GRP_REASON2 ;
63573     +if missing( GRP_REASON ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_REASON ) then do;
63574     +   GRP_REASON1 = .;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = .;
63575     +   GRP_REASON2 = .;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = .;
63576     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63577     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63578     +end;
MPRINT(EM_DIAGRAM):   end;
63579     +else do;
MPRINT(EM_DIAGRAM):   else do;
63580     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63581     +   _dm12 = put( GRP_REASON , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_REASON , BEST12. );
63582     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63583     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
63584     +      GRP_REASON1 = 0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = 0.75;
63585     +      GRP_REASON2 = -0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = -0.75;
63586     +   end;
MPRINT(EM_DIAGRAM):   end;
63587     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
63588     +      GRP_REASON1 = 0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = 0.75;
63589     +      GRP_REASON2 = 0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = 0.75;
63590     +   end;
MPRINT(EM_DIAGRAM):   end;
63591     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
63592     +      GRP_REASON1 = -0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = -0.75;
63593     +      GRP_REASON2 = -0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = -0.75;
63594     +   end;
MPRINT(EM_DIAGRAM):   end;
63595     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63596     +      GRP_REASON1 = .;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = .;
63597     +      GRP_REASON2 = .;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = .;
63598     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63599     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63600     +   end;
MPRINT(EM_DIAGRAM):   end;
63601     +end;
MPRINT(EM_DIAGRAM):   end;
63602     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
63603     +*** Writing the Node ord ;
MPRINT(EM_DIAGRAM):   *** Writing the Node ord ;
63604     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
63605     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
63606     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
63607     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
63608     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
63609     +   H11  =  9.9999999600419E-11 * GRP_INDELINQ3  +  1.0000000133514E-10 *
63610     +        GRP_INDEROG3  +   1.000000000341E-10 * GRP_JOB1
63611     +          +     0.05008717989805 * GRP_JOB2  +     0.08023042969491 * GRP_JOB3
63612     +          +   1.000000000341E-10 * GRP_JOB4  +  9.9999999600419E-11 * GRP_JOB5
63613     +          +      0.1850031165278 * GRP_JOB6  +      0.0236044559772 *
63614     +        GRP_LOG_CLAGE1  +     0.18353369591421 * GRP_LOG_CLAGE2
63615     +          +     0.04452662957432 * GRP_LOG_CLAGE3  +     0.17795522482642 *
63616     +        GRP_LOG_CLAGE4  +     0.13453214051882 * GRP_LOG_CLNO1
63617     +          +   9.999999992568E-11 * GRP_LOG_CLNO2  +   1.000000000341E-10 *
63618     +        GRP_LOG_CLNO3  +   1.000000000341E-10 * GRP_LOG_CLNO4
63619     +          +     1.21265583748325 * GRP_LOG_DEBTINC1  +     0.15112909156485 *
63620     +        GRP_LOG_DEBTINC2  +   1.000000000341E-10 * GRP_LOG_DEBTINC3
63621     +          +     0.17873684560066 * GRP_LOG_DEBTINC4  +  1.0000000133514E-10 *
63622     +        GRP_LOG_DELINQ1  +     0.01539244480238 * GRP_LOG_DEROG1
63623     +          +     0.08868945875758 * GRP_LOG_LOAN2  +     0.06961668106695 *
63624     +        GRP_LOG_LOAN3  +     0.07046851132703 * GRP_LOG_LOAN4
63625     +          +  1.0000000133514E-10 * GRP_LOG_MORTDUE1  +  9.9999999600419E-11 *
63626     +        GRP_LOG_MORTDUE2  +   1.000000000341E-10 * GRP_LOG_MORTDUE3
63627     +          +  9.9999999600419E-11 * GRP_LOG_MORTDUE4  +     0.56263103121987 *
63628     +        GRP_LOG_VALUE1  +     0.16292857947328 * GRP_LOG_VALUE2
63629     +          +   1.000000000341E-10 * GRP_LOG_VALUE3  +  9.9999999600419E-11 *
63630     +        GRP_LOG_VALUE4  +  9.9999999600419E-11 * GRP_LOG_YOJ1
63631     +          +   1.000000000341E-10 * GRP_LOG_YOJ2  +   1.000000000341E-10 *
63632     +        GRP_LOG_YOJ3  +  1.0000000014252E-10 * GRP_LOG_YOJ4
63633     +          +  9.9999994396249E-11 * GRP_NINQ1  +  1.0000000025094E-10 *
63634     +        GRP_NINQ2  +     0.00148397298285 * GRP_NINQ3
63635     +          +     0.00024098412364 * GRP_REASON1  +     0.12246745134608 *
63636     +        GRP_REASON2 ;
MPRINT(EM_DIAGRAM):   H11 = 9.9999999600419E-11 * GRP_INDELINQ3 + 1.0000000133514E-10 *
GRP_INDEROG3 + 1.000000000341E-10 * GRP_JOB1 + 0.05008717989805 * GRP_JOB2 + 0.08023042969491
* GRP_JOB3 + 1.000000000341E-10 * GRP_JOB4 + 9.9999999600419E-11 * GRP_JOB5 + 0.1850031165278
* GRP_JOB6 + 0.0236044559772 * GRP_LOG_CLAGE1 + 0.18353369591421 * GRP_LOG_CLAGE2 +
0.04452662957432 * GRP_LOG_CLAGE3 + 0.17795522482642 * GRP_LOG_CLAGE4 + 0.13453214051882 *
GRP_LOG_CLNO1 + 9.999999992568E-11 * GRP_LOG_CLNO2 + 1.000000000341E-10 * GRP_LOG_CLNO3 +
1.000000000341E-10 * GRP_LOG_CLNO4 + 1.21265583748325 * GRP_LOG_DEBTINC1 + 0.15112909156485 *
GRP_LOG_DEBTINC2 + 1.000000000341E-10 * GRP_LOG_DEBTINC3 + 0.17873684560066 * GRP_LOG_DEBTINC4
+ 1.0000000133514E-10 * GRP_LOG_DELINQ1 + 0.01539244480238 * GRP_LOG_DEROG1 + 0.08868945875758
* GRP_LOG_LOAN2 + 0.06961668106695 * GRP_LOG_LOAN3 + 0.07046851132703 * GRP_LOG_LOAN4 +
1.0000000133514E-10 * GRP_LOG_MORTDUE1 + 9.9999999600419E-11 * GRP_LOG_MORTDUE2 +
1.000000000341E-10 * GRP_LOG_MORTDUE3 + 9.9999999600419E-11 * GRP_LOG_MORTDUE4 +
0.56263103121987 * GRP_LOG_VALUE1 + 0.16292857947328 * GRP_LOG_VALUE2 + 1.000000000341E-10 *
GRP_LOG_VALUE3 + 9.9999999600419E-11 * GRP_LOG_VALUE4 + 9.9999999600419E-11 * GRP_LOG_YOJ1 +
1.000000000341E-10 * GRP_LOG_YOJ2 + 1.000000000341E-10 * GRP_LOG_YOJ3 + 1.0000000014252E-10 *
GRP_LOG_YOJ4 + 9.9999994396249E-11 * GRP_NINQ1 + 1.0000000025094E-10 * GRP_NINQ2 +
0.00148397298285 * GRP_NINQ3 + 0.00024098412364 * GRP_REASON1 + 0.12246745134608 * GRP_REASON2
;
63637     +   H12  =     0.68984348905144 * GRP_INDELINQ3  +     0.45645864713083 *
63638     +        GRP_INDEROG3  +     0.38623080361566 * GRP_JOB1
63639     +          +   1.000000000341E-10 * GRP_JOB2  +  9.9999999600419E-11 * GRP_JOB3
63640     +          +     0.47476223931695 * GRP_JOB4  +     0.04143822312697 * GRP_JOB5
63641     +          +      0.0479561732778 * GRP_JOB6  +     0.13113144170919 *
63642     +        GRP_LOG_CLAGE1  +  1.0000000046778E-10 * GRP_LOG_CLAGE2
63643     +          +     0.00789278468195 * GRP_LOG_CLAGE3  +     0.00189921003957 *
63644     +        GRP_LOG_CLAGE4  +     0.14606928633448 * GRP_LOG_CLNO1
63645     +          +   1.000000000341E-10 * GRP_LOG_CLNO2  +     0.00607480435339 *
63646     +        GRP_LOG_CLNO3  +   1.000000000341E-10 * GRP_LOG_CLNO4
63647     +          +  9.9999999600419E-11 * GRP_LOG_DEBTINC1  +     0.12651297905145 *
63648     +        GRP_LOG_DEBTINC2  +     0.28836150522523 * GRP_LOG_DEBTINC3
63649     +          +     0.50134618658119 * GRP_LOG_DEBTINC4  +     0.28092464730212 *
63650     +        GRP_LOG_DELINQ1  +     0.57659304900786 * GRP_LOG_DEROG1
63651     +          +     0.23128310697574 * GRP_LOG_LOAN2  +     0.02567952367831 *
63652     +        GRP_LOG_LOAN3  +     0.04464000976882 * GRP_LOG_LOAN4
63653     +          +   1.000000000341E-10 * GRP_LOG_MORTDUE1  +     0.00018169062081 *
63654     +        GRP_LOG_MORTDUE2  +   1.000000000341E-10 * GRP_LOG_MORTDUE3
63655     +          +     0.24418316012477 * GRP_LOG_MORTDUE4  +   1.000000000341E-10 *
63656     +        GRP_LOG_VALUE1  +  1.0000000133514E-10 * GRP_LOG_VALUE2
63657     +          +  9.9999999600419E-11 * GRP_LOG_VALUE3  +     0.23833599903531 *
63658     +        GRP_LOG_VALUE4  +     0.16418753386424 * GRP_LOG_YOJ1
63659     +          +  9.9999999600419E-11 * GRP_LOG_YOJ2  +  9.9999999600419E-11 *
63660     +        GRP_LOG_YOJ3  +   9.999999997989E-11 * GRP_LOG_YOJ4
63661     +          +     0.20121728634519 * GRP_NINQ1  +      0.0824273831373 *
63662     +        GRP_NINQ2  +     0.43986255487106 * GRP_NINQ3
63663     +          +     0.01374331483548 * GRP_REASON1  +     0.35938352013272 *
63664     +        GRP_REASON2 ;
MPRINT(EM_DIAGRAM):   H12 = 0.68984348905144 * GRP_INDELINQ3 + 0.45645864713083 * GRP_INDEROG3
+ 0.38623080361566 * GRP_JOB1 + 1.000000000341E-10 * GRP_JOB2 + 9.9999999600419E-11 * GRP_JOB3
+ 0.47476223931695 * GRP_JOB4 + 0.04143822312697 * GRP_JOB5 + 0.0479561732778 * GRP_JOB6 +
0.13113144170919 * GRP_LOG_CLAGE1 + 1.0000000046778E-10 * GRP_LOG_CLAGE2 + 0.00789278468195 *
GRP_LOG_CLAGE3 + 0.00189921003957 * GRP_LOG_CLAGE4 + 0.14606928633448 * GRP_LOG_CLNO1 +
1.000000000341E-10 * GRP_LOG_CLNO2 + 0.00607480435339 * GRP_LOG_CLNO3 + 1.000000000341E-10 *
GRP_LOG_CLNO4 + 9.9999999600419E-11 * GRP_LOG_DEBTINC1 + 0.12651297905145 * GRP_LOG_DEBTINC2 +
0.28836150522523 * GRP_LOG_DEBTINC3 + 0.50134618658119 * GRP_LOG_DEBTINC4 + 0.28092464730212 *
GRP_LOG_DELINQ1 + 0.57659304900786 * GRP_LOG_DEROG1 + 0.23128310697574 * GRP_LOG_LOAN2 +
0.02567952367831 * GRP_LOG_LOAN3 + 0.04464000976882 * GRP_LOG_LOAN4 + 1.000000000341E-10 *
GRP_LOG_MORTDUE1 + 0.00018169062081 * GRP_LOG_MORTDUE2 + 1.000000000341E-10 * GRP_LOG_MORTDUE3
+ 0.24418316012477 * GRP_LOG_MORTDUE4 + 1.000000000341E-10 * GRP_LOG_VALUE1 +
1.0000000133514E-10 * GRP_LOG_VALUE2 + 9.9999999600419E-11 * GRP_LOG_VALUE3 + 0.23833599903531
* GRP_LOG_VALUE4 + 0.16418753386424 * GRP_LOG_YOJ1 + 9.9999999600419E-11 * GRP_LOG_YOJ2 +
9.9999999600419E-11 * GRP_LOG_YOJ3 + 9.999999997989E-11 * GRP_LOG_YOJ4 + 0.20121728634519 *
GRP_NINQ1 + 0.0824273831373 * GRP_NINQ2 + 0.43986255487106 * GRP_NINQ3 + 0.01374331483548 *
GRP_REASON1 + 0.35938352013272 * GRP_REASON2 ;
63665     +   H13  =  9.9999999600419E-11 * GRP_INDELINQ3  +  1.0000000133514E-10 *
63666     +        GRP_INDEROG3  +      0.0850787266472 * GRP_JOB1
63667     +          +     0.08697698049009 * GRP_JOB2  +     0.09487999844943 * GRP_JOB3
63668     +          +  1.0000000133514E-10 * GRP_JOB4  +   9.999999997989E-11 * GRP_JOB5
63669     +          +     0.09476311924983 * GRP_JOB6  +     0.09633628402877 *
63670     +        GRP_LOG_CLAGE1  +     0.40590180699987 * GRP_LOG_CLAGE2
63671     +          +     0.56243410114358 * GRP_LOG_CLAGE3  +     0.09813793418579 *
63672     +        GRP_LOG_CLAGE4  +     0.00214687772347 * GRP_LOG_CLNO1
63673     +          +     0.09363855516409 * GRP_LOG_CLNO2  +  9.9999999600419E-11 *
63674     +        GRP_LOG_CLNO3  +   1.000000000341E-10 * GRP_LOG_CLNO4
63675     +          +     0.43543098237579 * GRP_LOG_DEBTINC1  +     0.11593382607123 *
63676     +        GRP_LOG_DEBTINC2  +   1.000000000341E-10 * GRP_LOG_DEBTINC3
63677     +          +  9.9999999600419E-11 * GRP_LOG_DEBTINC4  +     0.21453998748928 *
63678     +        GRP_LOG_DELINQ1  +     0.13739316440012 * GRP_LOG_DEROG1
63679     +          +  9.9999999600419E-11 * GRP_LOG_LOAN2  +  1.0000000133514E-10 *
63680     +        GRP_LOG_LOAN3  +     0.09794806265167 * GRP_LOG_LOAN4
63681     +          +     0.17076415843403 * GRP_LOG_MORTDUE1  +     0.35923992103045 *
63682     +        GRP_LOG_MORTDUE2  +     0.06888684238484 * GRP_LOG_MORTDUE3
63683     +          +     0.19287015294738 * GRP_LOG_MORTDUE4  +     0.33179247749502 *
63684     +        GRP_LOG_VALUE1  +     0.17642957444055 * GRP_LOG_VALUE2
63685     +          +     0.09863773992669 * GRP_LOG_VALUE3  +  9.9999999993443E-11 *
63686     +        GRP_LOG_VALUE4  +  1.0000000133514E-10 * GRP_LOG_YOJ1
63687     +          +     0.13056368530899 * GRP_LOG_YOJ2  +     0.23263608717254 *
63688     +        GRP_LOG_YOJ3  +     0.05960527277735 * GRP_LOG_YOJ4
63689     +          +  9.9999999600419E-11 * GRP_NINQ1  +   1.000000000341E-10 *
63690     +        GRP_NINQ2  +     0.06885844227348 * GRP_NINQ3
63691     +          +     0.03011752807588 * GRP_REASON1  +     0.15223826213802 *
63692     +        GRP_REASON2 ;
MPRINT(EM_DIAGRAM):   H13 = 9.9999999600419E-11 * GRP_INDELINQ3 + 1.0000000133514E-10 *
GRP_INDEROG3 + 0.0850787266472 * GRP_JOB1 + 0.08697698049009 * GRP_JOB2 + 0.09487999844943 *
GRP_JOB3 + 1.0000000133514E-10 * GRP_JOB4 + 9.999999997989E-11 * GRP_JOB5 + 0.09476311924983 *
GRP_JOB6 + 0.09633628402877 * GRP_LOG_CLAGE1 + 0.40590180699987 * GRP_LOG_CLAGE2 +
0.56243410114358 * GRP_LOG_CLAGE3 + 0.09813793418579 * GRP_LOG_CLAGE4 + 0.00214687772347 *
GRP_LOG_CLNO1 + 0.09363855516409 * GRP_LOG_CLNO2 + 9.9999999600419E-11 * GRP_LOG_CLNO3 +
1.000000000341E-10 * GRP_LOG_CLNO4 + 0.43543098237579 * GRP_LOG_DEBTINC1 + 0.11593382607123 *
GRP_LOG_DEBTINC2 + 1.000000000341E-10 * GRP_LOG_DEBTINC3 + 9.9999999600419E-11 *
GRP_LOG_DEBTINC4 + 0.21453998748928 * GRP_LOG_DELINQ1 + 0.13739316440012 * GRP_LOG_DEROG1 +
9.9999999600419E-11 * GRP_LOG_LOAN2 + 1.0000000133514E-10 * GRP_LOG_LOAN3 + 0.09794806265167 *
GRP_LOG_LOAN4 + 0.17076415843403 * GRP_LOG_MORTDUE1 + 0.35923992103045 * GRP_LOG_MORTDUE2 +
0.06888684238484 * GRP_LOG_MORTDUE3 + 0.19287015294738 * GRP_LOG_MORTDUE4 + 0.33179247749502 *
GRP_LOG_VALUE1 + 0.17642957444055 * GRP_LOG_VALUE2 + 0.09863773992669 * GRP_LOG_VALUE3 +
9.9999999993443E-11 * GRP_LOG_VALUE4 + 1.0000000133514E-10 * GRP_LOG_YOJ1 + 0.13056368530899 *
GRP_LOG_YOJ2 + 0.23263608717254 * GRP_LOG_YOJ3 + 0.05960527277735 * GRP_LOG_YOJ4 +
9.9999999600419E-11 * GRP_NINQ1 + 1.000000000341E-10 * GRP_NINQ2 + 0.06885844227348 *
GRP_NINQ3 + 0.03011752807588 * GRP_REASON1 + 0.15223826213802 * GRP_REASON2 ;
63693     +   H11  =     0.40334970202873 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.40334970202873 + H11 ;
63694     +   H12  =    -0.03605065921952 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.03605065921952 + H12 ;
63695     +   H13  =    -1.42308543156766 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.42308543156766 + H13 ;
63696     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
63697     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
63698     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
63699     +END;
MPRINT(EM_DIAGRAM):   END;
63700     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
63701     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
63702     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
63703     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
63704     +END;
MPRINT(EM_DIAGRAM):   END;
63705     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
63706     +*** Writing the Node BAD ;
MPRINT(EM_DIAGRAM):   *** Writing the Node BAD ;
63707     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
63708     +
63709     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
63710     +drop BAD1 BAD0 ;
MPRINT(EM_DIAGRAM):   drop BAD1 BAD0 ;
63711     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
63712     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
63713     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
63714     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63715     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
63716     +   BAD1 = .;
MPRINT(EM_DIAGRAM):   BAD1 = .;
63717     +   BAD0 = .;
MPRINT(EM_DIAGRAM):   BAD0 = .;
63718     +end;
MPRINT(EM_DIAGRAM):   end;
63719     +else do;
MPRINT(EM_DIAGRAM):   else do;
63720     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
63721     +      BAD1 = 0;
MPRINT(EM_DIAGRAM):   BAD1 = 0;
63722     +      BAD0 = 1;
MPRINT(EM_DIAGRAM):   BAD0 = 1;
63723     +   end;
MPRINT(EM_DIAGRAM):   end;
63724     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
63725     +      BAD1 = 1;
MPRINT(EM_DIAGRAM):   BAD1 = 1;
63726     +      BAD0 = 0;
MPRINT(EM_DIAGRAM):   BAD0 = 0;
63727     +   end;
MPRINT(EM_DIAGRAM):   end;
63728     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63729     +      BAD1 = .;
MPRINT(EM_DIAGRAM):   BAD1 = .;
63730     +      BAD0 = .;
MPRINT(EM_DIAGRAM):   BAD0 = .;
63731     +   end;
MPRINT(EM_DIAGRAM):   end;
63732     +end;
MPRINT(EM_DIAGRAM):   end;
63733     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
63734     +   P_BAD1  =    -2.63470208583197 * H11  +     1.86742307499411 * H12
63735     +          +    -1.33116147749524 * H13 ;
MPRINT(EM_DIAGRAM):   P_BAD1 = -2.63470208583197 * H11 + 1.86742307499411 * H12 +
-1.33116147749524 * H13 ;
63736     +   P_BAD1  =    -0.33697759343629 + P_BAD1 ;
MPRINT(EM_DIAGRAM):   P_BAD1 = -0.33697759343629 + P_BAD1 ;
63737     +   P_BAD0  = 0;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0;
63738     +   _MAX_ = MAX (P_BAD1 , P_BAD0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_BAD1 , P_BAD0 );
63739     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
63740     +   P_BAD1  = EXP(P_BAD1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_BAD1 = EXP(P_BAD1 - _MAX_);
63741     +   _SUM_ = _SUM_ + P_BAD1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD1 ;
63742     +   P_BAD0  = EXP(P_BAD0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_BAD0 = EXP(P_BAD0 - _MAX_);
63743     +   _SUM_ = _SUM_ + P_BAD0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD0 ;
63744     +   P_BAD1  = P_BAD1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_BAD1 = P_BAD1 / _SUM_;
63745     +   P_BAD0  = P_BAD0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_BAD0 = P_BAD0 / _SUM_;
63746     +END;
MPRINT(EM_DIAGRAM):   END;
63747     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
63748     +   P_BAD1  = .;
MPRINT(EM_DIAGRAM):   P_BAD1 = .;
63749     +   P_BAD0  = .;
MPRINT(EM_DIAGRAM):   P_BAD0 = .;
63750     +END;
MPRINT(EM_DIAGRAM):   END;
63751     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
63752     +   P_BAD1  =     0.19941225860621;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.19941225860621;
63753     +   P_BAD0  =     0.80058774139378;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.80058774139378;
63754     +END;
MPRINT(EM_DIAGRAM):   END;
63755     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
63756     +*** Writing the Residuals  of the Node BAD ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node BAD ;
63757     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
63758     +IF MISSING( BAD1 ) THEN R_BAD1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD1 ) THEN R_BAD1 = . ;
63759     +ELSE R_BAD1  = BAD1  - P_BAD1 ;
MPRINT(EM_DIAGRAM):   ELSE R_BAD1 = BAD1 - P_BAD1 ;
63760     +IF MISSING( BAD0 ) THEN R_BAD0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD0 ) THEN R_BAD0 = . ;
63761     +ELSE R_BAD0  = BAD0  - P_BAD0 ;
MPRINT(EM_DIAGRAM):   ELSE R_BAD0 = BAD0 - P_BAD0 ;
63762     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
63763     +*** Writing the I_BAD  AND U_BAD ;
MPRINT(EM_DIAGRAM):   *** Writing the I_BAD AND U_BAD ;
63764     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
63765     +_MAXP_ = P_BAD1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD1 ;
63766     +I_BAD  = "1           " ;
MPRINT(EM_DIAGRAM):   I_BAD = "1           " ;
63767     +U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
63768     +IF( _MAXP_ LT P_BAD0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_BAD0 ) THEN DO;
63769     +   _MAXP_ = P_BAD0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD0 ;
63770     +   I_BAD  = "0           " ;
MPRINT(EM_DIAGRAM):   I_BAD = "0           " ;
63771     +   U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
63772     +END;
MPRINT(EM_DIAGRAM):   END;
63773     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
63774     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
63775     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
63776     +drop
63777     +H11
63778     +H12
63779     +H13
63780     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
63781      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.18 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
63782      quit;
63783      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
63784      filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My
63784    ! Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
63785      *------------------------------------------------------------*;
63786      * Neural: Scoring VALIDATE data;
63787      *------------------------------------------------------------*;
63788      data EMWS1.Neural_VALIDATE
63789      / view=EMWS1.Neural_VALIDATE
63790      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_VALIDATE / view=EMWS1.Neural_VALIDATE ;
63791      set EMWS1.BINNING_VALIDATE
63792      ;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_VALIDATE ;
63793      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\JMMORR01\CIS 445\Tutorial 2\My
      Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
63794     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
63795     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
63796     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
63797     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
63798     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
63799     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
63800     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
63801     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
63802     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
63803     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
63804     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
63805     +LENGTH _WARN_ $4
63806     +      F_BAD  $ 12
63807     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_BAD $ 12 ;
63808     +      label GRP_INDELINQ3 = 'Dummy: GRP_INDELINQ=3' ;
MPRINT(EM_DIAGRAM):   label GRP_INDELINQ3 = 'Dummy: GRP_INDELINQ=3' ;
63809     +
63810     +      label GRP_INDEROG3 = 'Dummy: GRP_INDEROG=3' ;
MPRINT(EM_DIAGRAM):   label GRP_INDEROG3 = 'Dummy: GRP_INDEROG=3' ;
63811     +
63812     +      label GRP_JOB1 = 'Dummy: GRP_JOB=1' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB1 = 'Dummy: GRP_JOB=1' ;
63813     +
63814     +      label GRP_JOB2 = 'Dummy: GRP_JOB=2' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB2 = 'Dummy: GRP_JOB=2' ;
63815     +
63816     +      label GRP_JOB3 = 'Dummy: GRP_JOB=3' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB3 = 'Dummy: GRP_JOB=3' ;
63817     +
63818     +      label GRP_JOB4 = 'Dummy: GRP_JOB=4' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB4 = 'Dummy: GRP_JOB=4' ;
63819     +
63820     +      label GRP_JOB5 = 'Dummy: GRP_JOB=5' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB5 = 'Dummy: GRP_JOB=5' ;
63821     +
63822     +      label GRP_JOB6 = 'Dummy: GRP_JOB=6' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB6 = 'Dummy: GRP_JOB=6' ;
63823     +
63824     +      label GRP_LOG_CLAGE1 = 'Dummy: GRP_LOG_CLAGE=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLAGE1 = 'Dummy: GRP_LOG_CLAGE=1' ;
63825     +
63826     +      label GRP_LOG_CLAGE2 = 'Dummy: GRP_LOG_CLAGE=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLAGE2 = 'Dummy: GRP_LOG_CLAGE=2' ;
63827     +
63828     +      label GRP_LOG_CLAGE3 = 'Dummy: GRP_LOG_CLAGE=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLAGE3 = 'Dummy: GRP_LOG_CLAGE=3' ;
63829     +
63830     +      label GRP_LOG_CLAGE4 = 'Dummy: GRP_LOG_CLAGE=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLAGE4 = 'Dummy: GRP_LOG_CLAGE=4' ;
63831     +
63832     +      label GRP_LOG_CLNO1 = 'Dummy: GRP_LOG_CLNO=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLNO1 = 'Dummy: GRP_LOG_CLNO=1' ;
63833     +
63834     +      label GRP_LOG_CLNO2 = 'Dummy: GRP_LOG_CLNO=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLNO2 = 'Dummy: GRP_LOG_CLNO=2' ;
63835     +
63836     +      label GRP_LOG_CLNO3 = 'Dummy: GRP_LOG_CLNO=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLNO3 = 'Dummy: GRP_LOG_CLNO=3' ;
63837     +
63838     +      label GRP_LOG_CLNO4 = 'Dummy: GRP_LOG_CLNO=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLNO4 = 'Dummy: GRP_LOG_CLNO=4' ;
63839     +
63840     +      label GRP_LOG_DEBTINC1 = 'Dummy: GRP_LOG_DEBTINC=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEBTINC1 = 'Dummy: GRP_LOG_DEBTINC=1' ;
63841     +
63842     +      label GRP_LOG_DEBTINC2 = 'Dummy: GRP_LOG_DEBTINC=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEBTINC2 = 'Dummy: GRP_LOG_DEBTINC=2' ;
63843     +
63844     +      label GRP_LOG_DEBTINC3 = 'Dummy: GRP_LOG_DEBTINC=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEBTINC3 = 'Dummy: GRP_LOG_DEBTINC=3' ;
63845     +
63846     +      label GRP_LOG_DEBTINC4 = 'Dummy: GRP_LOG_DEBTINC=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEBTINC4 = 'Dummy: GRP_LOG_DEBTINC=4' ;
63847     +
63848     +      label GRP_LOG_DELINQ1 = 'Dummy: GRP_LOG_DELINQ=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DELINQ1 = 'Dummy: GRP_LOG_DELINQ=1' ;
63849     +
63850     +      label GRP_LOG_DEROG1 = 'Dummy: GRP_LOG_DEROG=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEROG1 = 'Dummy: GRP_LOG_DEROG=1' ;
63851     +
63852     +      label GRP_LOG_LOAN2 = 'Dummy: GRP_LOG_LOAN=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_LOAN2 = 'Dummy: GRP_LOG_LOAN=2' ;
63853     +
63854     +      label GRP_LOG_LOAN3 = 'Dummy: GRP_LOG_LOAN=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_LOAN3 = 'Dummy: GRP_LOG_LOAN=3' ;
63855     +
63856     +      label GRP_LOG_LOAN4 = 'Dummy: GRP_LOG_LOAN=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_LOAN4 = 'Dummy: GRP_LOG_LOAN=4' ;
63857     +
63858     +      label GRP_LOG_MORTDUE1 = 'Dummy: GRP_LOG_MORTDUE=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_MORTDUE1 = 'Dummy: GRP_LOG_MORTDUE=1' ;
63859     +
63860     +      label GRP_LOG_MORTDUE2 = 'Dummy: GRP_LOG_MORTDUE=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_MORTDUE2 = 'Dummy: GRP_LOG_MORTDUE=2' ;
63861     +
63862     +      label GRP_LOG_MORTDUE3 = 'Dummy: GRP_LOG_MORTDUE=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_MORTDUE3 = 'Dummy: GRP_LOG_MORTDUE=3' ;
63863     +
63864     +      label GRP_LOG_MORTDUE4 = 'Dummy: GRP_LOG_MORTDUE=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_MORTDUE4 = 'Dummy: GRP_LOG_MORTDUE=4' ;
63865     +
63866     +      label GRP_LOG_VALUE1 = 'Dummy: GRP_LOG_VALUE=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_VALUE1 = 'Dummy: GRP_LOG_VALUE=1' ;
63867     +
63868     +      label GRP_LOG_VALUE2 = 'Dummy: GRP_LOG_VALUE=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_VALUE2 = 'Dummy: GRP_LOG_VALUE=2' ;
63869     +
63870     +      label GRP_LOG_VALUE3 = 'Dummy: GRP_LOG_VALUE=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_VALUE3 = 'Dummy: GRP_LOG_VALUE=3' ;
63871     +
63872     +      label GRP_LOG_VALUE4 = 'Dummy: GRP_LOG_VALUE=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_VALUE4 = 'Dummy: GRP_LOG_VALUE=4' ;
63873     +
63874     +      label GRP_LOG_YOJ1 = 'Dummy: GRP_LOG_YOJ=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_YOJ1 = 'Dummy: GRP_LOG_YOJ=1' ;
63875     +
63876     +      label GRP_LOG_YOJ2 = 'Dummy: GRP_LOG_YOJ=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_YOJ2 = 'Dummy: GRP_LOG_YOJ=2' ;
63877     +
63878     +      label GRP_LOG_YOJ3 = 'Dummy: GRP_LOG_YOJ=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_YOJ3 = 'Dummy: GRP_LOG_YOJ=3' ;
63879     +
63880     +      label GRP_LOG_YOJ4 = 'Dummy: GRP_LOG_YOJ=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_YOJ4 = 'Dummy: GRP_LOG_YOJ=4' ;
63881     +
63882     +      label GRP_NINQ1 = 'Dummy: GRP_NINQ=1' ;
MPRINT(EM_DIAGRAM):   label GRP_NINQ1 = 'Dummy: GRP_NINQ=1' ;
63883     +
63884     +      label GRP_NINQ2 = 'Dummy: GRP_NINQ=2' ;
MPRINT(EM_DIAGRAM):   label GRP_NINQ2 = 'Dummy: GRP_NINQ=2' ;
63885     +
63886     +      label GRP_NINQ3 = 'Dummy: GRP_NINQ=3' ;
MPRINT(EM_DIAGRAM):   label GRP_NINQ3 = 'Dummy: GRP_NINQ=3' ;
63887     +
63888     +      label GRP_REASON1 = 'Dummy: GRP_REASON=1' ;
MPRINT(EM_DIAGRAM):   label GRP_REASON1 = 'Dummy: GRP_REASON=1' ;
63889     +
63890     +      label GRP_REASON2 = 'Dummy: GRP_REASON=2' ;
MPRINT(EM_DIAGRAM):   label GRP_REASON2 = 'Dummy: GRP_REASON=2' ;
63891     +
63892     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
63893     +
63894     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
63895     +
63896     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
63897     +
63898     +      label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
63899     +
63900     +      label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
63901     +
63902     +      label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
63903     +
63904     +      label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
63905     +
63906     +      label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
63907     +
63908     +      label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
63909     +
63910     +      label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
63911     +
63912     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
63913     +
63914     +*** Generate dummy variables for GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDELINQ ;
63915     +drop GRP_INDELINQ3 ;
MPRINT(EM_DIAGRAM):   drop GRP_INDELINQ3 ;
63916     +if missing( GRP_INDELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDELINQ ) then do;
63917     +   GRP_INDELINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = .;
63918     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63919     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63920     +end;
MPRINT(EM_DIAGRAM):   end;
63921     +else do;
MPRINT(EM_DIAGRAM):   else do;
63922     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63923     +   _dm12 = put( GRP_INDELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDELINQ , BEST12. );
63924     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63925     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
63926     +      GRP_INDELINQ3 = -1;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = -1;
63927     +   end;
MPRINT(EM_DIAGRAM):   end;
63928     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
63929     +      GRP_INDELINQ3 = 1;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = 1;
63930     +   end;
MPRINT(EM_DIAGRAM):   end;
63931     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63932     +      GRP_INDELINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = .;
63933     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63934     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63935     +   end;
MPRINT(EM_DIAGRAM):   end;
63936     +end;
MPRINT(EM_DIAGRAM):   end;
63937     +
63938     +*** Generate dummy variables for GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDEROG ;
63939     +drop GRP_INDEROG3 ;
MPRINT(EM_DIAGRAM):   drop GRP_INDEROG3 ;
63940     +if missing( GRP_INDEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDEROG ) then do;
63941     +   GRP_INDEROG3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDEROG3 = .;
63942     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63943     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63944     +end;
MPRINT(EM_DIAGRAM):   end;
63945     +else do;
MPRINT(EM_DIAGRAM):   else do;
63946     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63947     +   _dm12 = put( GRP_INDEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDEROG , BEST12. );
63948     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63949     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
63950     +      GRP_INDEROG3 = -1;
MPRINT(EM_DIAGRAM):   GRP_INDEROG3 = -1;
63951     +   end;
MPRINT(EM_DIAGRAM):   end;
63952     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
63953     +      GRP_INDEROG3 = 1;
MPRINT(EM_DIAGRAM):   GRP_INDEROG3 = 1;
63954     +   end;
MPRINT(EM_DIAGRAM):   end;
63955     +   else do;
MPRINT(EM_DIAGRAM):   else do;
63956     +      GRP_INDEROG3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDEROG3 = .;
63957     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
63958     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63959     +   end;
MPRINT(EM_DIAGRAM):   end;
63960     +end;
MPRINT(EM_DIAGRAM):   end;
63961     +
63962     +*** Generate dummy variables for GRP_JOB ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_JOB ;
63963     +drop GRP_JOB1 GRP_JOB2 GRP_JOB3 GRP_JOB4 GRP_JOB5 GRP_JOB6 ;
MPRINT(EM_DIAGRAM):   drop GRP_JOB1 GRP_JOB2 GRP_JOB3 GRP_JOB4 GRP_JOB5 GRP_JOB6 ;
63964     +if missing( GRP_JOB ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_JOB ) then do;
63965     +   GRP_JOB1 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = .;
63966     +   GRP_JOB2 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = .;
63967     +   GRP_JOB3 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = .;
63968     +   GRP_JOB4 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = .;
63969     +   GRP_JOB5 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = .;
63970     +   GRP_JOB6 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = .;
63971     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
63972     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
63973     +end;
MPRINT(EM_DIAGRAM):   end;
63974     +else do;
MPRINT(EM_DIAGRAM):   else do;
63975     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
63976     +   _dm12 = put( GRP_JOB , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_JOB , BEST12. );
63977     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
63978     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
63979     +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
63980     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
63981     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
63982     +            GRP_JOB1 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = -0.46770717334674;
63983     +            GRP_JOB2 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = -0.46770717334674;
63984     +            GRP_JOB3 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = -0.46770717334674;
63985     +            GRP_JOB4 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = -0.46770717334674;
63986     +            GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
63987     +            GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
63988     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63989     +         end;
MPRINT(EM_DIAGRAM):   end;
63990     +         else do;
MPRINT(EM_DIAGRAM):   else do;
63991     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
63992     +               GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
63993     +               GRP_JOB2 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = -0.46770717334674;
63994     +               GRP_JOB3 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = -0.46770717334674;
63995     +               GRP_JOB4 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = -0.46770717334674;
63996     +               GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
63997     +               GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
63998     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
63999     +            end;
MPRINT(EM_DIAGRAM):   end;
64000     +         end;
MPRINT(EM_DIAGRAM):   end;
64001     +      end;
MPRINT(EM_DIAGRAM):   end;
64002     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64003     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
64004     +            GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
64005     +            GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
64006     +            GRP_JOB3 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = -0.46770717334674;
64007     +            GRP_JOB4 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = -0.46770717334674;
64008     +            GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
64009     +            GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
64010     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64011     +         end;
MPRINT(EM_DIAGRAM):   end;
64012     +         else do;
MPRINT(EM_DIAGRAM):   else do;
64013     +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
64014     +               GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
64015     +               GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
64016     +               GRP_JOB3 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = 0.46770717334674;
64017     +               GRP_JOB4 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = -0.46770717334674;
64018     +               GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
64019     +               GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
64020     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64021     +            end;
MPRINT(EM_DIAGRAM):   end;
64022     +         end;
MPRINT(EM_DIAGRAM):   end;
64023     +      end;
MPRINT(EM_DIAGRAM):   end;
64024     +   end;
MPRINT(EM_DIAGRAM):   end;
64025     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64026     +      if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
64027     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
64028     +            GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
64029     +            GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
64030     +            GRP_JOB3 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = 0.46770717334674;
64031     +            GRP_JOB4 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = 0.46770717334674;
64032     +            GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
64033     +            GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
64034     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64035     +         end;
MPRINT(EM_DIAGRAM):   end;
64036     +         else do;
MPRINT(EM_DIAGRAM):   else do;
64037     +            if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
64038     +               GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
64039     +               GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
64040     +               GRP_JOB3 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = 0.46770717334674;
64041     +               GRP_JOB4 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = 0.46770717334674;
64042     +               GRP_JOB5 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = 0.46770717334674;
64043     +               GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
64044     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64045     +            end;
MPRINT(EM_DIAGRAM):   end;
64046     +         end;
MPRINT(EM_DIAGRAM):   end;
64047     +      end;
MPRINT(EM_DIAGRAM):   end;
64048     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64049     +         if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
64050     +            GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
64051     +            GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
64052     +            GRP_JOB3 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = 0.46770717334674;
64053     +            GRP_JOB4 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = 0.46770717334674;
64054     +            GRP_JOB5 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = 0.46770717334674;
64055     +            GRP_JOB6 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = 0.46770717334674;
64056     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64057     +         end;
MPRINT(EM_DIAGRAM):   end;
64058     +      end;
MPRINT(EM_DIAGRAM):   end;
64059     +   end;
MPRINT(EM_DIAGRAM):   end;
64060     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
64061     +      GRP_JOB1 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = .;
64062     +      GRP_JOB2 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = .;
64063     +      GRP_JOB3 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = .;
64064     +      GRP_JOB4 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = .;
64065     +      GRP_JOB5 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = .;
64066     +      GRP_JOB6 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = .;
64067     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
64068     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64069     +   end;
MPRINT(EM_DIAGRAM):   end;
64070     +end;
MPRINT(EM_DIAGRAM):   end;
64071     +
64072     +*** Generate dummy variables for GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLAGE ;
64073     +drop GRP_LOG_CLAGE1 GRP_LOG_CLAGE2 GRP_LOG_CLAGE3 GRP_LOG_CLAGE4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_CLAGE1 GRP_LOG_CLAGE2 GRP_LOG_CLAGE3 GRP_LOG_CLAGE4 ;
64074     +if missing( GRP_LOG_CLAGE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLAGE ) then do;
64075     +   GRP_LOG_CLAGE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = .;
64076     +   GRP_LOG_CLAGE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = .;
64077     +   GRP_LOG_CLAGE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = .;
64078     +   GRP_LOG_CLAGE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = .;
64079     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
64080     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64081     +end;
MPRINT(EM_DIAGRAM):   end;
64082     +else do;
MPRINT(EM_DIAGRAM):   else do;
64083     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
64084     +   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
64085     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
64086     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
64087     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
64088     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
64089     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
64090     +            GRP_LOG_CLAGE1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = -0.55901699437494;
64091     +            GRP_LOG_CLAGE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = -0.55901699437494;
64092     +            GRP_LOG_CLAGE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = -0.55901699437494;
64093     +            GRP_LOG_CLAGE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = -0.55901699437494;
64094     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64095     +         end;
MPRINT(EM_DIAGRAM):   end;
64096     +         else do;
MPRINT(EM_DIAGRAM):   else do;
64097     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
64098     +               GRP_LOG_CLAGE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = 0.55901699437494;
64099     +               GRP_LOG_CLAGE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = -0.55901699437494;
64100     +               GRP_LOG_CLAGE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = -0.55901699437494;
64101     +               GRP_LOG_CLAGE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = -0.55901699437494;
64102     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64103     +            end;
MPRINT(EM_DIAGRAM):   end;
64104     +         end;
MPRINT(EM_DIAGRAM):   end;
64105     +      end;
MPRINT(EM_DIAGRAM):   end;
64106     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64107     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
64108     +            GRP_LOG_CLAGE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = 0.55901699437494;
64109     +            GRP_LOG_CLAGE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = 0.55901699437494;
64110     +            GRP_LOG_CLAGE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = -0.55901699437494;
64111     +            GRP_LOG_CLAGE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = -0.55901699437494;
64112     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64113     +         end;
MPRINT(EM_DIAGRAM):   end;
64114     +      end;
MPRINT(EM_DIAGRAM):   end;
64115     +   end;
MPRINT(EM_DIAGRAM):   end;
64116     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64117     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
64118     +         GRP_LOG_CLAGE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = 0.55901699437494;
64119     +         GRP_LOG_CLAGE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = 0.55901699437494;
64120     +         GRP_LOG_CLAGE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = 0.55901699437494;
64121     +         GRP_LOG_CLAGE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = -0.55901699437494;
64122     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64123     +      end;
MPRINT(EM_DIAGRAM):   end;
64124     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64125     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
64126     +            GRP_LOG_CLAGE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = 0.55901699437494;
64127     +            GRP_LOG_CLAGE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = 0.55901699437494;
64128     +            GRP_LOG_CLAGE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = 0.55901699437494;
64129     +            GRP_LOG_CLAGE4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = 0.55901699437494;
64130     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64131     +         end;
MPRINT(EM_DIAGRAM):   end;
64132     +      end;
MPRINT(EM_DIAGRAM):   end;
64133     +   end;
MPRINT(EM_DIAGRAM):   end;
64134     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
64135     +      GRP_LOG_CLAGE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = .;
64136     +      GRP_LOG_CLAGE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = .;
64137     +      GRP_LOG_CLAGE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = .;
64138     +      GRP_LOG_CLAGE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = .;
64139     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
64140     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64141     +   end;
MPRINT(EM_DIAGRAM):   end;
64142     +end;
MPRINT(EM_DIAGRAM):   end;
64143     +
64144     +*** Generate dummy variables for GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLNO ;
64145     +drop GRP_LOG_CLNO1 GRP_LOG_CLNO2 GRP_LOG_CLNO3 GRP_LOG_CLNO4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_CLNO1 GRP_LOG_CLNO2 GRP_LOG_CLNO3 GRP_LOG_CLNO4 ;
64146     +if missing( GRP_LOG_CLNO ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLNO ) then do;
64147     +   GRP_LOG_CLNO1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = .;
64148     +   GRP_LOG_CLNO2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = .;
64149     +   GRP_LOG_CLNO3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = .;
64150     +   GRP_LOG_CLNO4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = .;
64151     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
64152     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64153     +end;
MPRINT(EM_DIAGRAM):   end;
64154     +else do;
MPRINT(EM_DIAGRAM):   else do;
64155     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
64156     +   _dm12 = put( GRP_LOG_CLNO , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLNO , BEST12. );
64157     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
64158     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
64159     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
64160     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
64161     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
64162     +            GRP_LOG_CLNO1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = -0.55901699437494;
64163     +            GRP_LOG_CLNO2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = -0.55901699437494;
64164     +            GRP_LOG_CLNO3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = -0.55901699437494;
64165     +            GRP_LOG_CLNO4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = -0.55901699437494;
64166     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64167     +         end;
MPRINT(EM_DIAGRAM):   end;
64168     +         else do;
MPRINT(EM_DIAGRAM):   else do;
64169     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
64170     +               GRP_LOG_CLNO1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = 0.55901699437494;
64171     +               GRP_LOG_CLNO2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = -0.55901699437494;
64172     +               GRP_LOG_CLNO3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = -0.55901699437494;
64173     +               GRP_LOG_CLNO4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = -0.55901699437494;
64174     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64175     +            end;
MPRINT(EM_DIAGRAM):   end;
64176     +         end;
MPRINT(EM_DIAGRAM):   end;
64177     +      end;
MPRINT(EM_DIAGRAM):   end;
64178     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64179     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
64180     +            GRP_LOG_CLNO1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = 0.55901699437494;
64181     +            GRP_LOG_CLNO2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = 0.55901699437494;
64182     +            GRP_LOG_CLNO3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = -0.55901699437494;
64183     +            GRP_LOG_CLNO4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = -0.55901699437494;
64184     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64185     +         end;
MPRINT(EM_DIAGRAM):   end;
64186     +      end;
MPRINT(EM_DIAGRAM):   end;
64187     +   end;
MPRINT(EM_DIAGRAM):   end;
64188     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64189     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
64190     +         GRP_LOG_CLNO1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = 0.55901699437494;
64191     +         GRP_LOG_CLNO2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = 0.55901699437494;
64192     +         GRP_LOG_CLNO3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = 0.55901699437494;
64193     +         GRP_LOG_CLNO4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = -0.55901699437494;
64194     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64195     +      end;
MPRINT(EM_DIAGRAM):   end;
64196     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64197     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
64198     +            GRP_LOG_CLNO1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = 0.55901699437494;
64199     +            GRP_LOG_CLNO2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = 0.55901699437494;
64200     +            GRP_LOG_CLNO3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = 0.55901699437494;
64201     +            GRP_LOG_CLNO4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = 0.55901699437494;
64202     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64203     +         end;
MPRINT(EM_DIAGRAM):   end;
64204     +      end;
MPRINT(EM_DIAGRAM):   end;
64205     +   end;
MPRINT(EM_DIAGRAM):   end;
64206     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
64207     +      GRP_LOG_CLNO1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = .;
64208     +      GRP_LOG_CLNO2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = .;
64209     +      GRP_LOG_CLNO3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = .;
64210     +      GRP_LOG_CLNO4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = .;
64211     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
64212     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64213     +   end;
MPRINT(EM_DIAGRAM):   end;
64214     +end;
MPRINT(EM_DIAGRAM):   end;
64215     +
64216     +*** Generate dummy variables for GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEBTINC ;
64217     +drop GRP_LOG_DEBTINC1 GRP_LOG_DEBTINC2 GRP_LOG_DEBTINC3 GRP_LOG_DEBTINC4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_DEBTINC1 GRP_LOG_DEBTINC2 GRP_LOG_DEBTINC3 GRP_LOG_DEBTINC4
;
64218     +if missing( GRP_LOG_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEBTINC ) then do;
64219     +   GRP_LOG_DEBTINC1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = .;
64220     +   GRP_LOG_DEBTINC2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = .;
64221     +   GRP_LOG_DEBTINC3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = .;
64222     +   GRP_LOG_DEBTINC4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = .;
64223     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
64224     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64225     +end;
MPRINT(EM_DIAGRAM):   end;
64226     +else do;
MPRINT(EM_DIAGRAM):   else do;
64227     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
64228     +   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
64229     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
64230     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
64231     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
64232     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
64233     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
64234     +            GRP_LOG_DEBTINC1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = -0.55901699437494;
64235     +            GRP_LOG_DEBTINC2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = -0.55901699437494;
64236     +            GRP_LOG_DEBTINC3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = -0.55901699437494;
64237     +            GRP_LOG_DEBTINC4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = -0.55901699437494;
64238     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64239     +         end;
MPRINT(EM_DIAGRAM):   end;
64240     +         else do;
MPRINT(EM_DIAGRAM):   else do;
64241     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
64242     +               GRP_LOG_DEBTINC1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = 0.55901699437494;
64243     +               GRP_LOG_DEBTINC2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = -0.55901699437494;
64244     +               GRP_LOG_DEBTINC3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = -0.55901699437494;
64245     +               GRP_LOG_DEBTINC4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = -0.55901699437494;
64246     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64247     +            end;
MPRINT(EM_DIAGRAM):   end;
64248     +         end;
MPRINT(EM_DIAGRAM):   end;
64249     +      end;
MPRINT(EM_DIAGRAM):   end;
64250     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64251     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
64252     +            GRP_LOG_DEBTINC1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = 0.55901699437494;
64253     +            GRP_LOG_DEBTINC2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = 0.55901699437494;
64254     +            GRP_LOG_DEBTINC3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = -0.55901699437494;
64255     +            GRP_LOG_DEBTINC4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = -0.55901699437494;
64256     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64257     +         end;
MPRINT(EM_DIAGRAM):   end;
64258     +      end;
MPRINT(EM_DIAGRAM):   end;
64259     +   end;
MPRINT(EM_DIAGRAM):   end;
64260     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64261     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
64262     +         GRP_LOG_DEBTINC1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = 0.55901699437494;
64263     +         GRP_LOG_DEBTINC2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = 0.55901699437494;
64264     +         GRP_LOG_DEBTINC3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = 0.55901699437494;
64265     +         GRP_LOG_DEBTINC4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = -0.55901699437494;
64266     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64267     +      end;
MPRINT(EM_DIAGRAM):   end;
64268     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64269     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
64270     +            GRP_LOG_DEBTINC1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = 0.55901699437494;
64271     +            GRP_LOG_DEBTINC2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = 0.55901699437494;
64272     +            GRP_LOG_DEBTINC3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = 0.55901699437494;
64273     +            GRP_LOG_DEBTINC4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = 0.55901699437494;
64274     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64275     +         end;
MPRINT(EM_DIAGRAM):   end;
64276     +      end;
MPRINT(EM_DIAGRAM):   end;
64277     +   end;
MPRINT(EM_DIAGRAM):   end;
64278     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
64279     +      GRP_LOG_DEBTINC1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = .;
64280     +      GRP_LOG_DEBTINC2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = .;
64281     +      GRP_LOG_DEBTINC3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = .;
64282     +      GRP_LOG_DEBTINC4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = .;
64283     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
64284     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64285     +   end;
MPRINT(EM_DIAGRAM):   end;
64286     +end;
MPRINT(EM_DIAGRAM):   end;
64287     +
64288     +*** Generate dummy variables for GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DELINQ ;
64289     +drop GRP_LOG_DELINQ1 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_DELINQ1 ;
64290     +if missing( GRP_LOG_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DELINQ ) then do;
64291     +   GRP_LOG_DELINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ1 = .;
64292     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
64293     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64294     +end;
MPRINT(EM_DIAGRAM):   end;
64295     +else do;
MPRINT(EM_DIAGRAM):   else do;
64296     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
64297     +   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
64298     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
64299     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
64300     +      GRP_LOG_DELINQ1 = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ1 = 1;
64301     +   end;
MPRINT(EM_DIAGRAM):   end;
64302     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
64303     +      GRP_LOG_DELINQ1 = -1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ1 = -1;
64304     +   end;
MPRINT(EM_DIAGRAM):   end;
64305     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64306     +      GRP_LOG_DELINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ1 = .;
64307     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
64308     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64309     +   end;
MPRINT(EM_DIAGRAM):   end;
64310     +end;
MPRINT(EM_DIAGRAM):   end;
64311     +
64312     +*** Generate dummy variables for GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEROG ;
64313     +drop GRP_LOG_DEROG1 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_DEROG1 ;
64314     +if missing( GRP_LOG_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEROG ) then do;
64315     +   GRP_LOG_DEROG1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG1 = .;
64316     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
64317     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64318     +end;
MPRINT(EM_DIAGRAM):   end;
64319     +else do;
MPRINT(EM_DIAGRAM):   else do;
64320     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
64321     +   _dm12 = put( GRP_LOG_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEROG , BEST12. );
64322     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
64323     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
64324     +      GRP_LOG_DEROG1 = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG1 = 1;
64325     +   end;
MPRINT(EM_DIAGRAM):   end;
64326     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
64327     +      GRP_LOG_DEROG1 = -1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG1 = -1;
64328     +   end;
MPRINT(EM_DIAGRAM):   end;
64329     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64330     +      GRP_LOG_DEROG1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG1 = .;
64331     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
64332     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64333     +   end;
MPRINT(EM_DIAGRAM):   end;
64334     +end;
MPRINT(EM_DIAGRAM):   end;
64335     +
64336     +*** Generate dummy variables for GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_LOAN ;
64337     +drop GRP_LOG_LOAN2 GRP_LOG_LOAN3 GRP_LOG_LOAN4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_LOAN2 GRP_LOG_LOAN3 GRP_LOG_LOAN4 ;
64338     +if missing( GRP_LOG_LOAN ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_LOAN ) then do;
64339     +   GRP_LOG_LOAN2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = .;
64340     +   GRP_LOG_LOAN3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = .;
64341     +   GRP_LOG_LOAN4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = .;
64342     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
64343     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64344     +end;
MPRINT(EM_DIAGRAM):   end;
64345     +else do;
MPRINT(EM_DIAGRAM):   else do;
64346     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
64347     +   _dm12 = put( GRP_LOG_LOAN , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_LOAN , BEST12. );
64348     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
64349     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
64350     +      GRP_LOG_LOAN2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = 0.63245553203367;
64351     +      GRP_LOG_LOAN3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = -0.63245553203367;
64352     +      GRP_LOG_LOAN4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = -0.63245553203367;
64353     +   end;
MPRINT(EM_DIAGRAM):   end;
64354     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
64355     +      GRP_LOG_LOAN2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = 0.63245553203367;
64356     +      GRP_LOG_LOAN3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = 0.63245553203367;
64357     +      GRP_LOG_LOAN4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = 0.63245553203367;
64358     +   end;
MPRINT(EM_DIAGRAM):   end;
64359     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
64360     +      GRP_LOG_LOAN2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = -0.63245553203367;
64361     +      GRP_LOG_LOAN3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = -0.63245553203367;
64362     +      GRP_LOG_LOAN4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = -0.63245553203367;
64363     +   end;
MPRINT(EM_DIAGRAM):   end;
64364     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
64365     +      GRP_LOG_LOAN2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = 0.63245553203367;
64366     +      GRP_LOG_LOAN3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = 0.63245553203367;
64367     +      GRP_LOG_LOAN4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = -0.63245553203367;
64368     +   end;
MPRINT(EM_DIAGRAM):   end;
64369     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64370     +      GRP_LOG_LOAN2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = .;
64371     +      GRP_LOG_LOAN3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = .;
64372     +      GRP_LOG_LOAN4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = .;
64373     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
64374     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64375     +   end;
MPRINT(EM_DIAGRAM):   end;
64376     +end;
MPRINT(EM_DIAGRAM):   end;
64377     +
64378     +*** Generate dummy variables for GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_MORTDUE ;
64379     +drop GRP_LOG_MORTDUE1 GRP_LOG_MORTDUE2 GRP_LOG_MORTDUE3 GRP_LOG_MORTDUE4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_MORTDUE1 GRP_LOG_MORTDUE2 GRP_LOG_MORTDUE3 GRP_LOG_MORTDUE4
;
64380     +if missing( GRP_LOG_MORTDUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_MORTDUE ) then do;
64381     +   GRP_LOG_MORTDUE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = .;
64382     +   GRP_LOG_MORTDUE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = .;
64383     +   GRP_LOG_MORTDUE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = .;
64384     +   GRP_LOG_MORTDUE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = .;
64385     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
64386     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64387     +end;
MPRINT(EM_DIAGRAM):   end;
64388     +else do;
MPRINT(EM_DIAGRAM):   else do;
64389     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
64390     +   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
64391     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
64392     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
64393     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
64394     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
64395     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
64396     +            GRP_LOG_MORTDUE1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = -0.55901699437494;
64397     +            GRP_LOG_MORTDUE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = -0.55901699437494;
64398     +            GRP_LOG_MORTDUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = -0.55901699437494;
64399     +            GRP_LOG_MORTDUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = -0.55901699437494;
64400     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64401     +         end;
MPRINT(EM_DIAGRAM):   end;
64402     +         else do;
MPRINT(EM_DIAGRAM):   else do;
64403     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
64404     +               GRP_LOG_MORTDUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = 0.55901699437494;
64405     +               GRP_LOG_MORTDUE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = -0.55901699437494;
64406     +               GRP_LOG_MORTDUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = -0.55901699437494;
64407     +               GRP_LOG_MORTDUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = -0.55901699437494;
64408     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64409     +            end;
MPRINT(EM_DIAGRAM):   end;
64410     +         end;
MPRINT(EM_DIAGRAM):   end;
64411     +      end;
MPRINT(EM_DIAGRAM):   end;
64412     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64413     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
64414     +            GRP_LOG_MORTDUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = 0.55901699437494;
64415     +            GRP_LOG_MORTDUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = 0.55901699437494;
64416     +            GRP_LOG_MORTDUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = -0.55901699437494;
64417     +            GRP_LOG_MORTDUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = -0.55901699437494;
64418     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64419     +         end;
MPRINT(EM_DIAGRAM):   end;
64420     +      end;
MPRINT(EM_DIAGRAM):   end;
64421     +   end;
MPRINT(EM_DIAGRAM):   end;
64422     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64423     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
64424     +         GRP_LOG_MORTDUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = 0.55901699437494;
64425     +         GRP_LOG_MORTDUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = 0.55901699437494;
64426     +         GRP_LOG_MORTDUE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = 0.55901699437494;
64427     +         GRP_LOG_MORTDUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = -0.55901699437494;
64428     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64429     +      end;
MPRINT(EM_DIAGRAM):   end;
64430     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64431     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
64432     +            GRP_LOG_MORTDUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = 0.55901699437494;
64433     +            GRP_LOG_MORTDUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = 0.55901699437494;
64434     +            GRP_LOG_MORTDUE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = 0.55901699437494;
64435     +            GRP_LOG_MORTDUE4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = 0.55901699437494;
64436     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64437     +         end;
MPRINT(EM_DIAGRAM):   end;
64438     +      end;
MPRINT(EM_DIAGRAM):   end;
64439     +   end;
MPRINT(EM_DIAGRAM):   end;
64440     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
64441     +      GRP_LOG_MORTDUE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = .;
64442     +      GRP_LOG_MORTDUE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = .;
64443     +      GRP_LOG_MORTDUE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = .;
64444     +      GRP_LOG_MORTDUE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = .;
64445     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
64446     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64447     +   end;
MPRINT(EM_DIAGRAM):   end;
64448     +end;
MPRINT(EM_DIAGRAM):   end;
64449     +
64450     +*** Generate dummy variables for GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_VALUE ;
64451     +drop GRP_LOG_VALUE1 GRP_LOG_VALUE2 GRP_LOG_VALUE3 GRP_LOG_VALUE4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_VALUE1 GRP_LOG_VALUE2 GRP_LOG_VALUE3 GRP_LOG_VALUE4 ;
64452     +if missing( GRP_LOG_VALUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_VALUE ) then do;
64453     +   GRP_LOG_VALUE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = .;
64454     +   GRP_LOG_VALUE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = .;
64455     +   GRP_LOG_VALUE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = .;
64456     +   GRP_LOG_VALUE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = .;
64457     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
64458     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64459     +end;
MPRINT(EM_DIAGRAM):   end;
64460     +else do;
MPRINT(EM_DIAGRAM):   else do;
64461     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
64462     +   _dm12 = put( GRP_LOG_VALUE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_VALUE , BEST12. );
64463     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
64464     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
64465     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
64466     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
64467     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
64468     +            GRP_LOG_VALUE1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = -0.55901699437494;
64469     +            GRP_LOG_VALUE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = -0.55901699437494;
64470     +            GRP_LOG_VALUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = -0.55901699437494;
64471     +            GRP_LOG_VALUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = -0.55901699437494;
64472     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64473     +         end;
MPRINT(EM_DIAGRAM):   end;
64474     +         else do;
MPRINT(EM_DIAGRAM):   else do;
64475     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
64476     +               GRP_LOG_VALUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = 0.55901699437494;
64477     +               GRP_LOG_VALUE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = -0.55901699437494;
64478     +               GRP_LOG_VALUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = -0.55901699437494;
64479     +               GRP_LOG_VALUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = -0.55901699437494;
64480     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64481     +            end;
MPRINT(EM_DIAGRAM):   end;
64482     +         end;
MPRINT(EM_DIAGRAM):   end;
64483     +      end;
MPRINT(EM_DIAGRAM):   end;
64484     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64485     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
64486     +            GRP_LOG_VALUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = 0.55901699437494;
64487     +            GRP_LOG_VALUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = 0.55901699437494;
64488     +            GRP_LOG_VALUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = -0.55901699437494;
64489     +            GRP_LOG_VALUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = -0.55901699437494;
64490     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64491     +         end;
MPRINT(EM_DIAGRAM):   end;
64492     +      end;
MPRINT(EM_DIAGRAM):   end;
64493     +   end;
MPRINT(EM_DIAGRAM):   end;
64494     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64495     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
64496     +         GRP_LOG_VALUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = 0.55901699437494;
64497     +         GRP_LOG_VALUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = 0.55901699437494;
64498     +         GRP_LOG_VALUE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = 0.55901699437494;
64499     +         GRP_LOG_VALUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = -0.55901699437494;
64500     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64501     +      end;
MPRINT(EM_DIAGRAM):   end;
64502     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64503     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
64504     +            GRP_LOG_VALUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = 0.55901699437494;
64505     +            GRP_LOG_VALUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = 0.55901699437494;
64506     +            GRP_LOG_VALUE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = 0.55901699437494;
64507     +            GRP_LOG_VALUE4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = 0.55901699437494;
64508     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64509     +         end;
MPRINT(EM_DIAGRAM):   end;
64510     +      end;
MPRINT(EM_DIAGRAM):   end;
64511     +   end;
MPRINT(EM_DIAGRAM):   end;
64512     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
64513     +      GRP_LOG_VALUE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = .;
64514     +      GRP_LOG_VALUE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = .;
64515     +      GRP_LOG_VALUE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = .;
64516     +      GRP_LOG_VALUE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = .;
64517     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
64518     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64519     +   end;
MPRINT(EM_DIAGRAM):   end;
64520     +end;
MPRINT(EM_DIAGRAM):   end;
64521     +
64522     +*** Generate dummy variables for GRP_LOG_YOJ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_YOJ ;
64523     +drop GRP_LOG_YOJ1 GRP_LOG_YOJ2 GRP_LOG_YOJ3 GRP_LOG_YOJ4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_YOJ1 GRP_LOG_YOJ2 GRP_LOG_YOJ3 GRP_LOG_YOJ4 ;
64524     +if missing( GRP_LOG_YOJ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_YOJ ) then do;
64525     +   GRP_LOG_YOJ1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = .;
64526     +   GRP_LOG_YOJ2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = .;
64527     +   GRP_LOG_YOJ3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = .;
64528     +   GRP_LOG_YOJ4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = .;
64529     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
64530     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64531     +end;
MPRINT(EM_DIAGRAM):   end;
64532     +else do;
MPRINT(EM_DIAGRAM):   else do;
64533     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
64534     +   _dm12 = put( GRP_LOG_YOJ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_YOJ , BEST12. );
64535     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
64536     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
64537     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
64538     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
64539     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
64540     +            GRP_LOG_YOJ1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = -0.55901699437494;
64541     +            GRP_LOG_YOJ2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = -0.55901699437494;
64542     +            GRP_LOG_YOJ3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = -0.55901699437494;
64543     +            GRP_LOG_YOJ4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = -0.55901699437494;
64544     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64545     +         end;
MPRINT(EM_DIAGRAM):   end;
64546     +         else do;
MPRINT(EM_DIAGRAM):   else do;
64547     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
64548     +               GRP_LOG_YOJ1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = 0.55901699437494;
64549     +               GRP_LOG_YOJ2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = -0.55901699437494;
64550     +               GRP_LOG_YOJ3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = -0.55901699437494;
64551     +               GRP_LOG_YOJ4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = -0.55901699437494;
64552     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64553     +            end;
MPRINT(EM_DIAGRAM):   end;
64554     +         end;
MPRINT(EM_DIAGRAM):   end;
64555     +      end;
MPRINT(EM_DIAGRAM):   end;
64556     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64557     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
64558     +            GRP_LOG_YOJ1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = 0.55901699437494;
64559     +            GRP_LOG_YOJ2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = 0.55901699437494;
64560     +            GRP_LOG_YOJ3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = -0.55901699437494;
64561     +            GRP_LOG_YOJ4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = -0.55901699437494;
64562     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64563     +         end;
MPRINT(EM_DIAGRAM):   end;
64564     +      end;
MPRINT(EM_DIAGRAM):   end;
64565     +   end;
MPRINT(EM_DIAGRAM):   end;
64566     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64567     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
64568     +         GRP_LOG_YOJ1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = 0.55901699437494;
64569     +         GRP_LOG_YOJ2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = 0.55901699437494;
64570     +         GRP_LOG_YOJ3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = 0.55901699437494;
64571     +         GRP_LOG_YOJ4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = -0.55901699437494;
64572     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64573     +      end;
MPRINT(EM_DIAGRAM):   end;
64574     +      else do;
MPRINT(EM_DIAGRAM):   else do;
64575     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
64576     +            GRP_LOG_YOJ1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = 0.55901699437494;
64577     +            GRP_LOG_YOJ2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = 0.55901699437494;
64578     +            GRP_LOG_YOJ3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = 0.55901699437494;
64579     +            GRP_LOG_YOJ4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = 0.55901699437494;
64580     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
64581     +         end;
MPRINT(EM_DIAGRAM):   end;
64582     +      end;
MPRINT(EM_DIAGRAM):   end;
64583     +   end;
MPRINT(EM_DIAGRAM):   end;
64584     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
64585     +      GRP_LOG_YOJ1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = .;
64586     +      GRP_LOG_YOJ2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = .;
64587     +      GRP_LOG_YOJ3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = .;
64588     +      GRP_LOG_YOJ4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = .;
64589     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
64590     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64591     +   end;
MPRINT(EM_DIAGRAM):   end;
64592     +end;
MPRINT(EM_DIAGRAM):   end;
64593     +
64594     +*** Generate dummy variables for GRP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NINQ ;
64595     +drop GRP_NINQ1 GRP_NINQ2 GRP_NINQ3 ;
MPRINT(EM_DIAGRAM):   drop GRP_NINQ1 GRP_NINQ2 GRP_NINQ3 ;
64596     +if missing( GRP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NINQ ) then do;
64597     +   GRP_NINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = .;
64598     +   GRP_NINQ2 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = .;
64599     +   GRP_NINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = .;
64600     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
64601     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64602     +end;
MPRINT(EM_DIAGRAM):   end;
64603     +else do;
MPRINT(EM_DIAGRAM):   else do;
64604     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
64605     +   _dm12 = put( GRP_NINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NINQ , BEST12. );
64606     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
64607     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
64608     +      GRP_NINQ1 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = -0.63245553203367;
64609     +      GRP_NINQ2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = -0.63245553203367;
64610     +      GRP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = -0.63245553203367;
64611     +   end;
MPRINT(EM_DIAGRAM):   end;
64612     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
64613     +      GRP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = 0.63245553203367;
64614     +      GRP_NINQ2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = -0.63245553203367;
64615     +      GRP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = -0.63245553203367;
64616     +   end;
MPRINT(EM_DIAGRAM):   end;
64617     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
64618     +      GRP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = 0.63245553203367;
64619     +      GRP_NINQ2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = 0.63245553203367;
64620     +      GRP_NINQ3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = 0.63245553203367;
64621     +   end;
MPRINT(EM_DIAGRAM):   end;
64622     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
64623     +      GRP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = 0.63245553203367;
64624     +      GRP_NINQ2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = 0.63245553203367;
64625     +      GRP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = -0.63245553203367;
64626     +   end;
MPRINT(EM_DIAGRAM):   end;
64627     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64628     +      GRP_NINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = .;
64629     +      GRP_NINQ2 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = .;
64630     +      GRP_NINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = .;
64631     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
64632     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64633     +   end;
MPRINT(EM_DIAGRAM):   end;
64634     +end;
MPRINT(EM_DIAGRAM):   end;
64635     +
64636     +*** Generate dummy variables for GRP_REASON ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_REASON ;
64637     +drop GRP_REASON1 GRP_REASON2 ;
MPRINT(EM_DIAGRAM):   drop GRP_REASON1 GRP_REASON2 ;
64638     +if missing( GRP_REASON ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_REASON ) then do;
64639     +   GRP_REASON1 = .;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = .;
64640     +   GRP_REASON2 = .;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = .;
64641     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
64642     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64643     +end;
MPRINT(EM_DIAGRAM):   end;
64644     +else do;
MPRINT(EM_DIAGRAM):   else do;
64645     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
64646     +   _dm12 = put( GRP_REASON , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_REASON , BEST12. );
64647     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
64648     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
64649     +      GRP_REASON1 = 0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = 0.75;
64650     +      GRP_REASON2 = -0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = -0.75;
64651     +   end;
MPRINT(EM_DIAGRAM):   end;
64652     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
64653     +      GRP_REASON1 = 0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = 0.75;
64654     +      GRP_REASON2 = 0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = 0.75;
64655     +   end;
MPRINT(EM_DIAGRAM):   end;
64656     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
64657     +      GRP_REASON1 = -0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = -0.75;
64658     +      GRP_REASON2 = -0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = -0.75;
64659     +   end;
MPRINT(EM_DIAGRAM):   end;
64660     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64661     +      GRP_REASON1 = .;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = .;
64662     +      GRP_REASON2 = .;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = .;
64663     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
64664     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64665     +   end;
MPRINT(EM_DIAGRAM):   end;
64666     +end;
MPRINT(EM_DIAGRAM):   end;
64667     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
64668     +*** Writing the Node ord ;
MPRINT(EM_DIAGRAM):   *** Writing the Node ord ;
64669     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
64670     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
64671     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
64672     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
64673     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
64674     +   H11  =  9.9999999600419E-11 * GRP_INDELINQ3  +  1.0000000133514E-10 *
64675     +        GRP_INDEROG3  +   1.000000000341E-10 * GRP_JOB1
64676     +          +     0.05008717989805 * GRP_JOB2  +     0.08023042969491 * GRP_JOB3
64677     +          +   1.000000000341E-10 * GRP_JOB4  +  9.9999999600419E-11 * GRP_JOB5
64678     +          +      0.1850031165278 * GRP_JOB6  +      0.0236044559772 *
64679     +        GRP_LOG_CLAGE1  +     0.18353369591421 * GRP_LOG_CLAGE2
64680     +          +     0.04452662957432 * GRP_LOG_CLAGE3  +     0.17795522482642 *
64681     +        GRP_LOG_CLAGE4  +     0.13453214051882 * GRP_LOG_CLNO1
64682     +          +   9.999999992568E-11 * GRP_LOG_CLNO2  +   1.000000000341E-10 *
64683     +        GRP_LOG_CLNO3  +   1.000000000341E-10 * GRP_LOG_CLNO4
64684     +          +     1.21265583748325 * GRP_LOG_DEBTINC1  +     0.15112909156485 *
64685     +        GRP_LOG_DEBTINC2  +   1.000000000341E-10 * GRP_LOG_DEBTINC3
64686     +          +     0.17873684560066 * GRP_LOG_DEBTINC4  +  1.0000000133514E-10 *
64687     +        GRP_LOG_DELINQ1  +     0.01539244480238 * GRP_LOG_DEROG1
64688     +          +     0.08868945875758 * GRP_LOG_LOAN2  +     0.06961668106695 *
64689     +        GRP_LOG_LOAN3  +     0.07046851132703 * GRP_LOG_LOAN4
64690     +          +  1.0000000133514E-10 * GRP_LOG_MORTDUE1  +  9.9999999600419E-11 *
64691     +        GRP_LOG_MORTDUE2  +   1.000000000341E-10 * GRP_LOG_MORTDUE3
64692     +          +  9.9999999600419E-11 * GRP_LOG_MORTDUE4  +     0.56263103121987 *
64693     +        GRP_LOG_VALUE1  +     0.16292857947328 * GRP_LOG_VALUE2
64694     +          +   1.000000000341E-10 * GRP_LOG_VALUE3  +  9.9999999600419E-11 *
64695     +        GRP_LOG_VALUE4  +  9.9999999600419E-11 * GRP_LOG_YOJ1
64696     +          +   1.000000000341E-10 * GRP_LOG_YOJ2  +   1.000000000341E-10 *
64697     +        GRP_LOG_YOJ3  +  1.0000000014252E-10 * GRP_LOG_YOJ4
64698     +          +  9.9999994396249E-11 * GRP_NINQ1  +  1.0000000025094E-10 *
64699     +        GRP_NINQ2  +     0.00148397298285 * GRP_NINQ3
64700     +          +     0.00024098412364 * GRP_REASON1  +     0.12246745134608 *
64701     +        GRP_REASON2 ;
MPRINT(EM_DIAGRAM):   H11 = 9.9999999600419E-11 * GRP_INDELINQ3 + 1.0000000133514E-10 *
GRP_INDEROG3 + 1.000000000341E-10 * GRP_JOB1 + 0.05008717989805 * GRP_JOB2 + 0.08023042969491
* GRP_JOB3 + 1.000000000341E-10 * GRP_JOB4 + 9.9999999600419E-11 * GRP_JOB5 + 0.1850031165278
* GRP_JOB6 + 0.0236044559772 * GRP_LOG_CLAGE1 + 0.18353369591421 * GRP_LOG_CLAGE2 +
0.04452662957432 * GRP_LOG_CLAGE3 + 0.17795522482642 * GRP_LOG_CLAGE4 + 0.13453214051882 *
GRP_LOG_CLNO1 + 9.999999992568E-11 * GRP_LOG_CLNO2 + 1.000000000341E-10 * GRP_LOG_CLNO3 +
1.000000000341E-10 * GRP_LOG_CLNO4 + 1.21265583748325 * GRP_LOG_DEBTINC1 + 0.15112909156485 *
GRP_LOG_DEBTINC2 + 1.000000000341E-10 * GRP_LOG_DEBTINC3 + 0.17873684560066 * GRP_LOG_DEBTINC4
+ 1.0000000133514E-10 * GRP_LOG_DELINQ1 + 0.01539244480238 * GRP_LOG_DEROG1 + 0.08868945875758
* GRP_LOG_LOAN2 + 0.06961668106695 * GRP_LOG_LOAN3 + 0.07046851132703 * GRP_LOG_LOAN4 +
1.0000000133514E-10 * GRP_LOG_MORTDUE1 + 9.9999999600419E-11 * GRP_LOG_MORTDUE2 +
1.000000000341E-10 * GRP_LOG_MORTDUE3 + 9.9999999600419E-11 * GRP_LOG_MORTDUE4 +
0.56263103121987 * GRP_LOG_VALUE1 + 0.16292857947328 * GRP_LOG_VALUE2 + 1.000000000341E-10 *
GRP_LOG_VALUE3 + 9.9999999600419E-11 * GRP_LOG_VALUE4 + 9.9999999600419E-11 * GRP_LOG_YOJ1 +
1.000000000341E-10 * GRP_LOG_YOJ2 + 1.000000000341E-10 * GRP_LOG_YOJ3 + 1.0000000014252E-10 *
GRP_LOG_YOJ4 + 9.9999994396249E-11 * GRP_NINQ1 + 1.0000000025094E-10 * GRP_NINQ2 +
0.00148397298285 * GRP_NINQ3 + 0.00024098412364 * GRP_REASON1 + 0.12246745134608 * GRP_REASON2
;
64702     +   H12  =     0.68984348905144 * GRP_INDELINQ3  +     0.45645864713083 *
64703     +        GRP_INDEROG3  +     0.38623080361566 * GRP_JOB1
64704     +          +   1.000000000341E-10 * GRP_JOB2  +  9.9999999600419E-11 * GRP_JOB3
64705     +          +     0.47476223931695 * GRP_JOB4  +     0.04143822312697 * GRP_JOB5
64706     +          +      0.0479561732778 * GRP_JOB6  +     0.13113144170919 *
64707     +        GRP_LOG_CLAGE1  +  1.0000000046778E-10 * GRP_LOG_CLAGE2
64708     +          +     0.00789278468195 * GRP_LOG_CLAGE3  +     0.00189921003957 *
64709     +        GRP_LOG_CLAGE4  +     0.14606928633448 * GRP_LOG_CLNO1
64710     +          +   1.000000000341E-10 * GRP_LOG_CLNO2  +     0.00607480435339 *
64711     +        GRP_LOG_CLNO3  +   1.000000000341E-10 * GRP_LOG_CLNO4
64712     +          +  9.9999999600419E-11 * GRP_LOG_DEBTINC1  +     0.12651297905145 *
64713     +        GRP_LOG_DEBTINC2  +     0.28836150522523 * GRP_LOG_DEBTINC3
64714     +          +     0.50134618658119 * GRP_LOG_DEBTINC4  +     0.28092464730212 *
64715     +        GRP_LOG_DELINQ1  +     0.57659304900786 * GRP_LOG_DEROG1
64716     +          +     0.23128310697574 * GRP_LOG_LOAN2  +     0.02567952367831 *
64717     +        GRP_LOG_LOAN3  +     0.04464000976882 * GRP_LOG_LOAN4
64718     +          +   1.000000000341E-10 * GRP_LOG_MORTDUE1  +     0.00018169062081 *
64719     +        GRP_LOG_MORTDUE2  +   1.000000000341E-10 * GRP_LOG_MORTDUE3
64720     +          +     0.24418316012477 * GRP_LOG_MORTDUE4  +   1.000000000341E-10 *
64721     +        GRP_LOG_VALUE1  +  1.0000000133514E-10 * GRP_LOG_VALUE2
64722     +          +  9.9999999600419E-11 * GRP_LOG_VALUE3  +     0.23833599903531 *
64723     +        GRP_LOG_VALUE4  +     0.16418753386424 * GRP_LOG_YOJ1
64724     +          +  9.9999999600419E-11 * GRP_LOG_YOJ2  +  9.9999999600419E-11 *
64725     +        GRP_LOG_YOJ3  +   9.999999997989E-11 * GRP_LOG_YOJ4
64726     +          +     0.20121728634519 * GRP_NINQ1  +      0.0824273831373 *
64727     +        GRP_NINQ2  +     0.43986255487106 * GRP_NINQ3
64728     +          +     0.01374331483548 * GRP_REASON1  +     0.35938352013272 *
64729     +        GRP_REASON2 ;
MPRINT(EM_DIAGRAM):   H12 = 0.68984348905144 * GRP_INDELINQ3 + 0.45645864713083 * GRP_INDEROG3
+ 0.38623080361566 * GRP_JOB1 + 1.000000000341E-10 * GRP_JOB2 + 9.9999999600419E-11 * GRP_JOB3
+ 0.47476223931695 * GRP_JOB4 + 0.04143822312697 * GRP_JOB5 + 0.0479561732778 * GRP_JOB6 +
0.13113144170919 * GRP_LOG_CLAGE1 + 1.0000000046778E-10 * GRP_LOG_CLAGE2 + 0.00789278468195 *
GRP_LOG_CLAGE3 + 0.00189921003957 * GRP_LOG_CLAGE4 + 0.14606928633448 * GRP_LOG_CLNO1 +
1.000000000341E-10 * GRP_LOG_CLNO2 + 0.00607480435339 * GRP_LOG_CLNO3 + 1.000000000341E-10 *
GRP_LOG_CLNO4 + 9.9999999600419E-11 * GRP_LOG_DEBTINC1 + 0.12651297905145 * GRP_LOG_DEBTINC2 +
0.28836150522523 * GRP_LOG_DEBTINC3 + 0.50134618658119 * GRP_LOG_DEBTINC4 + 0.28092464730212 *
GRP_LOG_DELINQ1 + 0.57659304900786 * GRP_LOG_DEROG1 + 0.23128310697574 * GRP_LOG_LOAN2 +
0.02567952367831 * GRP_LOG_LOAN3 + 0.04464000976882 * GRP_LOG_LOAN4 + 1.000000000341E-10 *
GRP_LOG_MORTDUE1 + 0.00018169062081 * GRP_LOG_MORTDUE2 + 1.000000000341E-10 * GRP_LOG_MORTDUE3
+ 0.24418316012477 * GRP_LOG_MORTDUE4 + 1.000000000341E-10 * GRP_LOG_VALUE1 +
1.0000000133514E-10 * GRP_LOG_VALUE2 + 9.9999999600419E-11 * GRP_LOG_VALUE3 + 0.23833599903531
* GRP_LOG_VALUE4 + 0.16418753386424 * GRP_LOG_YOJ1 + 9.9999999600419E-11 * GRP_LOG_YOJ2 +
9.9999999600419E-11 * GRP_LOG_YOJ3 + 9.999999997989E-11 * GRP_LOG_YOJ4 + 0.20121728634519 *
GRP_NINQ1 + 0.0824273831373 * GRP_NINQ2 + 0.43986255487106 * GRP_NINQ3 + 0.01374331483548 *
GRP_REASON1 + 0.35938352013272 * GRP_REASON2 ;
64730     +   H13  =  9.9999999600419E-11 * GRP_INDELINQ3  +  1.0000000133514E-10 *
64731     +        GRP_INDEROG3  +      0.0850787266472 * GRP_JOB1
64732     +          +     0.08697698049009 * GRP_JOB2  +     0.09487999844943 * GRP_JOB3
64733     +          +  1.0000000133514E-10 * GRP_JOB4  +   9.999999997989E-11 * GRP_JOB5
64734     +          +     0.09476311924983 * GRP_JOB6  +     0.09633628402877 *
64735     +        GRP_LOG_CLAGE1  +     0.40590180699987 * GRP_LOG_CLAGE2
64736     +          +     0.56243410114358 * GRP_LOG_CLAGE3  +     0.09813793418579 *
64737     +        GRP_LOG_CLAGE4  +     0.00214687772347 * GRP_LOG_CLNO1
64738     +          +     0.09363855516409 * GRP_LOG_CLNO2  +  9.9999999600419E-11 *
64739     +        GRP_LOG_CLNO3  +   1.000000000341E-10 * GRP_LOG_CLNO4
64740     +          +     0.43543098237579 * GRP_LOG_DEBTINC1  +     0.11593382607123 *
64741     +        GRP_LOG_DEBTINC2  +   1.000000000341E-10 * GRP_LOG_DEBTINC3
64742     +          +  9.9999999600419E-11 * GRP_LOG_DEBTINC4  +     0.21453998748928 *
64743     +        GRP_LOG_DELINQ1  +     0.13739316440012 * GRP_LOG_DEROG1
64744     +          +  9.9999999600419E-11 * GRP_LOG_LOAN2  +  1.0000000133514E-10 *
64745     +        GRP_LOG_LOAN3  +     0.09794806265167 * GRP_LOG_LOAN4
64746     +          +     0.17076415843403 * GRP_LOG_MORTDUE1  +     0.35923992103045 *
64747     +        GRP_LOG_MORTDUE2  +     0.06888684238484 * GRP_LOG_MORTDUE3
64748     +          +     0.19287015294738 * GRP_LOG_MORTDUE4  +     0.33179247749502 *
64749     +        GRP_LOG_VALUE1  +     0.17642957444055 * GRP_LOG_VALUE2
64750     +          +     0.09863773992669 * GRP_LOG_VALUE3  +  9.9999999993443E-11 *
64751     +        GRP_LOG_VALUE4  +  1.0000000133514E-10 * GRP_LOG_YOJ1
64752     +          +     0.13056368530899 * GRP_LOG_YOJ2  +     0.23263608717254 *
64753     +        GRP_LOG_YOJ3  +     0.05960527277735 * GRP_LOG_YOJ4
64754     +          +  9.9999999600419E-11 * GRP_NINQ1  +   1.000000000341E-10 *
64755     +        GRP_NINQ2  +     0.06885844227348 * GRP_NINQ3
64756     +          +     0.03011752807588 * GRP_REASON1  +     0.15223826213802 *
64757     +        GRP_REASON2 ;
MPRINT(EM_DIAGRAM):   H13 = 9.9999999600419E-11 * GRP_INDELINQ3 + 1.0000000133514E-10 *
GRP_INDEROG3 + 0.0850787266472 * GRP_JOB1 + 0.08697698049009 * GRP_JOB2 + 0.09487999844943 *
GRP_JOB3 + 1.0000000133514E-10 * GRP_JOB4 + 9.999999997989E-11 * GRP_JOB5 + 0.09476311924983 *
GRP_JOB6 + 0.09633628402877 * GRP_LOG_CLAGE1 + 0.40590180699987 * GRP_LOG_CLAGE2 +
0.56243410114358 * GRP_LOG_CLAGE3 + 0.09813793418579 * GRP_LOG_CLAGE4 + 0.00214687772347 *
GRP_LOG_CLNO1 + 0.09363855516409 * GRP_LOG_CLNO2 + 9.9999999600419E-11 * GRP_LOG_CLNO3 +
1.000000000341E-10 * GRP_LOG_CLNO4 + 0.43543098237579 * GRP_LOG_DEBTINC1 + 0.11593382607123 *
GRP_LOG_DEBTINC2 + 1.000000000341E-10 * GRP_LOG_DEBTINC3 + 9.9999999600419E-11 *
GRP_LOG_DEBTINC4 + 0.21453998748928 * GRP_LOG_DELINQ1 + 0.13739316440012 * GRP_LOG_DEROG1 +
9.9999999600419E-11 * GRP_LOG_LOAN2 + 1.0000000133514E-10 * GRP_LOG_LOAN3 + 0.09794806265167 *
GRP_LOG_LOAN4 + 0.17076415843403 * GRP_LOG_MORTDUE1 + 0.35923992103045 * GRP_LOG_MORTDUE2 +
0.06888684238484 * GRP_LOG_MORTDUE3 + 0.19287015294738 * GRP_LOG_MORTDUE4 + 0.33179247749502 *
GRP_LOG_VALUE1 + 0.17642957444055 * GRP_LOG_VALUE2 + 0.09863773992669 * GRP_LOG_VALUE3 +
9.9999999993443E-11 * GRP_LOG_VALUE4 + 1.0000000133514E-10 * GRP_LOG_YOJ1 + 0.13056368530899 *
GRP_LOG_YOJ2 + 0.23263608717254 * GRP_LOG_YOJ3 + 0.05960527277735 * GRP_LOG_YOJ4 +
9.9999999600419E-11 * GRP_NINQ1 + 1.000000000341E-10 * GRP_NINQ2 + 0.06885844227348 *
GRP_NINQ3 + 0.03011752807588 * GRP_REASON1 + 0.15223826213802 * GRP_REASON2 ;
64758     +   H11  =     0.40334970202873 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.40334970202873 + H11 ;
64759     +   H12  =    -0.03605065921952 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.03605065921952 + H12 ;
64760     +   H13  =    -1.42308543156766 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.42308543156766 + H13 ;
64761     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
64762     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
64763     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
64764     +END;
MPRINT(EM_DIAGRAM):   END;
64765     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
64766     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
64767     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
64768     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
64769     +END;
MPRINT(EM_DIAGRAM):   END;
64770     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
64771     +*** Writing the Node BAD ;
MPRINT(EM_DIAGRAM):   *** Writing the Node BAD ;
64772     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
64773     +
64774     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
64775     +drop BAD1 BAD0 ;
MPRINT(EM_DIAGRAM):   drop BAD1 BAD0 ;
64776     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
64777     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
64778     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
64779     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
64780     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
64781     +   BAD1 = .;
MPRINT(EM_DIAGRAM):   BAD1 = .;
64782     +   BAD0 = .;
MPRINT(EM_DIAGRAM):   BAD0 = .;
64783     +end;
MPRINT(EM_DIAGRAM):   end;
64784     +else do;
MPRINT(EM_DIAGRAM):   else do;
64785     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
64786     +      BAD1 = 0;
MPRINT(EM_DIAGRAM):   BAD1 = 0;
64787     +      BAD0 = 1;
MPRINT(EM_DIAGRAM):   BAD0 = 1;
64788     +   end;
MPRINT(EM_DIAGRAM):   end;
64789     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
64790     +      BAD1 = 1;
MPRINT(EM_DIAGRAM):   BAD1 = 1;
64791     +      BAD0 = 0;
MPRINT(EM_DIAGRAM):   BAD0 = 0;
64792     +   end;
MPRINT(EM_DIAGRAM):   end;
64793     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64794     +      BAD1 = .;
MPRINT(EM_DIAGRAM):   BAD1 = .;
64795     +      BAD0 = .;
MPRINT(EM_DIAGRAM):   BAD0 = .;
64796     +   end;
MPRINT(EM_DIAGRAM):   end;
64797     +end;
MPRINT(EM_DIAGRAM):   end;
64798     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
64799     +   P_BAD1  =    -2.63470208583197 * H11  +     1.86742307499411 * H12
64800     +          +    -1.33116147749524 * H13 ;
MPRINT(EM_DIAGRAM):   P_BAD1 = -2.63470208583197 * H11 + 1.86742307499411 * H12 +
-1.33116147749524 * H13 ;
64801     +   P_BAD1  =    -0.33697759343629 + P_BAD1 ;
MPRINT(EM_DIAGRAM):   P_BAD1 = -0.33697759343629 + P_BAD1 ;
64802     +   P_BAD0  = 0;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0;
64803     +   _MAX_ = MAX (P_BAD1 , P_BAD0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_BAD1 , P_BAD0 );
64804     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
64805     +   P_BAD1  = EXP(P_BAD1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_BAD1 = EXP(P_BAD1 - _MAX_);
64806     +   _SUM_ = _SUM_ + P_BAD1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD1 ;
64807     +   P_BAD0  = EXP(P_BAD0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_BAD0 = EXP(P_BAD0 - _MAX_);
64808     +   _SUM_ = _SUM_ + P_BAD0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD0 ;
64809     +   P_BAD1  = P_BAD1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_BAD1 = P_BAD1 / _SUM_;
64810     +   P_BAD0  = P_BAD0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_BAD0 = P_BAD0 / _SUM_;
64811     +END;
MPRINT(EM_DIAGRAM):   END;
64812     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
64813     +   P_BAD1  = .;
MPRINT(EM_DIAGRAM):   P_BAD1 = .;
64814     +   P_BAD0  = .;
MPRINT(EM_DIAGRAM):   P_BAD0 = .;
64815     +END;
MPRINT(EM_DIAGRAM):   END;
64816     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
64817     +   P_BAD1  =     0.19941225860621;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.19941225860621;
64818     +   P_BAD0  =     0.80058774139378;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.80058774139378;
64819     +END;
MPRINT(EM_DIAGRAM):   END;
64820     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
64821     +*** Writing the Residuals  of the Node BAD ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node BAD ;
64822     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
64823     +IF MISSING( BAD1 ) THEN R_BAD1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD1 ) THEN R_BAD1 = . ;
64824     +ELSE R_BAD1  = BAD1  - P_BAD1 ;
MPRINT(EM_DIAGRAM):   ELSE R_BAD1 = BAD1 - P_BAD1 ;
64825     +IF MISSING( BAD0 ) THEN R_BAD0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD0 ) THEN R_BAD0 = . ;
64826     +ELSE R_BAD0  = BAD0  - P_BAD0 ;
MPRINT(EM_DIAGRAM):   ELSE R_BAD0 = BAD0 - P_BAD0 ;
64827     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
64828     +*** Writing the I_BAD  AND U_BAD ;
MPRINT(EM_DIAGRAM):   *** Writing the I_BAD AND U_BAD ;
64829     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
64830     +_MAXP_ = P_BAD1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD1 ;
64831     +I_BAD  = "1           " ;
MPRINT(EM_DIAGRAM):   I_BAD = "1           " ;
64832     +U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
64833     +IF( _MAXP_ LT P_BAD0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_BAD0 ) THEN DO;
64834     +   _MAXP_ = P_BAD0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD0 ;
64835     +   I_BAD  = "0           " ;
MPRINT(EM_DIAGRAM):   I_BAD = "0           " ;
64836     +   U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
64837     +END;
MPRINT(EM_DIAGRAM):   END;
64838     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
64839     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
64840     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
64841     +drop
64842     +H11
64843     +H12
64844     +H13
64845     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
64846      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.11 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
64847      quit;
64848      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
64849      filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My
64849    ! Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64850      *------------------------------------------------------------*;
64851      * Neural: Scoring TEST data;
64852      *------------------------------------------------------------*;
64853      data EMWS1.Neural_TEST
64854      / view=EMWS1.Neural_TEST
64855      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_TEST / view=EMWS1.Neural_TEST ;
64856      set EMWS1.BINNING_TEST
64857      ;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_TEST ;
64858      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\JMMORR01\CIS 445\Tutorial 2\My
      Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
64859     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
64860     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
64861     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
64862     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
64863     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
64864     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
64865     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
64866     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
64867     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
64868     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
64869     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
64870     +LENGTH _WARN_ $4
64871     +      F_BAD  $ 12
64872     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_BAD $ 12 ;
64873     +      label GRP_INDELINQ3 = 'Dummy: GRP_INDELINQ=3' ;
MPRINT(EM_DIAGRAM):   label GRP_INDELINQ3 = 'Dummy: GRP_INDELINQ=3' ;
64874     +
64875     +      label GRP_INDEROG3 = 'Dummy: GRP_INDEROG=3' ;
MPRINT(EM_DIAGRAM):   label GRP_INDEROG3 = 'Dummy: GRP_INDEROG=3' ;
64876     +
64877     +      label GRP_JOB1 = 'Dummy: GRP_JOB=1' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB1 = 'Dummy: GRP_JOB=1' ;
64878     +
64879     +      label GRP_JOB2 = 'Dummy: GRP_JOB=2' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB2 = 'Dummy: GRP_JOB=2' ;
64880     +
64881     +      label GRP_JOB3 = 'Dummy: GRP_JOB=3' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB3 = 'Dummy: GRP_JOB=3' ;
64882     +
64883     +      label GRP_JOB4 = 'Dummy: GRP_JOB=4' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB4 = 'Dummy: GRP_JOB=4' ;
64884     +
64885     +      label GRP_JOB5 = 'Dummy: GRP_JOB=5' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB5 = 'Dummy: GRP_JOB=5' ;
64886     +
64887     +      label GRP_JOB6 = 'Dummy: GRP_JOB=6' ;
MPRINT(EM_DIAGRAM):   label GRP_JOB6 = 'Dummy: GRP_JOB=6' ;
64888     +
64889     +      label GRP_LOG_CLAGE1 = 'Dummy: GRP_LOG_CLAGE=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLAGE1 = 'Dummy: GRP_LOG_CLAGE=1' ;
64890     +
64891     +      label GRP_LOG_CLAGE2 = 'Dummy: GRP_LOG_CLAGE=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLAGE2 = 'Dummy: GRP_LOG_CLAGE=2' ;
64892     +
64893     +      label GRP_LOG_CLAGE3 = 'Dummy: GRP_LOG_CLAGE=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLAGE3 = 'Dummy: GRP_LOG_CLAGE=3' ;
64894     +
64895     +      label GRP_LOG_CLAGE4 = 'Dummy: GRP_LOG_CLAGE=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLAGE4 = 'Dummy: GRP_LOG_CLAGE=4' ;
64896     +
64897     +      label GRP_LOG_CLNO1 = 'Dummy: GRP_LOG_CLNO=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLNO1 = 'Dummy: GRP_LOG_CLNO=1' ;
64898     +
64899     +      label GRP_LOG_CLNO2 = 'Dummy: GRP_LOG_CLNO=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLNO2 = 'Dummy: GRP_LOG_CLNO=2' ;
64900     +
64901     +      label GRP_LOG_CLNO3 = 'Dummy: GRP_LOG_CLNO=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLNO3 = 'Dummy: GRP_LOG_CLNO=3' ;
64902     +
64903     +      label GRP_LOG_CLNO4 = 'Dummy: GRP_LOG_CLNO=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_CLNO4 = 'Dummy: GRP_LOG_CLNO=4' ;
64904     +
64905     +      label GRP_LOG_DEBTINC1 = 'Dummy: GRP_LOG_DEBTINC=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEBTINC1 = 'Dummy: GRP_LOG_DEBTINC=1' ;
64906     +
64907     +      label GRP_LOG_DEBTINC2 = 'Dummy: GRP_LOG_DEBTINC=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEBTINC2 = 'Dummy: GRP_LOG_DEBTINC=2' ;
64908     +
64909     +      label GRP_LOG_DEBTINC3 = 'Dummy: GRP_LOG_DEBTINC=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEBTINC3 = 'Dummy: GRP_LOG_DEBTINC=3' ;
64910     +
64911     +      label GRP_LOG_DEBTINC4 = 'Dummy: GRP_LOG_DEBTINC=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEBTINC4 = 'Dummy: GRP_LOG_DEBTINC=4' ;
64912     +
64913     +      label GRP_LOG_DELINQ1 = 'Dummy: GRP_LOG_DELINQ=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DELINQ1 = 'Dummy: GRP_LOG_DELINQ=1' ;
64914     +
64915     +      label GRP_LOG_DEROG1 = 'Dummy: GRP_LOG_DEROG=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_DEROG1 = 'Dummy: GRP_LOG_DEROG=1' ;
64916     +
64917     +      label GRP_LOG_LOAN2 = 'Dummy: GRP_LOG_LOAN=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_LOAN2 = 'Dummy: GRP_LOG_LOAN=2' ;
64918     +
64919     +      label GRP_LOG_LOAN3 = 'Dummy: GRP_LOG_LOAN=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_LOAN3 = 'Dummy: GRP_LOG_LOAN=3' ;
64920     +
64921     +      label GRP_LOG_LOAN4 = 'Dummy: GRP_LOG_LOAN=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_LOAN4 = 'Dummy: GRP_LOG_LOAN=4' ;
64922     +
64923     +      label GRP_LOG_MORTDUE1 = 'Dummy: GRP_LOG_MORTDUE=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_MORTDUE1 = 'Dummy: GRP_LOG_MORTDUE=1' ;
64924     +
64925     +      label GRP_LOG_MORTDUE2 = 'Dummy: GRP_LOG_MORTDUE=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_MORTDUE2 = 'Dummy: GRP_LOG_MORTDUE=2' ;
64926     +
64927     +      label GRP_LOG_MORTDUE3 = 'Dummy: GRP_LOG_MORTDUE=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_MORTDUE3 = 'Dummy: GRP_LOG_MORTDUE=3' ;
64928     +
64929     +      label GRP_LOG_MORTDUE4 = 'Dummy: GRP_LOG_MORTDUE=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_MORTDUE4 = 'Dummy: GRP_LOG_MORTDUE=4' ;
64930     +
64931     +      label GRP_LOG_VALUE1 = 'Dummy: GRP_LOG_VALUE=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_VALUE1 = 'Dummy: GRP_LOG_VALUE=1' ;
64932     +
64933     +      label GRP_LOG_VALUE2 = 'Dummy: GRP_LOG_VALUE=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_VALUE2 = 'Dummy: GRP_LOG_VALUE=2' ;
64934     +
64935     +      label GRP_LOG_VALUE3 = 'Dummy: GRP_LOG_VALUE=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_VALUE3 = 'Dummy: GRP_LOG_VALUE=3' ;
64936     +
64937     +      label GRP_LOG_VALUE4 = 'Dummy: GRP_LOG_VALUE=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_VALUE4 = 'Dummy: GRP_LOG_VALUE=4' ;
64938     +
64939     +      label GRP_LOG_YOJ1 = 'Dummy: GRP_LOG_YOJ=1' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_YOJ1 = 'Dummy: GRP_LOG_YOJ=1' ;
64940     +
64941     +      label GRP_LOG_YOJ2 = 'Dummy: GRP_LOG_YOJ=2' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_YOJ2 = 'Dummy: GRP_LOG_YOJ=2' ;
64942     +
64943     +      label GRP_LOG_YOJ3 = 'Dummy: GRP_LOG_YOJ=3' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_YOJ3 = 'Dummy: GRP_LOG_YOJ=3' ;
64944     +
64945     +      label GRP_LOG_YOJ4 = 'Dummy: GRP_LOG_YOJ=4' ;
MPRINT(EM_DIAGRAM):   label GRP_LOG_YOJ4 = 'Dummy: GRP_LOG_YOJ=4' ;
64946     +
64947     +      label GRP_NINQ1 = 'Dummy: GRP_NINQ=1' ;
MPRINT(EM_DIAGRAM):   label GRP_NINQ1 = 'Dummy: GRP_NINQ=1' ;
64948     +
64949     +      label GRP_NINQ2 = 'Dummy: GRP_NINQ=2' ;
MPRINT(EM_DIAGRAM):   label GRP_NINQ2 = 'Dummy: GRP_NINQ=2' ;
64950     +
64951     +      label GRP_NINQ3 = 'Dummy: GRP_NINQ=3' ;
MPRINT(EM_DIAGRAM):   label GRP_NINQ3 = 'Dummy: GRP_NINQ=3' ;
64952     +
64953     +      label GRP_REASON1 = 'Dummy: GRP_REASON=1' ;
MPRINT(EM_DIAGRAM):   label GRP_REASON1 = 'Dummy: GRP_REASON=1' ;
64954     +
64955     +      label GRP_REASON2 = 'Dummy: GRP_REASON=2' ;
MPRINT(EM_DIAGRAM):   label GRP_REASON2 = 'Dummy: GRP_REASON=2' ;
64956     +
64957     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
64958     +
64959     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
64960     +
64961     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
64962     +
64963     +      label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
64964     +
64965     +      label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
64966     +
64967     +      label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
64968     +
64969     +      label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
64970     +
64971     +      label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
64972     +
64973     +      label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
64974     +
64975     +      label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
64976     +
64977     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
64978     +
64979     +*** Generate dummy variables for GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDELINQ ;
64980     +drop GRP_INDELINQ3 ;
MPRINT(EM_DIAGRAM):   drop GRP_INDELINQ3 ;
64981     +if missing( GRP_INDELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDELINQ ) then do;
64982     +   GRP_INDELINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = .;
64983     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
64984     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
64985     +end;
MPRINT(EM_DIAGRAM):   end;
64986     +else do;
MPRINT(EM_DIAGRAM):   else do;
64987     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
64988     +   _dm12 = put( GRP_INDELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDELINQ , BEST12. );
64989     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
64990     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
64991     +      GRP_INDELINQ3 = -1;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = -1;
64992     +   end;
MPRINT(EM_DIAGRAM):   end;
64993     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
64994     +      GRP_INDELINQ3 = 1;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = 1;
64995     +   end;
MPRINT(EM_DIAGRAM):   end;
64996     +   else do;
MPRINT(EM_DIAGRAM):   else do;
64997     +      GRP_INDELINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = .;
64998     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
64999     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65000     +   end;
MPRINT(EM_DIAGRAM):   end;
65001     +end;
MPRINT(EM_DIAGRAM):   end;
65002     +
65003     +*** Generate dummy variables for GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDEROG ;
65004     +drop GRP_INDEROG3 ;
MPRINT(EM_DIAGRAM):   drop GRP_INDEROG3 ;
65005     +if missing( GRP_INDEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDEROG ) then do;
65006     +   GRP_INDEROG3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDEROG3 = .;
65007     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65008     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65009     +end;
MPRINT(EM_DIAGRAM):   end;
65010     +else do;
MPRINT(EM_DIAGRAM):   else do;
65011     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65012     +   _dm12 = put( GRP_INDEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDEROG , BEST12. );
65013     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65014     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
65015     +      GRP_INDEROG3 = -1;
MPRINT(EM_DIAGRAM):   GRP_INDEROG3 = -1;
65016     +   end;
MPRINT(EM_DIAGRAM):   end;
65017     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
65018     +      GRP_INDEROG3 = 1;
MPRINT(EM_DIAGRAM):   GRP_INDEROG3 = 1;
65019     +   end;
MPRINT(EM_DIAGRAM):   end;
65020     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65021     +      GRP_INDEROG3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDEROG3 = .;
65022     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65023     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65024     +   end;
MPRINT(EM_DIAGRAM):   end;
65025     +end;
MPRINT(EM_DIAGRAM):   end;
65026     +
65027     +*** Generate dummy variables for GRP_JOB ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_JOB ;
65028     +drop GRP_JOB1 GRP_JOB2 GRP_JOB3 GRP_JOB4 GRP_JOB5 GRP_JOB6 ;
MPRINT(EM_DIAGRAM):   drop GRP_JOB1 GRP_JOB2 GRP_JOB3 GRP_JOB4 GRP_JOB5 GRP_JOB6 ;
65029     +if missing( GRP_JOB ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_JOB ) then do;
65030     +   GRP_JOB1 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = .;
65031     +   GRP_JOB2 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = .;
65032     +   GRP_JOB3 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = .;
65033     +   GRP_JOB4 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = .;
65034     +   GRP_JOB5 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = .;
65035     +   GRP_JOB6 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = .;
65036     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65037     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65038     +end;
MPRINT(EM_DIAGRAM):   end;
65039     +else do;
MPRINT(EM_DIAGRAM):   else do;
65040     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65041     +   _dm12 = put( GRP_JOB , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_JOB , BEST12. );
65042     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65043     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
65044     +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
65045     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
65046     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
65047     +            GRP_JOB1 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = -0.46770717334674;
65048     +            GRP_JOB2 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = -0.46770717334674;
65049     +            GRP_JOB3 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = -0.46770717334674;
65050     +            GRP_JOB4 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = -0.46770717334674;
65051     +            GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
65052     +            GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
65053     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65054     +         end;
MPRINT(EM_DIAGRAM):   end;
65055     +         else do;
MPRINT(EM_DIAGRAM):   else do;
65056     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
65057     +               GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
65058     +               GRP_JOB2 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = -0.46770717334674;
65059     +               GRP_JOB3 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = -0.46770717334674;
65060     +               GRP_JOB4 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = -0.46770717334674;
65061     +               GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
65062     +               GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
65063     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65064     +            end;
MPRINT(EM_DIAGRAM):   end;
65065     +         end;
MPRINT(EM_DIAGRAM):   end;
65066     +      end;
MPRINT(EM_DIAGRAM):   end;
65067     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65068     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
65069     +            GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
65070     +            GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
65071     +            GRP_JOB3 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = -0.46770717334674;
65072     +            GRP_JOB4 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = -0.46770717334674;
65073     +            GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
65074     +            GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
65075     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65076     +         end;
MPRINT(EM_DIAGRAM):   end;
65077     +         else do;
MPRINT(EM_DIAGRAM):   else do;
65078     +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
65079     +               GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
65080     +               GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
65081     +               GRP_JOB3 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = 0.46770717334674;
65082     +               GRP_JOB4 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = -0.46770717334674;
65083     +               GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
65084     +               GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
65085     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65086     +            end;
MPRINT(EM_DIAGRAM):   end;
65087     +         end;
MPRINT(EM_DIAGRAM):   end;
65088     +      end;
MPRINT(EM_DIAGRAM):   end;
65089     +   end;
MPRINT(EM_DIAGRAM):   end;
65090     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65091     +      if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
65092     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
65093     +            GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
65094     +            GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
65095     +            GRP_JOB3 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = 0.46770717334674;
65096     +            GRP_JOB4 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = 0.46770717334674;
65097     +            GRP_JOB5 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = -0.46770717334674;
65098     +            GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
65099     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65100     +         end;
MPRINT(EM_DIAGRAM):   end;
65101     +         else do;
MPRINT(EM_DIAGRAM):   else do;
65102     +            if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
65103     +               GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
65104     +               GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
65105     +               GRP_JOB3 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = 0.46770717334674;
65106     +               GRP_JOB4 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = 0.46770717334674;
65107     +               GRP_JOB5 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = 0.46770717334674;
65108     +               GRP_JOB6 = -0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = -0.46770717334674;
65109     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65110     +            end;
MPRINT(EM_DIAGRAM):   end;
65111     +         end;
MPRINT(EM_DIAGRAM):   end;
65112     +      end;
MPRINT(EM_DIAGRAM):   end;
65113     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65114     +         if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
65115     +            GRP_JOB1 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = 0.46770717334674;
65116     +            GRP_JOB2 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = 0.46770717334674;
65117     +            GRP_JOB3 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = 0.46770717334674;
65118     +            GRP_JOB4 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = 0.46770717334674;
65119     +            GRP_JOB5 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = 0.46770717334674;
65120     +            GRP_JOB6 = 0.46770717334674;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = 0.46770717334674;
65121     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65122     +         end;
MPRINT(EM_DIAGRAM):   end;
65123     +      end;
MPRINT(EM_DIAGRAM):   end;
65124     +   end;
MPRINT(EM_DIAGRAM):   end;
65125     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
65126     +      GRP_JOB1 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB1 = .;
65127     +      GRP_JOB2 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB2 = .;
65128     +      GRP_JOB3 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB3 = .;
65129     +      GRP_JOB4 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB4 = .;
65130     +      GRP_JOB5 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB5 = .;
65131     +      GRP_JOB6 = .;
MPRINT(EM_DIAGRAM):   GRP_JOB6 = .;
65132     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65133     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65134     +   end;
MPRINT(EM_DIAGRAM):   end;
65135     +end;
MPRINT(EM_DIAGRAM):   end;
65136     +
65137     +*** Generate dummy variables for GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLAGE ;
65138     +drop GRP_LOG_CLAGE1 GRP_LOG_CLAGE2 GRP_LOG_CLAGE3 GRP_LOG_CLAGE4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_CLAGE1 GRP_LOG_CLAGE2 GRP_LOG_CLAGE3 GRP_LOG_CLAGE4 ;
65139     +if missing( GRP_LOG_CLAGE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLAGE ) then do;
65140     +   GRP_LOG_CLAGE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = .;
65141     +   GRP_LOG_CLAGE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = .;
65142     +   GRP_LOG_CLAGE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = .;
65143     +   GRP_LOG_CLAGE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = .;
65144     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65145     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65146     +end;
MPRINT(EM_DIAGRAM):   end;
65147     +else do;
MPRINT(EM_DIAGRAM):   else do;
65148     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65149     +   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
65150     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65151     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
65152     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
65153     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
65154     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
65155     +            GRP_LOG_CLAGE1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = -0.55901699437494;
65156     +            GRP_LOG_CLAGE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = -0.55901699437494;
65157     +            GRP_LOG_CLAGE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = -0.55901699437494;
65158     +            GRP_LOG_CLAGE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = -0.55901699437494;
65159     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65160     +         end;
MPRINT(EM_DIAGRAM):   end;
65161     +         else do;
MPRINT(EM_DIAGRAM):   else do;
65162     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
65163     +               GRP_LOG_CLAGE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = 0.55901699437494;
65164     +               GRP_LOG_CLAGE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = -0.55901699437494;
65165     +               GRP_LOG_CLAGE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = -0.55901699437494;
65166     +               GRP_LOG_CLAGE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = -0.55901699437494;
65167     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65168     +            end;
MPRINT(EM_DIAGRAM):   end;
65169     +         end;
MPRINT(EM_DIAGRAM):   end;
65170     +      end;
MPRINT(EM_DIAGRAM):   end;
65171     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65172     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
65173     +            GRP_LOG_CLAGE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = 0.55901699437494;
65174     +            GRP_LOG_CLAGE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = 0.55901699437494;
65175     +            GRP_LOG_CLAGE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = -0.55901699437494;
65176     +            GRP_LOG_CLAGE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = -0.55901699437494;
65177     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65178     +         end;
MPRINT(EM_DIAGRAM):   end;
65179     +      end;
MPRINT(EM_DIAGRAM):   end;
65180     +   end;
MPRINT(EM_DIAGRAM):   end;
65181     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65182     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
65183     +         GRP_LOG_CLAGE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = 0.55901699437494;
65184     +         GRP_LOG_CLAGE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = 0.55901699437494;
65185     +         GRP_LOG_CLAGE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = 0.55901699437494;
65186     +         GRP_LOG_CLAGE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = -0.55901699437494;
65187     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65188     +      end;
MPRINT(EM_DIAGRAM):   end;
65189     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65190     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
65191     +            GRP_LOG_CLAGE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = 0.55901699437494;
65192     +            GRP_LOG_CLAGE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = 0.55901699437494;
65193     +            GRP_LOG_CLAGE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = 0.55901699437494;
65194     +            GRP_LOG_CLAGE4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = 0.55901699437494;
65195     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65196     +         end;
MPRINT(EM_DIAGRAM):   end;
65197     +      end;
MPRINT(EM_DIAGRAM):   end;
65198     +   end;
MPRINT(EM_DIAGRAM):   end;
65199     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
65200     +      GRP_LOG_CLAGE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE1 = .;
65201     +      GRP_LOG_CLAGE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE2 = .;
65202     +      GRP_LOG_CLAGE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE3 = .;
65203     +      GRP_LOG_CLAGE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE4 = .;
65204     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65205     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65206     +   end;
MPRINT(EM_DIAGRAM):   end;
65207     +end;
MPRINT(EM_DIAGRAM):   end;
65208     +
65209     +*** Generate dummy variables for GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLNO ;
65210     +drop GRP_LOG_CLNO1 GRP_LOG_CLNO2 GRP_LOG_CLNO3 GRP_LOG_CLNO4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_CLNO1 GRP_LOG_CLNO2 GRP_LOG_CLNO3 GRP_LOG_CLNO4 ;
65211     +if missing( GRP_LOG_CLNO ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLNO ) then do;
65212     +   GRP_LOG_CLNO1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = .;
65213     +   GRP_LOG_CLNO2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = .;
65214     +   GRP_LOG_CLNO3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = .;
65215     +   GRP_LOG_CLNO4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = .;
65216     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65217     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65218     +end;
MPRINT(EM_DIAGRAM):   end;
65219     +else do;
MPRINT(EM_DIAGRAM):   else do;
65220     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65221     +   _dm12 = put( GRP_LOG_CLNO , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLNO , BEST12. );
65222     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65223     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
65224     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
65225     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
65226     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
65227     +            GRP_LOG_CLNO1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = -0.55901699437494;
65228     +            GRP_LOG_CLNO2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = -0.55901699437494;
65229     +            GRP_LOG_CLNO3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = -0.55901699437494;
65230     +            GRP_LOG_CLNO4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = -0.55901699437494;
65231     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65232     +         end;
MPRINT(EM_DIAGRAM):   end;
65233     +         else do;
MPRINT(EM_DIAGRAM):   else do;
65234     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
65235     +               GRP_LOG_CLNO1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = 0.55901699437494;
65236     +               GRP_LOG_CLNO2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = -0.55901699437494;
65237     +               GRP_LOG_CLNO3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = -0.55901699437494;
65238     +               GRP_LOG_CLNO4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = -0.55901699437494;
65239     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65240     +            end;
MPRINT(EM_DIAGRAM):   end;
65241     +         end;
MPRINT(EM_DIAGRAM):   end;
65242     +      end;
MPRINT(EM_DIAGRAM):   end;
65243     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65244     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
65245     +            GRP_LOG_CLNO1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = 0.55901699437494;
65246     +            GRP_LOG_CLNO2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = 0.55901699437494;
65247     +            GRP_LOG_CLNO3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = -0.55901699437494;
65248     +            GRP_LOG_CLNO4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = -0.55901699437494;
65249     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65250     +         end;
MPRINT(EM_DIAGRAM):   end;
65251     +      end;
MPRINT(EM_DIAGRAM):   end;
65252     +   end;
MPRINT(EM_DIAGRAM):   end;
65253     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65254     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
65255     +         GRP_LOG_CLNO1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = 0.55901699437494;
65256     +         GRP_LOG_CLNO2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = 0.55901699437494;
65257     +         GRP_LOG_CLNO3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = 0.55901699437494;
65258     +         GRP_LOG_CLNO4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = -0.55901699437494;
65259     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65260     +      end;
MPRINT(EM_DIAGRAM):   end;
65261     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65262     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
65263     +            GRP_LOG_CLNO1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = 0.55901699437494;
65264     +            GRP_LOG_CLNO2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = 0.55901699437494;
65265     +            GRP_LOG_CLNO3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = 0.55901699437494;
65266     +            GRP_LOG_CLNO4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = 0.55901699437494;
65267     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65268     +         end;
MPRINT(EM_DIAGRAM):   end;
65269     +      end;
MPRINT(EM_DIAGRAM):   end;
65270     +   end;
MPRINT(EM_DIAGRAM):   end;
65271     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
65272     +      GRP_LOG_CLNO1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO1 = .;
65273     +      GRP_LOG_CLNO2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO2 = .;
65274     +      GRP_LOG_CLNO3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO3 = .;
65275     +      GRP_LOG_CLNO4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO4 = .;
65276     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65277     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65278     +   end;
MPRINT(EM_DIAGRAM):   end;
65279     +end;
MPRINT(EM_DIAGRAM):   end;
65280     +
65281     +*** Generate dummy variables for GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEBTINC ;
65282     +drop GRP_LOG_DEBTINC1 GRP_LOG_DEBTINC2 GRP_LOG_DEBTINC3 GRP_LOG_DEBTINC4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_DEBTINC1 GRP_LOG_DEBTINC2 GRP_LOG_DEBTINC3 GRP_LOG_DEBTINC4
;
65283     +if missing( GRP_LOG_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEBTINC ) then do;
65284     +   GRP_LOG_DEBTINC1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = .;
65285     +   GRP_LOG_DEBTINC2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = .;
65286     +   GRP_LOG_DEBTINC3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = .;
65287     +   GRP_LOG_DEBTINC4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = .;
65288     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65289     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65290     +end;
MPRINT(EM_DIAGRAM):   end;
65291     +else do;
MPRINT(EM_DIAGRAM):   else do;
65292     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65293     +   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
65294     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65295     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
65296     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
65297     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
65298     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
65299     +            GRP_LOG_DEBTINC1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = -0.55901699437494;
65300     +            GRP_LOG_DEBTINC2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = -0.55901699437494;
65301     +            GRP_LOG_DEBTINC3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = -0.55901699437494;
65302     +            GRP_LOG_DEBTINC4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = -0.55901699437494;
65303     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65304     +         end;
MPRINT(EM_DIAGRAM):   end;
65305     +         else do;
MPRINT(EM_DIAGRAM):   else do;
65306     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
65307     +               GRP_LOG_DEBTINC1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = 0.55901699437494;
65308     +               GRP_LOG_DEBTINC2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = -0.55901699437494;
65309     +               GRP_LOG_DEBTINC3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = -0.55901699437494;
65310     +               GRP_LOG_DEBTINC4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = -0.55901699437494;
65311     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65312     +            end;
MPRINT(EM_DIAGRAM):   end;
65313     +         end;
MPRINT(EM_DIAGRAM):   end;
65314     +      end;
MPRINT(EM_DIAGRAM):   end;
65315     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65316     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
65317     +            GRP_LOG_DEBTINC1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = 0.55901699437494;
65318     +            GRP_LOG_DEBTINC2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = 0.55901699437494;
65319     +            GRP_LOG_DEBTINC3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = -0.55901699437494;
65320     +            GRP_LOG_DEBTINC4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = -0.55901699437494;
65321     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65322     +         end;
MPRINT(EM_DIAGRAM):   end;
65323     +      end;
MPRINT(EM_DIAGRAM):   end;
65324     +   end;
MPRINT(EM_DIAGRAM):   end;
65325     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65326     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
65327     +         GRP_LOG_DEBTINC1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = 0.55901699437494;
65328     +         GRP_LOG_DEBTINC2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = 0.55901699437494;
65329     +         GRP_LOG_DEBTINC3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = 0.55901699437494;
65330     +         GRP_LOG_DEBTINC4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = -0.55901699437494;
65331     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65332     +      end;
MPRINT(EM_DIAGRAM):   end;
65333     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65334     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
65335     +            GRP_LOG_DEBTINC1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = 0.55901699437494;
65336     +            GRP_LOG_DEBTINC2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = 0.55901699437494;
65337     +            GRP_LOG_DEBTINC3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = 0.55901699437494;
65338     +            GRP_LOG_DEBTINC4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = 0.55901699437494;
65339     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65340     +         end;
MPRINT(EM_DIAGRAM):   end;
65341     +      end;
MPRINT(EM_DIAGRAM):   end;
65342     +   end;
MPRINT(EM_DIAGRAM):   end;
65343     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
65344     +      GRP_LOG_DEBTINC1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC1 = .;
65345     +      GRP_LOG_DEBTINC2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC2 = .;
65346     +      GRP_LOG_DEBTINC3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC3 = .;
65347     +      GRP_LOG_DEBTINC4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC4 = .;
65348     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65349     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65350     +   end;
MPRINT(EM_DIAGRAM):   end;
65351     +end;
MPRINT(EM_DIAGRAM):   end;
65352     +
65353     +*** Generate dummy variables for GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DELINQ ;
65354     +drop GRP_LOG_DELINQ1 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_DELINQ1 ;
65355     +if missing( GRP_LOG_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DELINQ ) then do;
65356     +   GRP_LOG_DELINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ1 = .;
65357     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65358     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65359     +end;
MPRINT(EM_DIAGRAM):   end;
65360     +else do;
MPRINT(EM_DIAGRAM):   else do;
65361     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65362     +   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
65363     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65364     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
65365     +      GRP_LOG_DELINQ1 = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ1 = 1;
65366     +   end;
MPRINT(EM_DIAGRAM):   end;
65367     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
65368     +      GRP_LOG_DELINQ1 = -1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ1 = -1;
65369     +   end;
MPRINT(EM_DIAGRAM):   end;
65370     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65371     +      GRP_LOG_DELINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ1 = .;
65372     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65373     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65374     +   end;
MPRINT(EM_DIAGRAM):   end;
65375     +end;
MPRINT(EM_DIAGRAM):   end;
65376     +
65377     +*** Generate dummy variables for GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEROG ;
65378     +drop GRP_LOG_DEROG1 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_DEROG1 ;
65379     +if missing( GRP_LOG_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEROG ) then do;
65380     +   GRP_LOG_DEROG1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG1 = .;
65381     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65382     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65383     +end;
MPRINT(EM_DIAGRAM):   end;
65384     +else do;
MPRINT(EM_DIAGRAM):   else do;
65385     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65386     +   _dm12 = put( GRP_LOG_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEROG , BEST12. );
65387     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65388     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
65389     +      GRP_LOG_DEROG1 = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG1 = 1;
65390     +   end;
MPRINT(EM_DIAGRAM):   end;
65391     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
65392     +      GRP_LOG_DEROG1 = -1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG1 = -1;
65393     +   end;
MPRINT(EM_DIAGRAM):   end;
65394     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65395     +      GRP_LOG_DEROG1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG1 = .;
65396     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65397     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65398     +   end;
MPRINT(EM_DIAGRAM):   end;
65399     +end;
MPRINT(EM_DIAGRAM):   end;
65400     +
65401     +*** Generate dummy variables for GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_LOAN ;
65402     +drop GRP_LOG_LOAN2 GRP_LOG_LOAN3 GRP_LOG_LOAN4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_LOAN2 GRP_LOG_LOAN3 GRP_LOG_LOAN4 ;
65403     +if missing( GRP_LOG_LOAN ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_LOAN ) then do;
65404     +   GRP_LOG_LOAN2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = .;
65405     +   GRP_LOG_LOAN3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = .;
65406     +   GRP_LOG_LOAN4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = .;
65407     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65408     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65409     +end;
MPRINT(EM_DIAGRAM):   end;
65410     +else do;
MPRINT(EM_DIAGRAM):   else do;
65411     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65412     +   _dm12 = put( GRP_LOG_LOAN , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_LOAN , BEST12. );
65413     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65414     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
65415     +      GRP_LOG_LOAN2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = 0.63245553203367;
65416     +      GRP_LOG_LOAN3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = -0.63245553203367;
65417     +      GRP_LOG_LOAN4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = -0.63245553203367;
65418     +   end;
MPRINT(EM_DIAGRAM):   end;
65419     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
65420     +      GRP_LOG_LOAN2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = 0.63245553203367;
65421     +      GRP_LOG_LOAN3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = 0.63245553203367;
65422     +      GRP_LOG_LOAN4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = 0.63245553203367;
65423     +   end;
MPRINT(EM_DIAGRAM):   end;
65424     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
65425     +      GRP_LOG_LOAN2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = -0.63245553203367;
65426     +      GRP_LOG_LOAN3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = -0.63245553203367;
65427     +      GRP_LOG_LOAN4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = -0.63245553203367;
65428     +   end;
MPRINT(EM_DIAGRAM):   end;
65429     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
65430     +      GRP_LOG_LOAN2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = 0.63245553203367;
65431     +      GRP_LOG_LOAN3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = 0.63245553203367;
65432     +      GRP_LOG_LOAN4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = -0.63245553203367;
65433     +   end;
MPRINT(EM_DIAGRAM):   end;
65434     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65435     +      GRP_LOG_LOAN2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN2 = .;
65436     +      GRP_LOG_LOAN3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN3 = .;
65437     +      GRP_LOG_LOAN4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN4 = .;
65438     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65439     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65440     +   end;
MPRINT(EM_DIAGRAM):   end;
65441     +end;
MPRINT(EM_DIAGRAM):   end;
65442     +
65443     +*** Generate dummy variables for GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_MORTDUE ;
65444     +drop GRP_LOG_MORTDUE1 GRP_LOG_MORTDUE2 GRP_LOG_MORTDUE3 GRP_LOG_MORTDUE4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_MORTDUE1 GRP_LOG_MORTDUE2 GRP_LOG_MORTDUE3 GRP_LOG_MORTDUE4
;
65445     +if missing( GRP_LOG_MORTDUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_MORTDUE ) then do;
65446     +   GRP_LOG_MORTDUE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = .;
65447     +   GRP_LOG_MORTDUE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = .;
65448     +   GRP_LOG_MORTDUE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = .;
65449     +   GRP_LOG_MORTDUE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = .;
65450     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65451     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65452     +end;
MPRINT(EM_DIAGRAM):   end;
65453     +else do;
MPRINT(EM_DIAGRAM):   else do;
65454     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65455     +   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
65456     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65457     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
65458     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
65459     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
65460     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
65461     +            GRP_LOG_MORTDUE1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = -0.55901699437494;
65462     +            GRP_LOG_MORTDUE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = -0.55901699437494;
65463     +            GRP_LOG_MORTDUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = -0.55901699437494;
65464     +            GRP_LOG_MORTDUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = -0.55901699437494;
65465     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65466     +         end;
MPRINT(EM_DIAGRAM):   end;
65467     +         else do;
MPRINT(EM_DIAGRAM):   else do;
65468     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
65469     +               GRP_LOG_MORTDUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = 0.55901699437494;
65470     +               GRP_LOG_MORTDUE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = -0.55901699437494;
65471     +               GRP_LOG_MORTDUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = -0.55901699437494;
65472     +               GRP_LOG_MORTDUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = -0.55901699437494;
65473     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65474     +            end;
MPRINT(EM_DIAGRAM):   end;
65475     +         end;
MPRINT(EM_DIAGRAM):   end;
65476     +      end;
MPRINT(EM_DIAGRAM):   end;
65477     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65478     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
65479     +            GRP_LOG_MORTDUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = 0.55901699437494;
65480     +            GRP_LOG_MORTDUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = 0.55901699437494;
65481     +            GRP_LOG_MORTDUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = -0.55901699437494;
65482     +            GRP_LOG_MORTDUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = -0.55901699437494;
65483     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65484     +         end;
MPRINT(EM_DIAGRAM):   end;
65485     +      end;
MPRINT(EM_DIAGRAM):   end;
65486     +   end;
MPRINT(EM_DIAGRAM):   end;
65487     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65488     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
65489     +         GRP_LOG_MORTDUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = 0.55901699437494;
65490     +         GRP_LOG_MORTDUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = 0.55901699437494;
65491     +         GRP_LOG_MORTDUE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = 0.55901699437494;
65492     +         GRP_LOG_MORTDUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = -0.55901699437494;
65493     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65494     +      end;
MPRINT(EM_DIAGRAM):   end;
65495     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65496     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
65497     +            GRP_LOG_MORTDUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = 0.55901699437494;
65498     +            GRP_LOG_MORTDUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = 0.55901699437494;
65499     +            GRP_LOG_MORTDUE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = 0.55901699437494;
65500     +            GRP_LOG_MORTDUE4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = 0.55901699437494;
65501     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65502     +         end;
MPRINT(EM_DIAGRAM):   end;
65503     +      end;
MPRINT(EM_DIAGRAM):   end;
65504     +   end;
MPRINT(EM_DIAGRAM):   end;
65505     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
65506     +      GRP_LOG_MORTDUE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE1 = .;
65507     +      GRP_LOG_MORTDUE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE2 = .;
65508     +      GRP_LOG_MORTDUE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE3 = .;
65509     +      GRP_LOG_MORTDUE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE4 = .;
65510     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65511     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65512     +   end;
MPRINT(EM_DIAGRAM):   end;
65513     +end;
MPRINT(EM_DIAGRAM):   end;
65514     +
65515     +*** Generate dummy variables for GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_VALUE ;
65516     +drop GRP_LOG_VALUE1 GRP_LOG_VALUE2 GRP_LOG_VALUE3 GRP_LOG_VALUE4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_VALUE1 GRP_LOG_VALUE2 GRP_LOG_VALUE3 GRP_LOG_VALUE4 ;
65517     +if missing( GRP_LOG_VALUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_VALUE ) then do;
65518     +   GRP_LOG_VALUE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = .;
65519     +   GRP_LOG_VALUE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = .;
65520     +   GRP_LOG_VALUE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = .;
65521     +   GRP_LOG_VALUE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = .;
65522     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65523     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65524     +end;
MPRINT(EM_DIAGRAM):   end;
65525     +else do;
MPRINT(EM_DIAGRAM):   else do;
65526     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65527     +   _dm12 = put( GRP_LOG_VALUE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_VALUE , BEST12. );
65528     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65529     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
65530     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
65531     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
65532     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
65533     +            GRP_LOG_VALUE1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = -0.55901699437494;
65534     +            GRP_LOG_VALUE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = -0.55901699437494;
65535     +            GRP_LOG_VALUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = -0.55901699437494;
65536     +            GRP_LOG_VALUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = -0.55901699437494;
65537     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65538     +         end;
MPRINT(EM_DIAGRAM):   end;
65539     +         else do;
MPRINT(EM_DIAGRAM):   else do;
65540     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
65541     +               GRP_LOG_VALUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = 0.55901699437494;
65542     +               GRP_LOG_VALUE2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = -0.55901699437494;
65543     +               GRP_LOG_VALUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = -0.55901699437494;
65544     +               GRP_LOG_VALUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = -0.55901699437494;
65545     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65546     +            end;
MPRINT(EM_DIAGRAM):   end;
65547     +         end;
MPRINT(EM_DIAGRAM):   end;
65548     +      end;
MPRINT(EM_DIAGRAM):   end;
65549     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65550     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
65551     +            GRP_LOG_VALUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = 0.55901699437494;
65552     +            GRP_LOG_VALUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = 0.55901699437494;
65553     +            GRP_LOG_VALUE3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = -0.55901699437494;
65554     +            GRP_LOG_VALUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = -0.55901699437494;
65555     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65556     +         end;
MPRINT(EM_DIAGRAM):   end;
65557     +      end;
MPRINT(EM_DIAGRAM):   end;
65558     +   end;
MPRINT(EM_DIAGRAM):   end;
65559     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65560     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
65561     +         GRP_LOG_VALUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = 0.55901699437494;
65562     +         GRP_LOG_VALUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = 0.55901699437494;
65563     +         GRP_LOG_VALUE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = 0.55901699437494;
65564     +         GRP_LOG_VALUE4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = -0.55901699437494;
65565     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65566     +      end;
MPRINT(EM_DIAGRAM):   end;
65567     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65568     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
65569     +            GRP_LOG_VALUE1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = 0.55901699437494;
65570     +            GRP_LOG_VALUE2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = 0.55901699437494;
65571     +            GRP_LOG_VALUE3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = 0.55901699437494;
65572     +            GRP_LOG_VALUE4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = 0.55901699437494;
65573     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65574     +         end;
MPRINT(EM_DIAGRAM):   end;
65575     +      end;
MPRINT(EM_DIAGRAM):   end;
65576     +   end;
MPRINT(EM_DIAGRAM):   end;
65577     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
65578     +      GRP_LOG_VALUE1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE1 = .;
65579     +      GRP_LOG_VALUE2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE2 = .;
65580     +      GRP_LOG_VALUE3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE3 = .;
65581     +      GRP_LOG_VALUE4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE4 = .;
65582     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65583     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65584     +   end;
MPRINT(EM_DIAGRAM):   end;
65585     +end;
MPRINT(EM_DIAGRAM):   end;
65586     +
65587     +*** Generate dummy variables for GRP_LOG_YOJ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_YOJ ;
65588     +drop GRP_LOG_YOJ1 GRP_LOG_YOJ2 GRP_LOG_YOJ3 GRP_LOG_YOJ4 ;
MPRINT(EM_DIAGRAM):   drop GRP_LOG_YOJ1 GRP_LOG_YOJ2 GRP_LOG_YOJ3 GRP_LOG_YOJ4 ;
65589     +if missing( GRP_LOG_YOJ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_YOJ ) then do;
65590     +   GRP_LOG_YOJ1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = .;
65591     +   GRP_LOG_YOJ2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = .;
65592     +   GRP_LOG_YOJ3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = .;
65593     +   GRP_LOG_YOJ4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = .;
65594     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65595     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65596     +end;
MPRINT(EM_DIAGRAM):   end;
65597     +else do;
MPRINT(EM_DIAGRAM):   else do;
65598     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65599     +   _dm12 = put( GRP_LOG_YOJ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_YOJ , BEST12. );
65600     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65601     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
65602     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
65603     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
65604     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
65605     +            GRP_LOG_YOJ1 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = -0.55901699437494;
65606     +            GRP_LOG_YOJ2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = -0.55901699437494;
65607     +            GRP_LOG_YOJ3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = -0.55901699437494;
65608     +            GRP_LOG_YOJ4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = -0.55901699437494;
65609     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65610     +         end;
MPRINT(EM_DIAGRAM):   end;
65611     +         else do;
MPRINT(EM_DIAGRAM):   else do;
65612     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
65613     +               GRP_LOG_YOJ1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = 0.55901699437494;
65614     +               GRP_LOG_YOJ2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = -0.55901699437494;
65615     +               GRP_LOG_YOJ3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = -0.55901699437494;
65616     +               GRP_LOG_YOJ4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = -0.55901699437494;
65617     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65618     +            end;
MPRINT(EM_DIAGRAM):   end;
65619     +         end;
MPRINT(EM_DIAGRAM):   end;
65620     +      end;
MPRINT(EM_DIAGRAM):   end;
65621     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65622     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
65623     +            GRP_LOG_YOJ1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = 0.55901699437494;
65624     +            GRP_LOG_YOJ2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = 0.55901699437494;
65625     +            GRP_LOG_YOJ3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = -0.55901699437494;
65626     +            GRP_LOG_YOJ4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = -0.55901699437494;
65627     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65628     +         end;
MPRINT(EM_DIAGRAM):   end;
65629     +      end;
MPRINT(EM_DIAGRAM):   end;
65630     +   end;
MPRINT(EM_DIAGRAM):   end;
65631     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65632     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
65633     +         GRP_LOG_YOJ1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = 0.55901699437494;
65634     +         GRP_LOG_YOJ2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = 0.55901699437494;
65635     +         GRP_LOG_YOJ3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = 0.55901699437494;
65636     +         GRP_LOG_YOJ4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = -0.55901699437494;
65637     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65638     +      end;
MPRINT(EM_DIAGRAM):   end;
65639     +      else do;
MPRINT(EM_DIAGRAM):   else do;
65640     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
65641     +            GRP_LOG_YOJ1 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = 0.55901699437494;
65642     +            GRP_LOG_YOJ2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = 0.55901699437494;
65643     +            GRP_LOG_YOJ3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = 0.55901699437494;
65644     +            GRP_LOG_YOJ4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = 0.55901699437494;
65645     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
65646     +         end;
MPRINT(EM_DIAGRAM):   end;
65647     +      end;
MPRINT(EM_DIAGRAM):   end;
65648     +   end;
MPRINT(EM_DIAGRAM):   end;
65649     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
65650     +      GRP_LOG_YOJ1 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ1 = .;
65651     +      GRP_LOG_YOJ2 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ2 = .;
65652     +      GRP_LOG_YOJ3 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ3 = .;
65653     +      GRP_LOG_YOJ4 = .;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ4 = .;
65654     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65655     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65656     +   end;
MPRINT(EM_DIAGRAM):   end;
65657     +end;
MPRINT(EM_DIAGRAM):   end;
65658     +
65659     +*** Generate dummy variables for GRP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NINQ ;
65660     +drop GRP_NINQ1 GRP_NINQ2 GRP_NINQ3 ;
MPRINT(EM_DIAGRAM):   drop GRP_NINQ1 GRP_NINQ2 GRP_NINQ3 ;
65661     +if missing( GRP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NINQ ) then do;
65662     +   GRP_NINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = .;
65663     +   GRP_NINQ2 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = .;
65664     +   GRP_NINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = .;
65665     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65666     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65667     +end;
MPRINT(EM_DIAGRAM):   end;
65668     +else do;
MPRINT(EM_DIAGRAM):   else do;
65669     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65670     +   _dm12 = put( GRP_NINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NINQ , BEST12. );
65671     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65672     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
65673     +      GRP_NINQ1 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = -0.63245553203367;
65674     +      GRP_NINQ2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = -0.63245553203367;
65675     +      GRP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = -0.63245553203367;
65676     +   end;
MPRINT(EM_DIAGRAM):   end;
65677     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
65678     +      GRP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = 0.63245553203367;
65679     +      GRP_NINQ2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = -0.63245553203367;
65680     +      GRP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = -0.63245553203367;
65681     +   end;
MPRINT(EM_DIAGRAM):   end;
65682     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
65683     +      GRP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = 0.63245553203367;
65684     +      GRP_NINQ2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = 0.63245553203367;
65685     +      GRP_NINQ3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = 0.63245553203367;
65686     +   end;
MPRINT(EM_DIAGRAM):   end;
65687     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
65688     +      GRP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = 0.63245553203367;
65689     +      GRP_NINQ2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = 0.63245553203367;
65690     +      GRP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = -0.63245553203367;
65691     +   end;
MPRINT(EM_DIAGRAM):   end;
65692     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65693     +      GRP_NINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ1 = .;
65694     +      GRP_NINQ2 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ2 = .;
65695     +      GRP_NINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_NINQ3 = .;
65696     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65697     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65698     +   end;
MPRINT(EM_DIAGRAM):   end;
65699     +end;
MPRINT(EM_DIAGRAM):   end;
65700     +
65701     +*** Generate dummy variables for GRP_REASON ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_REASON ;
65702     +drop GRP_REASON1 GRP_REASON2 ;
MPRINT(EM_DIAGRAM):   drop GRP_REASON1 GRP_REASON2 ;
65703     +if missing( GRP_REASON ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_REASON ) then do;
65704     +   GRP_REASON1 = .;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = .;
65705     +   GRP_REASON2 = .;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = .;
65706     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65707     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65708     +end;
MPRINT(EM_DIAGRAM):   end;
65709     +else do;
MPRINT(EM_DIAGRAM):   else do;
65710     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65711     +   _dm12 = put( GRP_REASON , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_REASON , BEST12. );
65712     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65713     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
65714     +      GRP_REASON1 = 0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = 0.75;
65715     +      GRP_REASON2 = -0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = -0.75;
65716     +   end;
MPRINT(EM_DIAGRAM):   end;
65717     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
65718     +      GRP_REASON1 = 0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = 0.75;
65719     +      GRP_REASON2 = 0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = 0.75;
65720     +   end;
MPRINT(EM_DIAGRAM):   end;
65721     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
65722     +      GRP_REASON1 = -0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = -0.75;
65723     +      GRP_REASON2 = -0.75;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = -0.75;
65724     +   end;
MPRINT(EM_DIAGRAM):   end;
65725     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65726     +      GRP_REASON1 = .;
MPRINT(EM_DIAGRAM):   GRP_REASON1 = .;
65727     +      GRP_REASON2 = .;
MPRINT(EM_DIAGRAM):   GRP_REASON2 = .;
65728     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65729     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65730     +   end;
MPRINT(EM_DIAGRAM):   end;
65731     +end;
MPRINT(EM_DIAGRAM):   end;
65732     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
65733     +*** Writing the Node ord ;
MPRINT(EM_DIAGRAM):   *** Writing the Node ord ;
65734     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
65735     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
65736     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
65737     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
65738     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
65739     +   H11  =  9.9999999600419E-11 * GRP_INDELINQ3  +  1.0000000133514E-10 *
65740     +        GRP_INDEROG3  +   1.000000000341E-10 * GRP_JOB1
65741     +          +     0.05008717989805 * GRP_JOB2  +     0.08023042969491 * GRP_JOB3
65742     +          +   1.000000000341E-10 * GRP_JOB4  +  9.9999999600419E-11 * GRP_JOB5
65743     +          +      0.1850031165278 * GRP_JOB6  +      0.0236044559772 *
65744     +        GRP_LOG_CLAGE1  +     0.18353369591421 * GRP_LOG_CLAGE2
65745     +          +     0.04452662957432 * GRP_LOG_CLAGE3  +     0.17795522482642 *
65746     +        GRP_LOG_CLAGE4  +     0.13453214051882 * GRP_LOG_CLNO1
65747     +          +   9.999999992568E-11 * GRP_LOG_CLNO2  +   1.000000000341E-10 *
65748     +        GRP_LOG_CLNO3  +   1.000000000341E-10 * GRP_LOG_CLNO4
65749     +          +     1.21265583748325 * GRP_LOG_DEBTINC1  +     0.15112909156485 *
65750     +        GRP_LOG_DEBTINC2  +   1.000000000341E-10 * GRP_LOG_DEBTINC3
65751     +          +     0.17873684560066 * GRP_LOG_DEBTINC4  +  1.0000000133514E-10 *
65752     +        GRP_LOG_DELINQ1  +     0.01539244480238 * GRP_LOG_DEROG1
65753     +          +     0.08868945875758 * GRP_LOG_LOAN2  +     0.06961668106695 *
65754     +        GRP_LOG_LOAN3  +     0.07046851132703 * GRP_LOG_LOAN4
65755     +          +  1.0000000133514E-10 * GRP_LOG_MORTDUE1  +  9.9999999600419E-11 *
65756     +        GRP_LOG_MORTDUE2  +   1.000000000341E-10 * GRP_LOG_MORTDUE3
65757     +          +  9.9999999600419E-11 * GRP_LOG_MORTDUE4  +     0.56263103121987 *
65758     +        GRP_LOG_VALUE1  +     0.16292857947328 * GRP_LOG_VALUE2
65759     +          +   1.000000000341E-10 * GRP_LOG_VALUE3  +  9.9999999600419E-11 *
65760     +        GRP_LOG_VALUE4  +  9.9999999600419E-11 * GRP_LOG_YOJ1
65761     +          +   1.000000000341E-10 * GRP_LOG_YOJ2  +   1.000000000341E-10 *
65762     +        GRP_LOG_YOJ3  +  1.0000000014252E-10 * GRP_LOG_YOJ4
65763     +          +  9.9999994396249E-11 * GRP_NINQ1  +  1.0000000025094E-10 *
65764     +        GRP_NINQ2  +     0.00148397298285 * GRP_NINQ3
65765     +          +     0.00024098412364 * GRP_REASON1  +     0.12246745134608 *
65766     +        GRP_REASON2 ;
MPRINT(EM_DIAGRAM):   H11 = 9.9999999600419E-11 * GRP_INDELINQ3 + 1.0000000133514E-10 *
GRP_INDEROG3 + 1.000000000341E-10 * GRP_JOB1 + 0.05008717989805 * GRP_JOB2 + 0.08023042969491
* GRP_JOB3 + 1.000000000341E-10 * GRP_JOB4 + 9.9999999600419E-11 * GRP_JOB5 + 0.1850031165278
* GRP_JOB6 + 0.0236044559772 * GRP_LOG_CLAGE1 + 0.18353369591421 * GRP_LOG_CLAGE2 +
0.04452662957432 * GRP_LOG_CLAGE3 + 0.17795522482642 * GRP_LOG_CLAGE4 + 0.13453214051882 *
GRP_LOG_CLNO1 + 9.999999992568E-11 * GRP_LOG_CLNO2 + 1.000000000341E-10 * GRP_LOG_CLNO3 +
1.000000000341E-10 * GRP_LOG_CLNO4 + 1.21265583748325 * GRP_LOG_DEBTINC1 + 0.15112909156485 *
GRP_LOG_DEBTINC2 + 1.000000000341E-10 * GRP_LOG_DEBTINC3 + 0.17873684560066 * GRP_LOG_DEBTINC4
+ 1.0000000133514E-10 * GRP_LOG_DELINQ1 + 0.01539244480238 * GRP_LOG_DEROG1 + 0.08868945875758
* GRP_LOG_LOAN2 + 0.06961668106695 * GRP_LOG_LOAN3 + 0.07046851132703 * GRP_LOG_LOAN4 +
1.0000000133514E-10 * GRP_LOG_MORTDUE1 + 9.9999999600419E-11 * GRP_LOG_MORTDUE2 +
1.000000000341E-10 * GRP_LOG_MORTDUE3 + 9.9999999600419E-11 * GRP_LOG_MORTDUE4 +
0.56263103121987 * GRP_LOG_VALUE1 + 0.16292857947328 * GRP_LOG_VALUE2 + 1.000000000341E-10 *
GRP_LOG_VALUE3 + 9.9999999600419E-11 * GRP_LOG_VALUE4 + 9.9999999600419E-11 * GRP_LOG_YOJ1 +
1.000000000341E-10 * GRP_LOG_YOJ2 + 1.000000000341E-10 * GRP_LOG_YOJ3 + 1.0000000014252E-10 *
GRP_LOG_YOJ4 + 9.9999994396249E-11 * GRP_NINQ1 + 1.0000000025094E-10 * GRP_NINQ2 +
0.00148397298285 * GRP_NINQ3 + 0.00024098412364 * GRP_REASON1 + 0.12246745134608 * GRP_REASON2
;
65767     +   H12  =     0.68984348905144 * GRP_INDELINQ3  +     0.45645864713083 *
65768     +        GRP_INDEROG3  +     0.38623080361566 * GRP_JOB1
65769     +          +   1.000000000341E-10 * GRP_JOB2  +  9.9999999600419E-11 * GRP_JOB3
65770     +          +     0.47476223931695 * GRP_JOB4  +     0.04143822312697 * GRP_JOB5
65771     +          +      0.0479561732778 * GRP_JOB6  +     0.13113144170919 *
65772     +        GRP_LOG_CLAGE1  +  1.0000000046778E-10 * GRP_LOG_CLAGE2
65773     +          +     0.00789278468195 * GRP_LOG_CLAGE3  +     0.00189921003957 *
65774     +        GRP_LOG_CLAGE4  +     0.14606928633448 * GRP_LOG_CLNO1
65775     +          +   1.000000000341E-10 * GRP_LOG_CLNO2  +     0.00607480435339 *
65776     +        GRP_LOG_CLNO3  +   1.000000000341E-10 * GRP_LOG_CLNO4
65777     +          +  9.9999999600419E-11 * GRP_LOG_DEBTINC1  +     0.12651297905145 *
65778     +        GRP_LOG_DEBTINC2  +     0.28836150522523 * GRP_LOG_DEBTINC3
65779     +          +     0.50134618658119 * GRP_LOG_DEBTINC4  +     0.28092464730212 *
65780     +        GRP_LOG_DELINQ1  +     0.57659304900786 * GRP_LOG_DEROG1
65781     +          +     0.23128310697574 * GRP_LOG_LOAN2  +     0.02567952367831 *
65782     +        GRP_LOG_LOAN3  +     0.04464000976882 * GRP_LOG_LOAN4
65783     +          +   1.000000000341E-10 * GRP_LOG_MORTDUE1  +     0.00018169062081 *
65784     +        GRP_LOG_MORTDUE2  +   1.000000000341E-10 * GRP_LOG_MORTDUE3
65785     +          +     0.24418316012477 * GRP_LOG_MORTDUE4  +   1.000000000341E-10 *
65786     +        GRP_LOG_VALUE1  +  1.0000000133514E-10 * GRP_LOG_VALUE2
65787     +          +  9.9999999600419E-11 * GRP_LOG_VALUE3  +     0.23833599903531 *
65788     +        GRP_LOG_VALUE4  +     0.16418753386424 * GRP_LOG_YOJ1
65789     +          +  9.9999999600419E-11 * GRP_LOG_YOJ2  +  9.9999999600419E-11 *
65790     +        GRP_LOG_YOJ3  +   9.999999997989E-11 * GRP_LOG_YOJ4
65791     +          +     0.20121728634519 * GRP_NINQ1  +      0.0824273831373 *
65792     +        GRP_NINQ2  +     0.43986255487106 * GRP_NINQ3
65793     +          +     0.01374331483548 * GRP_REASON1  +     0.35938352013272 *
65794     +        GRP_REASON2 ;
MPRINT(EM_DIAGRAM):   H12 = 0.68984348905144 * GRP_INDELINQ3 + 0.45645864713083 * GRP_INDEROG3
+ 0.38623080361566 * GRP_JOB1 + 1.000000000341E-10 * GRP_JOB2 + 9.9999999600419E-11 * GRP_JOB3
+ 0.47476223931695 * GRP_JOB4 + 0.04143822312697 * GRP_JOB5 + 0.0479561732778 * GRP_JOB6 +
0.13113144170919 * GRP_LOG_CLAGE1 + 1.0000000046778E-10 * GRP_LOG_CLAGE2 + 0.00789278468195 *
GRP_LOG_CLAGE3 + 0.00189921003957 * GRP_LOG_CLAGE4 + 0.14606928633448 * GRP_LOG_CLNO1 +
1.000000000341E-10 * GRP_LOG_CLNO2 + 0.00607480435339 * GRP_LOG_CLNO3 + 1.000000000341E-10 *
GRP_LOG_CLNO4 + 9.9999999600419E-11 * GRP_LOG_DEBTINC1 + 0.12651297905145 * GRP_LOG_DEBTINC2 +
0.28836150522523 * GRP_LOG_DEBTINC3 + 0.50134618658119 * GRP_LOG_DEBTINC4 + 0.28092464730212 *
GRP_LOG_DELINQ1 + 0.57659304900786 * GRP_LOG_DEROG1 + 0.23128310697574 * GRP_LOG_LOAN2 +
0.02567952367831 * GRP_LOG_LOAN3 + 0.04464000976882 * GRP_LOG_LOAN4 + 1.000000000341E-10 *
GRP_LOG_MORTDUE1 + 0.00018169062081 * GRP_LOG_MORTDUE2 + 1.000000000341E-10 * GRP_LOG_MORTDUE3
+ 0.24418316012477 * GRP_LOG_MORTDUE4 + 1.000000000341E-10 * GRP_LOG_VALUE1 +
1.0000000133514E-10 * GRP_LOG_VALUE2 + 9.9999999600419E-11 * GRP_LOG_VALUE3 + 0.23833599903531
* GRP_LOG_VALUE4 + 0.16418753386424 * GRP_LOG_YOJ1 + 9.9999999600419E-11 * GRP_LOG_YOJ2 +
9.9999999600419E-11 * GRP_LOG_YOJ3 + 9.999999997989E-11 * GRP_LOG_YOJ4 + 0.20121728634519 *
GRP_NINQ1 + 0.0824273831373 * GRP_NINQ2 + 0.43986255487106 * GRP_NINQ3 + 0.01374331483548 *
GRP_REASON1 + 0.35938352013272 * GRP_REASON2 ;
65795     +   H13  =  9.9999999600419E-11 * GRP_INDELINQ3  +  1.0000000133514E-10 *
65796     +        GRP_INDEROG3  +      0.0850787266472 * GRP_JOB1
65797     +          +     0.08697698049009 * GRP_JOB2  +     0.09487999844943 * GRP_JOB3
65798     +          +  1.0000000133514E-10 * GRP_JOB4  +   9.999999997989E-11 * GRP_JOB5
65799     +          +     0.09476311924983 * GRP_JOB6  +     0.09633628402877 *
65800     +        GRP_LOG_CLAGE1  +     0.40590180699987 * GRP_LOG_CLAGE2
65801     +          +     0.56243410114358 * GRP_LOG_CLAGE3  +     0.09813793418579 *
65802     +        GRP_LOG_CLAGE4  +     0.00214687772347 * GRP_LOG_CLNO1
65803     +          +     0.09363855516409 * GRP_LOG_CLNO2  +  9.9999999600419E-11 *
65804     +        GRP_LOG_CLNO3  +   1.000000000341E-10 * GRP_LOG_CLNO4
65805     +          +     0.43543098237579 * GRP_LOG_DEBTINC1  +     0.11593382607123 *
65806     +        GRP_LOG_DEBTINC2  +   1.000000000341E-10 * GRP_LOG_DEBTINC3
65807     +          +  9.9999999600419E-11 * GRP_LOG_DEBTINC4  +     0.21453998748928 *
65808     +        GRP_LOG_DELINQ1  +     0.13739316440012 * GRP_LOG_DEROG1
65809     +          +  9.9999999600419E-11 * GRP_LOG_LOAN2  +  1.0000000133514E-10 *
65810     +        GRP_LOG_LOAN3  +     0.09794806265167 * GRP_LOG_LOAN4
65811     +          +     0.17076415843403 * GRP_LOG_MORTDUE1  +     0.35923992103045 *
65812     +        GRP_LOG_MORTDUE2  +     0.06888684238484 * GRP_LOG_MORTDUE3
65813     +          +     0.19287015294738 * GRP_LOG_MORTDUE4  +     0.33179247749502 *
65814     +        GRP_LOG_VALUE1  +     0.17642957444055 * GRP_LOG_VALUE2
65815     +          +     0.09863773992669 * GRP_LOG_VALUE3  +  9.9999999993443E-11 *
65816     +        GRP_LOG_VALUE4  +  1.0000000133514E-10 * GRP_LOG_YOJ1
65817     +          +     0.13056368530899 * GRP_LOG_YOJ2  +     0.23263608717254 *
65818     +        GRP_LOG_YOJ3  +     0.05960527277735 * GRP_LOG_YOJ4
65819     +          +  9.9999999600419E-11 * GRP_NINQ1  +   1.000000000341E-10 *
65820     +        GRP_NINQ2  +     0.06885844227348 * GRP_NINQ3
65821     +          +     0.03011752807588 * GRP_REASON1  +     0.15223826213802 *
65822     +        GRP_REASON2 ;
MPRINT(EM_DIAGRAM):   H13 = 9.9999999600419E-11 * GRP_INDELINQ3 + 1.0000000133514E-10 *
GRP_INDEROG3 + 0.0850787266472 * GRP_JOB1 + 0.08697698049009 * GRP_JOB2 + 0.09487999844943 *
GRP_JOB3 + 1.0000000133514E-10 * GRP_JOB4 + 9.999999997989E-11 * GRP_JOB5 + 0.09476311924983 *
GRP_JOB6 + 0.09633628402877 * GRP_LOG_CLAGE1 + 0.40590180699987 * GRP_LOG_CLAGE2 +
0.56243410114358 * GRP_LOG_CLAGE3 + 0.09813793418579 * GRP_LOG_CLAGE4 + 0.00214687772347 *
GRP_LOG_CLNO1 + 0.09363855516409 * GRP_LOG_CLNO2 + 9.9999999600419E-11 * GRP_LOG_CLNO3 +
1.000000000341E-10 * GRP_LOG_CLNO4 + 0.43543098237579 * GRP_LOG_DEBTINC1 + 0.11593382607123 *
GRP_LOG_DEBTINC2 + 1.000000000341E-10 * GRP_LOG_DEBTINC3 + 9.9999999600419E-11 *
GRP_LOG_DEBTINC4 + 0.21453998748928 * GRP_LOG_DELINQ1 + 0.13739316440012 * GRP_LOG_DEROG1 +
9.9999999600419E-11 * GRP_LOG_LOAN2 + 1.0000000133514E-10 * GRP_LOG_LOAN3 + 0.09794806265167 *
GRP_LOG_LOAN4 + 0.17076415843403 * GRP_LOG_MORTDUE1 + 0.35923992103045 * GRP_LOG_MORTDUE2 +
0.06888684238484 * GRP_LOG_MORTDUE3 + 0.19287015294738 * GRP_LOG_MORTDUE4 + 0.33179247749502 *
GRP_LOG_VALUE1 + 0.17642957444055 * GRP_LOG_VALUE2 + 0.09863773992669 * GRP_LOG_VALUE3 +
9.9999999993443E-11 * GRP_LOG_VALUE4 + 1.0000000133514E-10 * GRP_LOG_YOJ1 + 0.13056368530899 *
GRP_LOG_YOJ2 + 0.23263608717254 * GRP_LOG_YOJ3 + 0.05960527277735 * GRP_LOG_YOJ4 +
9.9999999600419E-11 * GRP_NINQ1 + 1.000000000341E-10 * GRP_NINQ2 + 0.06885844227348 *
GRP_NINQ3 + 0.03011752807588 * GRP_REASON1 + 0.15223826213802 * GRP_REASON2 ;
65823     +   H11  =     0.40334970202873 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 0.40334970202873 + H11 ;
65824     +   H12  =    -0.03605065921952 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -0.03605065921952 + H12 ;
65825     +   H13  =    -1.42308543156766 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -1.42308543156766 + H13 ;
65826     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
65827     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
65828     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
65829     +END;
MPRINT(EM_DIAGRAM):   END;
65830     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
65831     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
65832     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
65833     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
65834     +END;
MPRINT(EM_DIAGRAM):   END;
65835     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
65836     +*** Writing the Node BAD ;
MPRINT(EM_DIAGRAM):   *** Writing the Node BAD ;
65837     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
65838     +
65839     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
65840     +drop BAD1 BAD0 ;
MPRINT(EM_DIAGRAM):   drop BAD1 BAD0 ;
65841     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
65842     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
65843     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
65844     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65845     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
65846     +   BAD1 = .;
MPRINT(EM_DIAGRAM):   BAD1 = .;
65847     +   BAD0 = .;
MPRINT(EM_DIAGRAM):   BAD0 = .;
65848     +end;
MPRINT(EM_DIAGRAM):   end;
65849     +else do;
MPRINT(EM_DIAGRAM):   else do;
65850     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
65851     +      BAD1 = 0;
MPRINT(EM_DIAGRAM):   BAD1 = 0;
65852     +      BAD0 = 1;
MPRINT(EM_DIAGRAM):   BAD0 = 1;
65853     +   end;
MPRINT(EM_DIAGRAM):   end;
65854     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
65855     +      BAD1 = 1;
MPRINT(EM_DIAGRAM):   BAD1 = 1;
65856     +      BAD0 = 0;
MPRINT(EM_DIAGRAM):   BAD0 = 0;
65857     +   end;
MPRINT(EM_DIAGRAM):   end;
65858     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65859     +      BAD1 = .;
MPRINT(EM_DIAGRAM):   BAD1 = .;
65860     +      BAD0 = .;
MPRINT(EM_DIAGRAM):   BAD0 = .;
65861     +   end;
MPRINT(EM_DIAGRAM):   end;
65862     +end;
MPRINT(EM_DIAGRAM):   end;
65863     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
65864     +   P_BAD1  =    -2.63470208583197 * H11  +     1.86742307499411 * H12
65865     +          +    -1.33116147749524 * H13 ;
MPRINT(EM_DIAGRAM):   P_BAD1 = -2.63470208583197 * H11 + 1.86742307499411 * H12 +
-1.33116147749524 * H13 ;
65866     +   P_BAD1  =    -0.33697759343629 + P_BAD1 ;
MPRINT(EM_DIAGRAM):   P_BAD1 = -0.33697759343629 + P_BAD1 ;
65867     +   P_BAD0  = 0;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0;
65868     +   _MAX_ = MAX (P_BAD1 , P_BAD0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_BAD1 , P_BAD0 );
65869     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
65870     +   P_BAD1  = EXP(P_BAD1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_BAD1 = EXP(P_BAD1 - _MAX_);
65871     +   _SUM_ = _SUM_ + P_BAD1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD1 ;
65872     +   P_BAD0  = EXP(P_BAD0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_BAD0 = EXP(P_BAD0 - _MAX_);
65873     +   _SUM_ = _SUM_ + P_BAD0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD0 ;
65874     +   P_BAD1  = P_BAD1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_BAD1 = P_BAD1 / _SUM_;
65875     +   P_BAD0  = P_BAD0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_BAD0 = P_BAD0 / _SUM_;
65876     +END;
MPRINT(EM_DIAGRAM):   END;
65877     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
65878     +   P_BAD1  = .;
MPRINT(EM_DIAGRAM):   P_BAD1 = .;
65879     +   P_BAD0  = .;
MPRINT(EM_DIAGRAM):   P_BAD0 = .;
65880     +END;
MPRINT(EM_DIAGRAM):   END;
65881     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
65882     +   P_BAD1  =     0.19941225860621;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.19941225860621;
65883     +   P_BAD0  =     0.80058774139378;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.80058774139378;
65884     +END;
MPRINT(EM_DIAGRAM):   END;
65885     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
65886     +*** Writing the Residuals  of the Node BAD ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node BAD ;
65887     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
65888     +IF MISSING( BAD1 ) THEN R_BAD1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD1 ) THEN R_BAD1 = . ;
65889     +ELSE R_BAD1  = BAD1  - P_BAD1 ;
MPRINT(EM_DIAGRAM):   ELSE R_BAD1 = BAD1 - P_BAD1 ;
65890     +IF MISSING( BAD0 ) THEN R_BAD0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD0 ) THEN R_BAD0 = . ;
65891     +ELSE R_BAD0  = BAD0  - P_BAD0 ;
MPRINT(EM_DIAGRAM):   ELSE R_BAD0 = BAD0 - P_BAD0 ;
65892     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
65893     +*** Writing the I_BAD  AND U_BAD ;
MPRINT(EM_DIAGRAM):   *** Writing the I_BAD AND U_BAD ;
65894     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
65895     +_MAXP_ = P_BAD1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD1 ;
65896     +I_BAD  = "1           " ;
MPRINT(EM_DIAGRAM):   I_BAD = "1           " ;
65897     +U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
65898     +IF( _MAXP_ LT P_BAD0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_BAD0 ) THEN DO;
65899     +   _MAXP_ = P_BAD0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD0 ;
65900     +   I_BAD  = "0           " ;
MPRINT(EM_DIAGRAM):   I_BAD = "0           " ;
65901     +   U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
65902     +END;
MPRINT(EM_DIAGRAM):   END;
65903     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
65904     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
65905     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
65906     +drop
65907     +H11
65908     +H12
65909     +H13
65910     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
65911      run;
 
NOTE: DATA STEP view saved on file EMWS1.NEURAL_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_TEST.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
65912      quit;
65913      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
65914      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
65915      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
65916      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural_TRAIN out=WORK.M32J0XFT noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M32J0XFT;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M32J0XFT(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M32J0XFT;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M32J0XFT;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3Q5YH8X NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3Q5YH8X;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3Q5YH8X;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3MBCN3Q(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3Q5YH8X;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3Q5YH8X;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3Q5YH8X;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE =
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID',
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3Q5YH8X;
MPRINT(EMADVISECOLUMNS):   set WORK.M3Q5YH8X;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.BINNING_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.BINNING_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("BAD") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
66261      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMINFO;
66262      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
66263      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
66264      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
66268      run;
66269      proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
66270      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
66271      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.14 seconds
      cpu time            0.07 seconds
 
 
66272      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
66273      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
66274      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
66275      proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
66276      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
66277      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
66278      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
66279      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
66280      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
66281      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.01 seconds
 
 
66282      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
66283      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
66284      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
66285      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: View EMWS1.NEURAL_TEST.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 26, 2018"
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:11:11" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                October 26, 2018
Time:                00:11:11
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2W3PVNY "J:\JMMORR01\CIS 445\Tutorial 2\My
Project\Workspaces\EMWS1\Neural\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2W3PVNY new;
MPRINT(EM_DIAGRAM):   run;
66309      data EMWS1.Neural_EMOUTFIT(rename=(_NAME_=TARGET));
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMOUTFIT(rename=(_NAME_=TARGET));
66310      set EMWS1.Neural_OUTFIT(where=(_NAME_ eq 'OVERALL'));
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTFIT(where=(_NAME_ eq 'OVERALL'));
66311      label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _NAME_ = "Target";
66312      if _NAME_='OVERALL' then _NAME_='BAD';
MPRINT(EM_DIAGRAM):   if _NAME_='OVERALL' then _NAME_='BAD';
66313      drop _ITER_;
MPRINT(EM_DIAGRAM):   drop _ITER_;
66314      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_OUTFIT.
      WHERE _NAME_='OVERALL';
NOTE: The data set EMWS1.NEURAL_EMOUTFIT has 1 observations and 50 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.04 seconds
 
 
66315      proc sort data=EMWS1.Neural_EMOUTFIT nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_EMOUTFIT nodupkey;
66316      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
66317      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.NEURAL_EMOUTFIT has 1 observations and 50 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
 
 
66318      data EMWS1.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMOUTFIT;
66319      set EMWS1.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMOUTFIT;
66320      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
66321      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
66321    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
66322      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: The data set EMWS1.NEURAL_EMOUTFIT has 1 observations and 51 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
 
 
66323      proc sort data=EMWS1.Neural_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_EMREPORTFIT nothreads;
66324      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
66325      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.NEURAL_EMREPORTFIT.
NOTE: The data set EMWS1.NEURAL_EMREPORTFIT has 21 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.11 seconds
      cpu time            0.01 seconds
 
 
66326      %let _EMwarndup = 0;
66327      %let _EMtargetdup =;
66328      %let _EMASEtargetdup =;
66329      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
66330      set EMWS1.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMOUTFIT;
66331      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
66332      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
66333      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
66334      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
66335      end;
MPRINT(EM_DIAGRAM):   end;
66336      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
66337      proc sort data=EMWS1.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
66338      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
66339      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 30 observations read from the data set EMWS1.BINNING_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 30 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
66340      proc sort data=EMWS1.Neural_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_VariableSet out=WORK.SUBSETVARSET(keep=NAME
REPORT);
66341      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
66342      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 29 observations read from the data set EMWS1.NEURAL_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 29 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
66343      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
66344      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
66345      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
66346      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 30 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 29 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 30 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
66347      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
66348      set EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_CMeta_TRAIN;
66349      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
66349    ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
66350      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
66351      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
66352      set EMWS1.Neural_TRAIN(keep=
66353      F_BAD
66354      I_BAD
66355      P_BAD0
66356      P_BAD1
66357      R_BAD0
66358      R_BAD1
66359      U_BAD
66360      _WARN_
66361      BAD
66362      );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_TRAIN(keep= F_BAD I_BAD P_BAD0 P_BAD1 R_BAD0 R_BAD1
U_BAD _WARN_ BAD );
66363      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2382 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2382 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
NOTE: There were 2382 observations read from the data set EMWS1.BINNING_TRAIN.
NOTE: There were 2382 observations read from the data set EMWS1.NEURAL_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2382 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Neural_0GWCTKB nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_0GWCTKB;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural_0GWCTKB(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Neural_0GWCTKB;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural_0GWCTKB;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1994122586 _NEVENTS
475 _NNONEVENTS 1907 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2382));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0056438702 OVLMAX 0.9927682925 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2382 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(2382/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2382)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2382/20) ) / (
AVGNUMRESP / (2382/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2382 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2382 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2382/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 2382/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
The SAS System
 
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
70644      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
70645      set EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_CMeta_TRAIN;
70646      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
70646    ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
70647      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
70648      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
70649      set EMWS1.Neural_VALIDATE(keep=
70650      F_BAD
70651      I_BAD
70652      P_BAD0
70653      P_BAD1
70654      R_BAD0
70655      R_BAD1
70656      U_BAD
70657      _WARN_
70658      BAD
70659      );
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VALIDATE(keep= F_BAD I_BAD P_BAD0 P_BAD1 R_BAD0 R_BAD1
U_BAD _WARN_ BAD );
70660      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1788 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.11 seconds
 
NOTE: There were 1788 observations read from the data set EMWS1.BINNING_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS1.NEURAL_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1788 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Neural_14WZ48T nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_14WZ48T;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural_14WZ48T(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMCLASSIFICATION WORK.Neural_14WZ48T;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural_14WZ48T;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1996644295 _NEVENTS
357 _NNONEVENTS 1431 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1788));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0062055687 OVLMAX 0.9928458405 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1788 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(1788/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1788)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 1788/20) ) / (
AVGNUMRESP / (1788/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 1788/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 1788/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
74950      %let _cn = %sysfunc(getoption(CENTER));
74951      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
74952      proc print data=EMWS1.Neural_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMREPORTFIT noobs label;
74953      var STAT LABEL TRAIN
74954      VALIDATE
74955      TEST
74956      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
74957      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
74958      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
74959      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
74960      run;
 
NOTE: There were 21 observations read from the data set EMWS1.NEURAL_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 33.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
74961      title10;
MPRINT(EM_DIAGRAM):   title10;
74962      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
74963      proc sort data=EMWS1.Neural_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Neural_EMCLASSIFICATION nothreads;
74964      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
74965      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL_EMCLASSIFICATION.
NOTE: The data set EMWS1.NEURAL_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
 
 
74966      %let _cn = %sysfunc(getoption(CENTER));
74967      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
74968      proc print data=EMWS1.Neural_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMCLASSIFICATION noobs label;
74969      var from into pct_row pct_col count percent
74970      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
74971      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
74972      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
74973      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
74974      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
74975      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
74976      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
74977      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
74978      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
74979      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
74980      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
74981      run;
 
NOTE: There were 8 observations read from the data set EMWS1.NEURAL_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 34.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
74982      title9;
MPRINT(EM_DIAGRAM):   title9;
74983      title10;
MPRINT(EM_DIAGRAM):   title10;
74984      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
74985      %let _cn = %sysfunc(getoption(CENTER));
74986      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
74987      data EMWS1.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMEVENTREPORT;
74988      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
74988    ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
74989      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
74989    !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
74989    ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
74989    ! FALSEEVENT
74990      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
74990    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
74990    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
74991         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
74992      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
74993      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
74994      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
74995      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
74996      set EMWS1.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMEVENTREPORT;
74997      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL_EMEVENTREPORT.
NOTE: The data set EMWS1.NEURAL_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.06 seconds
 
 
74998      proc print data=EMWS1.Neural_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMEVENTREPORT noobs label;
74999      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
75000      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
75001      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
75002      run;
 
NOTE: There were 2 observations read from the data set EMWS1.NEURAL_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 35.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
75003      title10;
MPRINT(EM_DIAGRAM):   title10;
75004      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
75005      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
75006      modify Neural_EMRANK;
MPRINT(EM_DIAGRAM):   modify Neural_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
75007      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
75008      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
75008    ! ;
MPRINT(EM_DIAGRAM):   run;
75009      run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL_EMRANK.DATA.
75010      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           1.82 seconds
      cpu time            0.54 seconds
 
 
75011      %let _cn = %sysfunc(getoption(CENTER));
75012      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
75013      proc print data=EMWS1.Neural_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMRANK label noobs;
75014      var
75015      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
75016      by
75017      notsorted DATAROLE
75018      notsorted TARGET
75019      notsorted TARGETLABEL
75020      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
75021      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
75022      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
75023      run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL_EMRANK.
NOTE: The PROCEDURE PRINT printed page 36.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
75024      title10;
MPRINT(EM_DIAGRAM):   title10;
75025      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
75026      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
75027      modify Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
75028      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
75028    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
75029      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
75029    ! ;
MPRINT(EM_DIAGRAM):   run;
75030      run;
 
NOTE: MODIFY was successful for EMWS1.NEURAL_EMSCOREDIST.DATA.
75031      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           2.06 seconds
      cpu time            0.46 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Neural_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "BAD" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
