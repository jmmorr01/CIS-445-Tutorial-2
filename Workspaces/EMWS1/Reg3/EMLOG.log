*------------------------------------------------------------*
User:                jmmorr01
Date:                October 25, 2018
Time:                23:49:34
Site:                70080761
Platform:            X64_8PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 25, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:49:17" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                October 25, 2018
Time:                23:49:17
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0E9DMO3 "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0E9DMO3 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 25, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:49:17" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                jmmorr01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080761";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 25, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:49:17" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                jmmorr01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
22590      proc freq data=EMWS1.Reg3_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Reg3_VariableSet noprint;
22591      table ROLE*LEVEL/out=WORK.Reg3META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Reg3META;
22592      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 29 observations read from the data set EMWS1.REG3_VARIABLESET.
NOTE: The data set WORK.REG3META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
 
 
22593      proc print data=WORK.Reg3META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg3META label noobs;
22594      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
22595      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
22596      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22597      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
22598      run;
 
NOTE: There were 5 observations read from the data set WORK.REG3META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22599      title10;
MPRINT(EM_DIAGRAM):   title10;
22600      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.BINNING_TRAIN EMWS1.BINNING_TRAIN
EMWS1.BINNING_TRAIN EMWS1.BINNING_TRAIN EMWS1 BINNING_TRAIN
EMWS1.BINNING_TRAIN EMWS1.BINNING_TRAIN
EMWS1.BINNING_TRAIN EMWS1.BINNING_TRAIN EMWS1 BINNING_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.BINNING_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class BAD(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=BAD));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids_BAD_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
22629      data WORK.Reg3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Reg3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
22630      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
22631      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
22632         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
22633      set EMWS1.IDS_BAD_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS_BAD_DM( where=(_TYPE_="TARGET"));
22634      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
22635      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
22636      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
22637      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
22638      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
22639      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
22640      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
22641      end;
MPRINT(EM_DIAGRAM):   end;
22642      output;
MPRINT(EM_DIAGRAM):   output;
22643      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.REG3_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
22644      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22645      proc print data=WORK.Reg3_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg3_EVENT noobs label;
22646      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
22647      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22648      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
22649      run;
 
NOTE: There were 1 observations read from the data set WORK.REG3_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22650      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "BAD"."
22651      proc print data = EMWS1.Ids_BAD_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_BAD_DM noobs label;
22652      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
22653      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
22654      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
22655      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22656      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
22657      run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS_BAD_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
22658      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg3: Preparing metadata for Training *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M0HB27H6;
MPRINT(EM_DIAGRAM):   set WORK.M0HB27H6;
MPRINT(EM_DIAGRAM):   where use = 'Y' or (role = 'INPUT' and use = 'D') ;
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if use = 'D' then use = 'Y';
MPRINT(EM_DIAGRAM):   run;
22668      data WORK.M0HB27H6;
MPRINT(EM_DIAGRAM):    data WORK.M0HB27H6;
22669      set WORK.M0HB27H6 end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M0HB27H6 end=eof;
22670      output;
MPRINT(EM_DIAGRAM):   output;
22671      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
22672      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
22673      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
22674      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
22675      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
22676      output;
MPRINT(EM_DIAGRAM):   output;
22677      end;
MPRINT(EM_DIAGRAM):   end;
22678      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 15 observations read from the data set WORK.M0HB27H6.
NOTE: The data set WORK.M0HB27H6 has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_BAD_DD.
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
NOTE: There were 2 observations read from the data set EMWS1.IDS_BAD_DD.
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
22679      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22680      * Reg3: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Reg3: Create decision matrix;
22681      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22682      data WORK.BAD;
MPRINT(EM_DIAGRAM):   data WORK.BAD;
22683        length   BAD                              $  32
22684                 COUNT                                8
22685                 DATAPRIOR                            8
22686                 TRAINPRIOR                           8
22687                 DECPRIOR                             8
22688                 DECISION1                            8
22689                 DECISION2                            8
22690                 ;
MPRINT(EM_DIAGRAM):   length BAD $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
22691
22692        label    COUNT="Level Counts"
22693                 DATAPRIOR="Data Proportions"
22694                 TRAINPRIOR="Training Proportions"
22695                 DECPRIOR="Decision Priors"
22696                 DECISION1="1"
22697                 DECISION2="0"
22698                 ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
22699        format   COUNT 10.
22700                 ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
22701      BAD="1"; COUNT=1189; DATAPRIOR=0.1994966442953; TRAINPRIOR=0.1994966442953; DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   BAD="1";
MPRINT(EM_DIAGRAM):   COUNT=1189;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.1994966442953;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.1994966442953;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
22702      output;
MPRINT(EM_DIAGRAM):   output;
22703      BAD="0"; COUNT=4771; DATAPRIOR=0.80050335570469; TRAINPRIOR=0.80050335570469; DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   BAD="0";
MPRINT(EM_DIAGRAM):   COUNT=4771;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.80050335570469;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.80050335570469;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
22704      output;
MPRINT(EM_DIAGRAM):   output;
22705      ;
MPRINT(EM_DIAGRAM):   ;
22706      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22707      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
22708      modify BAD(type=PROFIT label=BAD);
MPRINT(EM_DIAGRAM):   modify BAD(type=PROFIT label= BAD);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
22709      label DECISION1= '1';
22710      label DECISION2= '0';
22711      run;
 
NOTE: MODIFY was successful for WORK.BAD.DATA.
22712      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
22713      data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
22714      set EMWS1.BINNING_TRAIN(keep=
22715      BAD GRP_INDELINQ GRP_INDEROG GRP_JOB GRP_LOG_CLAGE GRP_LOG_CLNO
22716      GRP_LOG_DEBTINC GRP_LOG_DELINQ GRP_LOG_DEROG GRP_LOG_LOAN GRP_LOG_MORTDUE
22717      GRP_LOG_VALUE GRP_LOG_YOJ GRP_NINQ GRP_REASON );
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_TRAIN(keep= BAD GRP_INDELINQ GRP_INDEROG GRP_JOB GRP_LOG_CLAGE GRP_LOG_CLNO GRP_LOG_DEBTINC GRP_LOG_DELINQ GRP_LOG_DEROG GRP_LOG_LOAN GRP_LOG_MORTDUE GRP_LOG_VALUE GRP_LOG_YOJ GRP_NINQ GRP_REASON );
22718      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Reg3: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22719      *------------------------------------------------------------* ;
22720      * Reg3: DMDBClass Macro ;
22721      *------------------------------------------------------------* ;
22722      %macro DMDBClass;
22723          BAD(DESC) GRP_INDELINQ(ASC) GRP_INDEROG(ASC) GRP_JOB(ASC) GRP_LOG_CLAGE(ASC)
22724         GRP_LOG_CLNO(ASC) GRP_LOG_DEBTINC(ASC) GRP_LOG_DELINQ(ASC) GRP_LOG_DEROG(ASC)
22725         GRP_LOG_LOAN(ASC) GRP_LOG_MORTDUE(ASC) GRP_LOG_VALUE(ASC) GRP_LOG_YOJ(ASC)
22726         GRP_NINQ(ASC) GRP_REASON(ASC)
22727      %mend DMDBClass;
22728      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22729      * Reg3: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Reg3: DMDBVar Macro ;
22730      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
22731      %macro DMDBVar;
22732
22733      %mend DMDBVar;
22734      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22735      * Reg3: Create DMDB;
MPRINT(EM_DIAGRAM):   * Reg3: Create DMDB;
22736      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22737      proc dmdb batch data=WORK.EM_DMREG
22738      dmdbcat=WORK.Reg3_DMDB
22739      maxlevel = 513
22740      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Reg3_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
22741      class %DMDBClass;
MPRINT(DMDBCLASS):   BAD(DESC) GRP_INDELINQ(ASC) GRP_INDEROG(ASC) GRP_JOB(ASC) GRP_LOG_CLAGE(ASC) GRP_LOG_CLNO(ASC) GRP_LOG_DEBTINC(ASC) GRP_LOG_DELINQ(ASC) GRP_LOG_DEROG(ASC) GRP_LOG_LOAN(ASC) GRP_LOG_MORTDUE(ASC) GRP_LOG_VALUE(ASC) GRP_LOG_YOJ(ASC)
GRP_NINQ(ASC) GRP_REASON(ASC)
MPRINT(EM_DIAGRAM):  ;
22742      var %DMDBVar;
MPRINT(EM_DIAGRAM):   var
MPRINT(EM_DIAGRAM):  ;
22743      target
22744      BAD
22745      ;
MPRINT(EM_DIAGRAM):   target BAD ;
22746      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2382   Memory used = 511K.
NOTE: There were 2382 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2382 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2382 observations read from the data set EMWS1.BINNING_TRAIN.
NOTE: There were 2382 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.14 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
22747      quit;
22748      *--- end code ---*;
 
22749      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22750      * Reg3: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Reg3: Run DMREG procedure;
22751      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22752      proc dmreg data=EM_DMREG dmdbcat=WORK.Reg3_DMDB
22753      validata = EMWS1.BINNING_VALIDATE
22754      outest = EMWS1.Reg3_EMESTIMATE
22755      outterms = EMWS1.Reg3_OUTTERMS
22756      outmap= EMWS1.Reg3_MAPDS namelen=200
22757      ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Reg3_DMDB validata = EMWS1.BINNING_VALIDATE outest = EMWS1.Reg3_EMESTIMATE outterms = EMWS1.Reg3_OUTTERMS outmap= EMWS1.Reg3_MAPDS namelen=200 ;
22758      class
22759      BAD
22760      GRP_INDELINQ
22761      GRP_INDEROG
22762      GRP_JOB
22763      GRP_LOG_CLAGE
22764      GRP_LOG_CLNO
22765      GRP_LOG_DEBTINC
22766      GRP_LOG_DELINQ
22767      GRP_LOG_DEROG
22768      GRP_LOG_LOAN
22769      GRP_LOG_MORTDUE
22770      GRP_LOG_VALUE
22771      GRP_LOG_YOJ
22772      GRP_NINQ
22773      GRP_REASON
22774      ;
MPRINT(EM_DIAGRAM):   class BAD GRP_INDELINQ GRP_INDEROG GRP_JOB GRP_LOG_CLAGE GRP_LOG_CLNO GRP_LOG_DEBTINC GRP_LOG_DELINQ GRP_LOG_DEROG GRP_LOG_LOAN GRP_LOG_MORTDUE GRP_LOG_VALUE GRP_LOG_YOJ GRP_NINQ GRP_REASON ;
22775      model BAD =
22776      GRP_INDELINQ
22777      GRP_INDEROG
22778      GRP_JOB
22779      GRP_LOG_CLAGE
22780      GRP_LOG_CLNO
22781      GRP_LOG_DEBTINC
22782      GRP_LOG_DELINQ
22783      GRP_LOG_DEROG
22784      GRP_LOG_LOAN
22785      GRP_LOG_MORTDUE
22786      GRP_LOG_VALUE
22787      GRP_LOG_YOJ
22788      GRP_NINQ
22789      GRP_REASON
22790      /error=binomial link=LOGIT
22791      coding=DEVIATION
22792      nodesignprint
22793      selection=FORWARD choose=NONE
22794      Hierarchy=CLASS
22795      Rule=NONE
22796      SlEntry=0.05
22797      SlStay=0.025
22798      Start=10
22799      include=0
22800      MaxStep=0
22801      ;
MPRINT(EM_DIAGRAM):   model BAD = GRP_INDELINQ GRP_INDEROG GRP_JOB GRP_LOG_CLAGE GRP_LOG_CLNO GRP_LOG_DEBTINC GRP_LOG_DELINQ GRP_LOG_DEROG GRP_LOG_LOAN GRP_LOG_MORTDUE GRP_LOG_VALUE GRP_LOG_YOJ GRP_NINQ GRP_REASON /error=binomial link=LOGIT
coding=DEVIATION nodesignprint selection=FORWARD choose=NONE Hierarchy=CLASS Rule=NONE SlEntry=0.05 SlStay=0.025 Start=10 include=0 MaxStep=0 ;
22802      ;
MPRINT(EM_DIAGRAM):   ;
22803      score data=EMWS1.BINNING_TEST
22804      out=_null_
22805      outfit=EMWS1.Reg3_FITTEST
22806      role = TEST
22807      ;
MPRINT(EM_DIAGRAM):   score data=EMWS1.BINNING_TEST out=_null_ outfit=EMWS1.Reg3_FITTEST role = TEST ;
22808      code file="J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMPUBLISHSCORE.sas"
22809      group=Reg3
22810      ;
MPRINT(EM_DIAGRAM):   code file="J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMPUBLISHSCORE.sas" group=Reg3 ;
22811      code file="J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMFLOWSCORE.sas"
22812      group=Reg3
22813      residual
22814      ;
MPRINT(EM_DIAGRAM):   code file="J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMFLOWSCORE.sas" group=Reg3 residual ;
22815      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: MAXSTEP= ignored.
NOTE: SLSTAY= ignored.
 
NOTE: PROC DMREG is modeling the probability that BAD=1.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: External file J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMPUBLISHSCORE.sas opened.
NOTE: External file J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMFLOWSCORE.sas opened.
NOTE: There were 1790 observations read from the data set EMWS1.PART_TEST.
NOTE: View EMWS1.BINNING_TEST.VIEW used (Total process time):
      real time           0.65 seconds
      cpu time            0.45 seconds
 
NOTE: There were 1790 observations read from the data set EMWS1.TRANS_TEST.
NOTE: There were 1788 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: View EMWS1.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.90 seconds
      cpu time            0.59 seconds
 
NOTE: There were 1788 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: There were 2382 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2382 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           1.03 seconds
      cpu time            0.67 seconds
 
NOTE: There were 2382 observations read from the data set EMWS1.BINNING_TRAIN.
NOTE: There were 2382 observations read from the data set WORK.EM_DMREG.
NOTE: There were 1788 observations read from the data set EMWS1.BINNING_VALIDATE.
NOTE: There were 1790 observations read from the data set EMWS1.BINNING_TEST.
NOTE: The data set EMWS1.REG3_EMESTIMATE has 12 observations and 79 variables.
NOTE: The data set EMWS1.REG3_OUTTERMS has 37 observations and 6 variables.
NOTE: The data set EMWS1.REG3_MAPDS has 2 observations and 44 variables.
NOTE: The data set EMWS1.REG3_FITTEST has 3 observations and 15 variables.
NOTE: The PROCEDURE DMREG printed pages 4-7.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           1.28 seconds
      cpu time            0.73 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
22816      quit;
 
22817      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
22818      delete Reg3_DMDB;
MPRINT(EM_DIAGRAM):   delete Reg3_DMDB;
22819      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.REG3_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
22820      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22821      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
22822      delete Reg3_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Reg3_DMDB / memtype=catalog;
22823      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.REG3_DMDB (memtype=CATALOG).
22824      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22825      data WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):    data WORK.ESTIMATE;
22826      length _NAME_ $32;
MPRINT(EM_DIAGRAM):   length _NAME_ $32;
22827      set EMWS1.Reg3_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_EMESTIMATE;
22828      drop _AIC_--_VMISC_
22829      ;
MPRINT(EM_DIAGRAM):   drop _AIC_--_VMISC_ ;
22830      where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
22831      drop _STEP_ _CHOSEN_;
MPRINT(EM_DIAGRAM):   drop _STEP_ _CHOSEN_;
22832      select(_TYPE_);
MPRINT(EM_DIAGRAM):   select(_TYPE_);
22833      when('PARMS') _NAME_='Coefficient';
MPRINT(EM_DIAGRAM):   when('PARMS') _NAME_='Coefficient';
22834      when('T') _NAME_='tValue';
MPRINT(EM_DIAGRAM):   when('T') _NAME_='tValue';
22835      when('P') _NAME_='PValue';
MPRINT(EM_DIAGRAM):   when('P') _NAME_='PValue';
22836      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
22837      end;
MPRINT(EM_DIAGRAM):   end;
22838      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG3_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set WORK.ESTIMATE has 3 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
22839      proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
22840      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 43 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
22841      proc transpose data=EMWS1.Reg3_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable
22842      ));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg3_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable ));
22843      var 'GRP_INDELINQ3'n--'GRP_REASON2'n;
MPRINT(EM_DIAGRAM):   var 'GRP_INDELINQ3'n--'GRP_REASON2'n;
22844      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG3_MAPDS.
NOTE: The data set WORK.MAP has 42 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
22845      proc sort data=WORK.MAP;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MAP;
22846      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
22847      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 42 observations read from the data set WORK.MAP.
NOTE: The data set WORK.MAP has 42 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22848      proc sort data=WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.ESTIMATE;
22849      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
22850      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 43 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 43 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
22851      data EMWS1.Reg3_EFFECTS(rename=(_LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):   data EMWS1.Reg3_EFFECTS(rename=(_LABEL_=EffectLabel));
22852      length Variable ClassLevel $32;
MPRINT(EM_DIAGRAM):   length Variable ClassLevel $32;
22853      merge WORK.ESTIMATE WORK.MAP;
MPRINT(EM_DIAGRAM):   merge WORK.ESTIMATE WORK.MAP;
22854      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
22855      label Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))" Variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Sign = "%sysfunc(sasmsg(sashelp.dmine, rpt_sign_vlabel, NOQUOTE))" ClassLevel =
22856         "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))" Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))" Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" _LABEL_ =
22857         "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" CODE = "%sysfunc(sasmsg(sashelp.dmine, rpt_scorecodevar_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Effect = "Effect" Variable = "Variable" Sign = "Sign" ClassLevel = "Level" Abscoefficient = "Absolute Coefficient" Coefficient = "Coefficient" _LABEL_ = "Effect Label" CODE = "Score Code Variable";
22858      label tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))" abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))" PValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))"
22858    ! ;
MPRINT(EM_DIAGRAM):   label tvalue = "T-value" abstvalue = "Absolute T-value" PValue = "P Value";
22859      abstvalue = abs(tValue);
MPRINT(EM_DIAGRAM):   abstvalue = abs(tValue);
22860      if index(Effect, 'Intercept') then do;
MPRINT(EM_DIAGRAM):   if index(Effect, 'Intercept') then do;
22861      variable = 'Intercept';
MPRINT(EM_DIAGRAM):   variable = 'Intercept';
22862      classLevel = scan(_LABEL_, 2, '=');
MPRINT(EM_DIAGRAM):   classLevel = scan(_LABEL_, 2, '=');
22863      end;
MPRINT(EM_DIAGRAM):   end;
22864      if ^indexc(variable, '*') then do;
MPRINT(EM_DIAGRAM):   if ^indexc(variable, '*') then do;
22865      if length(effect)>length(variable) then classlevel = substr(Effect, length(variable)+1);
MPRINT(EM_DIAGRAM):   if length(effect)>length(variable) then classlevel = substr(Effect, length(variable)+1);
22866      end;
MPRINT(EM_DIAGRAM):   end;
22867      if Effect eq '' then Effect = Variable;
MPRINT(EM_DIAGRAM):   if Effect eq '' then Effect = Variable;
22868      if coefficient < 0 then sign = '-';
MPRINT(EM_DIAGRAM):   if coefficient < 0 then sign = '-';
22869      else sign = '+';
MPRINT(EM_DIAGRAM):   else sign = '+';
22870      abscoefficient = abs(coefficient);
MPRINT(EM_DIAGRAM):   abscoefficient = abs(coefficient);
22871      if _LABEL_ = '' then _LABEL_ = Effect;
MPRINT(EM_DIAGRAM):   if _LABEL_ = '' then _LABEL_ = Effect;
22872      if coefficient ne . then output;
MPRINT(EM_DIAGRAM):   if coefficient ne . then output;
22873      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      6 at 22859:13   6 at 22870:18
NOTE: There were 43 observations read from the data set WORK.ESTIMATE.
NOTE: There were 42 observations read from the data set WORK.MAP.
NOTE: The data set EMWS1.REG3_EFFECTS has 37 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
 
 
22874      proc sort data =EMWS1.Reg3_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS1.Reg3_EFFECTS;
22875      by
22876      descending abstvalue;
MPRINT(EM_DIAGRAM):   by descending abstvalue;
22877      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 37 observations read from the data set EMWS1.REG3_EFFECTS.
NOTE: The data set EMWS1.REG3_EFFECTS has 37 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.12 seconds
      cpu time            0.06 seconds
 
 
22878      data EMWS1.Reg3_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg3_EFFECTS;
22879      set EMWS1.Reg3_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_EFFECTS;
22880      format TEffectNum 3.;
MPRINT(EM_DIAGRAM):   format TEffectNum 3.;
22881      label TEffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_teffectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TEffectNum = "TScore Number";
22882      retain TEffectNum;
MPRINT(EM_DIAGRAM):   retain TEffectNum;
22883      TEffectNum = _N_;
MPRINT(EM_DIAGRAM):   TEffectNum = _N_;
22884      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 37 observations read from the data set EMWS1.REG3_EFFECTS.
NOTE: The data set EMWS1.REG3_EFFECTS has 37 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.04 seconds
 
 
22885      proc sort data =EMWS1.Reg3_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS1.Reg3_EFFECTS;
22886      by
22887      descending absCoefficient;
MPRINT(EM_DIAGRAM):   by descending absCoefficient;
22888      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 37 observations read from the data set EMWS1.REG3_EFFECTS.
NOTE: The data set EMWS1.REG3_EFFECTS has 37 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.12 seconds
      cpu time            0.04 seconds
 
 
22889      data EMWS1.Reg3_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg3_EFFECTS;
22890      set EMWS1.Reg3_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_EFFECTS;
22891      format EffectNum 3.;
MPRINT(EM_DIAGRAM):   format EffectNum 3.;
22892      label EffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectNum = "Effect Number";
22893      retain EffectNum;
MPRINT(EM_DIAGRAM):   retain EffectNum;
22894      EffectNum = _N_;
MPRINT(EM_DIAGRAM):   EffectNum = _N_;
22895      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 37 observations read from the data set EMWS1.REG3_EFFECTS.
NOTE: The data set EMWS1.REG3_EFFECTS has 37 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
 
 
22896      proc transpose data=EMWS1.Reg3_EMESTIMATE out=EMWS1.Reg3_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect _LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Reg3_EMESTIMATE out=EMWS1.Reg3_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect _LABEL_=EffectLabel));
22897      where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
22898      var 'GRP_INDELINQ3'n--'GRP_REASON2'n;
MPRINT(EM_DIAGRAM):   var 'GRP_INDELINQ3'n--'GRP_REASON2'n;
22899      by _STEP_;
MPRINT(EM_DIAGRAM):   by _STEP_;
22900      id _TYPE_;
MPRINT(EM_DIAGRAM):   id _TYPE_;
22901      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.REG3_EMESTIMATE.
      WHERE (_CHOSEN_=' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set EMWS1.REG3_ESTIMATEGRID has 126 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.13 seconds
      cpu time            0.04 seconds
 
 
22902      data EMWS1.Reg3_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg3_ESTIMATEGRID;
22903      set EMWS1.Reg3_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_ESTIMATEGRID;
22904      if EffectLabel eq '' then EffectLabel = Effect;
MPRINT(EM_DIAGRAM):   if EffectLabel eq '' then EffectLabel = Effect;
22905      label EffectLabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))" Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))"
22906         Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))" abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))"
22906    ! PValue =
22907         "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectLabel = "Effect Label" Effect = "Effect" Abscoefficient = "Absolute Coefficient" Coefficient = "Coefficient" tvalue = "T-value" abstvalue = "Absolute T-value" PValue = "P Value";
22908      AbsCoefficient = abs(Coefficient);
MPRINT(EM_DIAGRAM):   AbsCoefficient = abs(Coefficient);
22909      AbsTValue = abs(TValue);
MPRINT(EM_DIAGRAM):   AbsTValue = abs(TValue);
22910      where coefficient ne .;
MPRINT(EM_DIAGRAM):   where coefficient ne .;
22911      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable PValue is uninitialized.
NOTE: There were 98 observations read from the data set EMWS1.REG3_ESTIMATEGRID.
      WHERE coefficient not = .;
NOTE: The data set EMWS1.REG3_ESTIMATEGRID has 98 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 25, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:49:23" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                October 25, 2018
Time:                23:49:23
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1L9O6GW "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1L9O6GW new;
MPRINT(EM_DIAGRAM):   run;
23013      proc transpose data=EMWS1.Reg3_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Reg3_EMESTIMATE out=WORK.TEMPREG;
23014      where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
23015      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG3_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 76 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
23016      proc transpose data=EMWS1.Reg3_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg3_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
23017      var "GRP_INDELINQ3"n--"GRP_REASON2"n;
MPRINT(EM_DIAGRAM):   var "GRP_INDELINQ3"n--"GRP_REASON2"n;
23018      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 2 observations read from the data set EMWS1.REG3_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 42 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
23019      proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
23020      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
23021      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 76 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 76 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23022      proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
23023      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
23024      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 42 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 42 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23025      data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
23026      merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
23027      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
23028      if (ina and inb) and BAD ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and BAD ne . then output;
23029      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 76 observations read from the data set WORK.TEMPREG.
NOTE: There were 42 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 36 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23030      data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
23031      length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
23032      set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
23033      i=1;
MPRINT(EM_DIAGRAM):   i=1;
23034      do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
23035      term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
23036      i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
23037      output;
MPRINT(EM_DIAGRAM):   output;
23038      end;
MPRINT(EM_DIAGRAM):   end;
23039      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 36 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23040      proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
23041      by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
23042      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set WORK.TEMPREG3.
NOTE: 24 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 12 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
23043      filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg3: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23044      *------------------------------------------------------------*;
23045      * Reg3: Scoring DATA data;
23046      *------------------------------------------------------------*;
23047      data EMWS1.Reg3_TRAIN
23048      / view=EMWS1.Reg3_TRAIN
23049      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg3_TRAIN / view=EMWS1.Reg3_TRAIN ;
23050      set EMWS1.BINNING_TRAIN
23051      ;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_TRAIN ;
23052      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMFLOWSCORE.sas.
23053     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
23054     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
23055     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
23056     +
23057     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
23058     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
23059     +
23060     +length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
23061     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
23062     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
23063     +array REG3DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG3DRF [2] $12 _temporary_ ('1' '0' );
23064     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
23065     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
23066     +ARRAY REG3DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG3DRU[2] _TEMPORARY_ (1 0);
23067     +
23068     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
23069     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
23070     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
23071     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
23072     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
23073     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
23074     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
23075     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = 1;
23076     +end;
MPRINT(EM_DIAGRAM):   end;
23077     +else do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
23078     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
23079     +      _Y = 1;
MPRINT(EM_DIAGRAM):   end;
23080     +   end;
23081     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
23082     +      _Y = 0;
MPRINT(EM_DIAGRAM):   end;
23083     +   end;
MPRINT(EM_DIAGRAM):   end;
23084     +   else do;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
23085     +      _Y = .;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
23086     +   end;
23087     +end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDELINQ ;
23088     +
MPRINT(EM_DIAGRAM):   drop _1_0 ;
23089     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDELINQ ) then do;
23090     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _1_0 = .;
23091     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23092     +*** Generate dummy variables for GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23093     +drop _1_0 ;
MPRINT(EM_DIAGRAM):   end;
23094     +if missing( GRP_INDELINQ ) then do;
23095     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   else do;
23096     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
23097     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23098     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDELINQ , BEST12. );
23099     +else do;
23100     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
23101     +   _dm12 = put( GRP_INDELINQ , BEST12. );
23102     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
23103     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
23104     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
23105     +   end;
23106     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
23107     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23108     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23109     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23110     +      _1_0 = .;
23111     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDEROG ;
23112     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
23113     +   end;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDEROG ) then do;
23114     +end;
MPRINT(EM_DIAGRAM):   _2_0 = .;
23115     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23116     +*** Generate dummy variables for GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23117     +drop _2_0 ;
MPRINT(EM_DIAGRAM):   end;
23118     +if missing( GRP_INDEROG ) then do;
23119     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   else do;
23120     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
23121     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23122     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDEROG , BEST12. );
23123     +else do;
23124     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
23125     +   _dm12 = put( GRP_INDEROG , BEST12. );
23126     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
23127     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
23128     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
23129     +   end;
23130     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
23131     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23132     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23133     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23134     +      _2_0 = .;
23135     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_JOB ;
23136     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 ;
23137     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23138     +end;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
23139     +
MPRINT(EM_DIAGRAM):   _3_1 = 0;
23140     +*** Generate dummy variables for GRP_JOB ;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
23141     +drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 ;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
23142     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
23143     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_5 = 0;
23144     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_JOB ) then do;
23145     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = .;
23146     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = .;
23147     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = .;
23148     +_3_5 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = .;
23149     +if missing( GRP_JOB ) then do;
MPRINT(EM_DIAGRAM):   _3_4 = .;
23150     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
23151     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23152     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23153     +   _3_3 = .;
MPRINT(EM_DIAGRAM):   end;
23154     +   _3_4 = .;
23155     +   _3_5 = .;
MPRINT(EM_DIAGRAM):   else do;
23156     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
23157     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23158     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_JOB , BEST12. );
23159     +else do;
23160     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
23161     +   _dm12 = put( GRP_JOB , BEST12. );
23162     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
23163     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23164     +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   end;
23165     +      if _dm12 <= '2'  then do;
23166     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
23167     +            _3_0 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
23168     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
23169     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23170     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23171     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
23172     +               _3_1 = 1;
23173     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
23174     +            end;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
23175     +         end;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
23176     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23177     +      else do;
MPRINT(EM_DIAGRAM):   end;
23178     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else do;
23179     +            _3_2 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
23180     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
23181     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23182     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23183     +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   end;
23184     +               _3_3 = 1;
MPRINT(EM_DIAGRAM):   end;
23185     +               _dm_find = 1;
23186     +            end;
MPRINT(EM_DIAGRAM):   else do;
23187     +         end;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
23188     +      end;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
23189     +   end;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
23190     +   else do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
23191     +      if _dm12 <= '6'  then do;
23192     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else do;
23193     +            _3_4 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
23194     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _3_5 = 1;
23195     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23196     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23197     +            if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   end;
23198     +               _3_5 = 1;
23199     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
23200     +            end;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
23201     +         end;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
23202     +      end;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
23203     +      else do;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
23204     +         if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
23205     +            _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_5 = -1;
23206     +            _3_1 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23207     +            _3_2 = -1;
MPRINT(EM_DIAGRAM):   end;
23208     +            _3_3 = -1;
MPRINT(EM_DIAGRAM):   end;
23209     +            _3_4 = -1;
MPRINT(EM_DIAGRAM):   end;
23210     +            _3_5 = -1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
23211     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _3_0 = .;
23212     +         end;
MPRINT(EM_DIAGRAM):   _3_1 = .;
23213     +      end;
MPRINT(EM_DIAGRAM):   _3_2 = .;
23214     +   end;
MPRINT(EM_DIAGRAM):   _3_3 = .;
23215     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _3_4 = .;
23216     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
23217     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23218     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23219     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   end;
23220     +      _3_4 = .;
MPRINT(EM_DIAGRAM):   end;
23221     +      _3_5 = .;
23222     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLAGE ;
23223     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 ;
23224     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23225     +end;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
23226     +
MPRINT(EM_DIAGRAM):   _4_1 = 0;
23227     +*** Generate dummy variables for GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
23228     +drop _4_0 _4_1 _4_2 _4_3 ;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
23229     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLAGE ) then do;
23230     +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = .;
23231     +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = .;
23232     +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = .;
23233     +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = .;
23234     +if missing( GRP_LOG_CLAGE ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23235     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23236     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   end;
23237     +   _4_2 = .;
23238     +   _4_3 = .;
MPRINT(EM_DIAGRAM):   else do;
23239     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
23240     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23241     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
23242     +else do;
23243     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
23244     +   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
23245     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
23246     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23247     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   end;
23248     +      if _dm12 <= '2'  then do;
23249     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
23250     +            _4_0 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
23251     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
23252     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23253     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23254     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
23255     +               _4_1 = 1;
23256     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
23257     +            end;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
23258     +         end;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
23259     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23260     +      else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23261     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   end;
23262     +            _4_2 = 1;
23263     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
23264     +         end;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
23265     +      end;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
23266     +   end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23267     +   else do;
MPRINT(EM_DIAGRAM):   end;
23268     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else do;
23269     +         _4_3 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
23270     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
23271     +      end;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
23272     +      else do;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
23273     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23274     +            _4_0 = -1;
MPRINT(EM_DIAGRAM):   end;
23275     +            _4_1 = -1;
MPRINT(EM_DIAGRAM):   end;
23276     +            _4_2 = -1;
MPRINT(EM_DIAGRAM):   end;
23277     +            _4_3 = -1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
23278     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _4_0 = .;
23279     +         end;
MPRINT(EM_DIAGRAM):   _4_1 = .;
23280     +      end;
MPRINT(EM_DIAGRAM):   _4_2 = .;
23281     +   end;
MPRINT(EM_DIAGRAM):   _4_3 = .;
23282     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23283     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23284     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   end;
23285     +      _4_2 = .;
MPRINT(EM_DIAGRAM):   end;
23286     +      _4_3 = .;
23287     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLNO ;
23288     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _5_0 _5_1 _5_2 _5_3 ;
23289     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23290     +end;
MPRINT(EM_DIAGRAM):   _5_0 = 0;
23291     +
MPRINT(EM_DIAGRAM):   _5_1 = 0;
23292     +*** Generate dummy variables for GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   _5_2 = 0;
23293     +drop _5_0 _5_1 _5_2 _5_3 ;
MPRINT(EM_DIAGRAM):   _5_3 = 0;
23294     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLNO ) then do;
23295     +_5_0 = 0;
MPRINT(EM_DIAGRAM):   _5_0 = .;
23296     +_5_1 = 0;
MPRINT(EM_DIAGRAM):   _5_1 = .;
23297     +_5_2 = 0;
MPRINT(EM_DIAGRAM):   _5_2 = .;
23298     +_5_3 = 0;
MPRINT(EM_DIAGRAM):   _5_3 = .;
23299     +if missing( GRP_LOG_CLNO ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23300     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23301     +   _5_1 = .;
MPRINT(EM_DIAGRAM):   end;
23302     +   _5_2 = .;
23303     +   _5_3 = .;
MPRINT(EM_DIAGRAM):   else do;
23304     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
23305     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23306     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLNO , BEST12. );
23307     +else do;
23308     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
23309     +   _dm12 = put( GRP_LOG_CLNO , BEST12. );
23310     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
23311     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23312     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   end;
23313     +      if _dm12 <= '2'  then do;
23314     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
23315     +            _5_0 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
23316     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _5_1 = 1;
23317     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23318     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23319     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
23320     +               _5_1 = 1;
23321     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
23322     +            end;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
23323     +         end;
MPRINT(EM_DIAGRAM):   _5_2 = 1;
23324     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23325     +      else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23326     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   end;
23327     +            _5_2 = 1;
23328     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
23329     +         end;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
23330     +      end;
MPRINT(EM_DIAGRAM):   _5_3 = 1;
23331     +   end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23332     +   else do;
MPRINT(EM_DIAGRAM):   end;
23333     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else do;
23334     +         _5_3 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
23335     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
23336     +      end;
MPRINT(EM_DIAGRAM):   _5_1 = -1;
23337     +      else do;
MPRINT(EM_DIAGRAM):   _5_2 = -1;
MPRINT(EM_DIAGRAM):   _5_3 = -1;
23338     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23339     +            _5_0 = -1;
MPRINT(EM_DIAGRAM):   end;
23340     +            _5_1 = -1;
MPRINT(EM_DIAGRAM):   end;
23341     +            _5_2 = -1;
MPRINT(EM_DIAGRAM):   end;
23342     +            _5_3 = -1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
23343     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _5_0 = .;
23344     +         end;
MPRINT(EM_DIAGRAM):   _5_1 = .;
23345     +      end;
MPRINT(EM_DIAGRAM):   _5_2 = .;
23346     +   end;
MPRINT(EM_DIAGRAM):   _5_3 = .;
23347     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23348     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23349     +      _5_1 = .;
MPRINT(EM_DIAGRAM):   end;
23350     +      _5_2 = .;
MPRINT(EM_DIAGRAM):   end;
23351     +      _5_3 = .;
23352     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEBTINC ;
23353     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 ;
23354     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23355     +end;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
23356     +
MPRINT(EM_DIAGRAM):   _6_1 = 0;
23357     +*** Generate dummy variables for GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
23358     +drop _6_0 _6_1 _6_2 _6_3 ;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
23359     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEBTINC ) then do;
23360     +_6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = .;
23361     +_6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = .;
23362     +_6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = .;
23363     +_6_3 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = .;
23364     +if missing( GRP_LOG_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23365     +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23366     +   _6_1 = .;
MPRINT(EM_DIAGRAM):   end;
23367     +   _6_2 = .;
23368     +   _6_3 = .;
MPRINT(EM_DIAGRAM):   else do;
23369     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
23370     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23371     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
23372     +else do;
23373     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
23374     +   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
23375     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
23376     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23377     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   end;
23378     +      if _dm12 <= '2'  then do;
23379     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
23380     +            _6_0 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
23381     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
23382     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23383     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23384     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
23385     +               _6_1 = 1;
23386     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
23387     +            end;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
23388     +         end;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
23389     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23390     +      else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23391     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   end;
23392     +            _6_2 = 1;
23393     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
23394     +         end;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
23395     +      end;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
23396     +   end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23397     +   else do;
MPRINT(EM_DIAGRAM):   end;
23398     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else do;
23399     +         _6_3 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
23400     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
23401     +      end;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
23402     +      else do;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
23403     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23404     +            _6_0 = -1;
MPRINT(EM_DIAGRAM):   end;
23405     +            _6_1 = -1;
MPRINT(EM_DIAGRAM):   end;
23406     +            _6_2 = -1;
MPRINT(EM_DIAGRAM):   end;
23407     +            _6_3 = -1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
23408     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _6_0 = .;
23409     +         end;
MPRINT(EM_DIAGRAM):   _6_1 = .;
23410     +      end;
MPRINT(EM_DIAGRAM):   _6_2 = .;
23411     +   end;
MPRINT(EM_DIAGRAM):   _6_3 = .;
23412     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23413     +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23414     +      _6_1 = .;
MPRINT(EM_DIAGRAM):   end;
23415     +      _6_2 = .;
MPRINT(EM_DIAGRAM):   end;
23416     +      _6_3 = .;
23417     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DELINQ ;
23418     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
23419     +   end;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DELINQ ) then do;
23420     +end;
MPRINT(EM_DIAGRAM):   _7_0 = .;
23421     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23422     +*** Generate dummy variables for GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23423     +drop _7_0 ;
MPRINT(EM_DIAGRAM):   end;
23424     +if missing( GRP_LOG_DELINQ ) then do;
23425     +   _7_0 = .;
MPRINT(EM_DIAGRAM):   else do;
23426     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
23427     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23428     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
23429     +else do;
23430     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
23431     +   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
23432     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
23433     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
23434     +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   end;
23435     +   end;
23436     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
23437     +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23438     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23439     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23440     +      _7_0 = .;
23441     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEROG ;
23442     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
23443     +   end;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEROG ) then do;
23444     +end;
MPRINT(EM_DIAGRAM):   _8_0 = .;
23445     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23446     +*** Generate dummy variables for GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23447     +drop _8_0 ;
MPRINT(EM_DIAGRAM):   end;
23448     +if missing( GRP_LOG_DEROG ) then do;
23449     +   _8_0 = .;
MPRINT(EM_DIAGRAM):   else do;
23450     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
23451     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23452     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEROG , BEST12. );
23453     +else do;
23454     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
23455     +   _dm12 = put( GRP_LOG_DEROG , BEST12. );
23456     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
23457     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
23458     +      _8_0 = -1;
MPRINT(EM_DIAGRAM):   end;
23459     +   end;
23460     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
23461     +      _8_0 = 1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23462     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23463     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23464     +      _8_0 = .;
23465     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_LOAN ;
23466     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 ;
23467     +   end;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_LOAN ) then do;
23468     +end;
MPRINT(EM_DIAGRAM):   _9_0 = .;
23469     +
MPRINT(EM_DIAGRAM):   _9_1 = .;
23470     +*** Generate dummy variables for GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   _9_2 = .;
23471     +drop _9_0 _9_1 _9_2 ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23472     +if missing( GRP_LOG_LOAN ) then do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23473     +   _9_0 = .;
MPRINT(EM_DIAGRAM):   end;
23474     +   _9_1 = .;
23475     +   _9_2 = .;
MPRINT(EM_DIAGRAM):   else do;
23476     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
23477     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23478     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_LOAN , BEST12. );
23479     +else do;
23480     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
23481     +   _dm12 = put( GRP_LOG_LOAN , BEST12. );
23482     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
MPRINT(EM_DIAGRAM):   end;
23483     +   if _dm12 = '3'  then do;
23484     +      _9_0 = 0;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
23485     +      _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
23486     +      _9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
23487     +   end;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
23488     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   end;
23489     +      _9_0 = -1;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
23490     +      _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
23491     +      _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
23492     +   end;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
23493     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
23494     +      _9_0 = 1;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
23495     +      _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
23496     +      _9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
23497     +   end;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
23498     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   end;
23499     +      _9_0 = 0;
MPRINT(EM_DIAGRAM):   else do;
23500     +      _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = .;
23501     +      _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = .;
23502     +   end;
MPRINT(EM_DIAGRAM):   _9_2 = .;
23503     +   else do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23504     +      _9_0 = .;
MPRINT(EM_DIAGRAM):   end;
23505     +      _9_1 = .;
MPRINT(EM_DIAGRAM):   end;
23506     +      _9_2 = .;
23507     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_MORTDUE ;
23508     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _10_0 _10_1 _10_2 _10_3 ;
23509     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23510     +end;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
23511     +
MPRINT(EM_DIAGRAM):   _10_1 = 0;
23512     +*** Generate dummy variables for GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
23513     +drop _10_0 _10_1 _10_2 _10_3 ;
MPRINT(EM_DIAGRAM):   _10_3 = 0;
23514     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_MORTDUE ) then do;
23515     +_10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_0 = .;
23516     +_10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = .;
23517     +_10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = .;
23518     +_10_3 = 0;
MPRINT(EM_DIAGRAM):   _10_3 = .;
23519     +if missing( GRP_LOG_MORTDUE ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23520     +   _10_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23521     +   _10_1 = .;
MPRINT(EM_DIAGRAM):   end;
23522     +   _10_2 = .;
23523     +   _10_3 = .;
MPRINT(EM_DIAGRAM):   else do;
23524     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
23525     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23526     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
23527     +else do;
23528     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
23529     +   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
23530     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
23531     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23532     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   end;
23533     +      if _dm12 <= '2'  then do;
23534     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
23535     +            _10_0 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
23536     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _10_1 = 1;
23537     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23538     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23539     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
23540     +               _10_1 = 1;
23541     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
23542     +            end;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
23543     +         end;
MPRINT(EM_DIAGRAM):   _10_2 = 1;
23544     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23545     +      else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23546     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   end;
23547     +            _10_2 = 1;
23548     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
23549     +         end;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
23550     +      end;
MPRINT(EM_DIAGRAM):   _10_3 = 1;
23551     +   end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23552     +   else do;
MPRINT(EM_DIAGRAM):   end;
23553     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else do;
23554     +         _10_3 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
23555     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
23556     +      end;
MPRINT(EM_DIAGRAM):   _10_1 = -1;
23557     +      else do;
MPRINT(EM_DIAGRAM):   _10_2 = -1;
MPRINT(EM_DIAGRAM):   _10_3 = -1;
23558     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23559     +            _10_0 = -1;
MPRINT(EM_DIAGRAM):   end;
23560     +            _10_1 = -1;
MPRINT(EM_DIAGRAM):   end;
23561     +            _10_2 = -1;
MPRINT(EM_DIAGRAM):   end;
23562     +            _10_3 = -1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
23563     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _10_0 = .;
23564     +         end;
MPRINT(EM_DIAGRAM):   _10_1 = .;
23565     +      end;
MPRINT(EM_DIAGRAM):   _10_2 = .;
23566     +   end;
MPRINT(EM_DIAGRAM):   _10_3 = .;
23567     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23568     +      _10_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23569     +      _10_1 = .;
MPRINT(EM_DIAGRAM):   end;
23570     +      _10_2 = .;
MPRINT(EM_DIAGRAM):   end;
23571     +      _10_3 = .;
23572     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_VALUE ;
23573     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _11_0 _11_1 _11_2 _11_3 ;
23574     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23575     +end;
MPRINT(EM_DIAGRAM):   _11_0 = 0;
23576     +
MPRINT(EM_DIAGRAM):   _11_1 = 0;
23577     +*** Generate dummy variables for GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   _11_2 = 0;
23578     +drop _11_0 _11_1 _11_2 _11_3 ;
MPRINT(EM_DIAGRAM):   _11_3 = 0;
23579     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_VALUE ) then do;
23580     +_11_0 = 0;
MPRINT(EM_DIAGRAM):   _11_0 = .;
23581     +_11_1 = 0;
MPRINT(EM_DIAGRAM):   _11_1 = .;
23582     +_11_2 = 0;
MPRINT(EM_DIAGRAM):   _11_2 = .;
23583     +_11_3 = 0;
MPRINT(EM_DIAGRAM):   _11_3 = .;
23584     +if missing( GRP_LOG_VALUE ) then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23585     +   _11_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23586     +   _11_1 = .;
MPRINT(EM_DIAGRAM):   end;
23587     +   _11_2 = .;
23588     +   _11_3 = .;
MPRINT(EM_DIAGRAM):   else do;
23589     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
23590     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23591     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_VALUE , BEST12. );
23592     +else do;
23593     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
23594     +   _dm12 = put( GRP_LOG_VALUE , BEST12. );
23595     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _11_0 = 1;
23596     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23597     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   end;
23598     +      if _dm12 <= '2'  then do;
23599     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
23600     +            _11_0 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
23601     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _11_1 = 1;
23602     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23603     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23604     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
23605     +               _11_1 = 1;
23606     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
23607     +            end;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
23608     +         end;
MPRINT(EM_DIAGRAM):   _11_2 = 1;
23609     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23610     +      else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
23611     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   end;
23612     +            _11_2 = 1;
23613     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
23614     +         end;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
23615     +      end;
MPRINT(EM_DIAGRAM):   _11_3 = 1;
23616     +   end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23617     +   else do;
MPRINT(EM_DIAGRAM):   end;
23618     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else do;
23619     +         _11_3 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
23620     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _11_0 = -1;
23621     +      end;
MPRINT(EM_DIAGRAM):   _11_1 = -1;
23622     +      else do;
MPRINT(EM_DIAGRAM):   _11_2 = -1;
MPRINT(EM_DIAGRAM):   _11_3 = -1;
23623     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23624     +            _11_0 = -1;
MPRINT(EM_DIAGRAM):   end;
23625     +            _11_1 = -1;
MPRINT(EM_DIAGRAM):   end;
23626     +            _11_2 = -1;
MPRINT(EM_DIAGRAM):   end;
23627     +            _11_3 = -1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
23628     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _11_0 = .;
23629     +         end;
MPRINT(EM_DIAGRAM):   _11_1 = .;
23630     +      end;
MPRINT(EM_DIAGRAM):   _11_2 = .;
23631     +   end;
MPRINT(EM_DIAGRAM):   _11_3 = .;
23632     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23633     +      _11_0 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23634     +      _11_1 = .;
MPRINT(EM_DIAGRAM):   end;
23635     +      _11_2 = .;
MPRINT(EM_DIAGRAM):   end;
23636     +      _11_3 = .;
23637     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NINQ ;
23638     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _13_0 _13_1 _13_2 ;
23639     +   end;
MPRINT(EM_DIAGRAM):   if missing( GRP_NINQ ) then do;
23640     +end;
MPRINT(EM_DIAGRAM):   _13_0 = .;
23641     +
MPRINT(EM_DIAGRAM):   _13_1 = .;
23642     +*** Generate dummy variables for GRP_NINQ ;
MPRINT(EM_DIAGRAM):   _13_2 = .;
23643     +drop _13_0 _13_1 _13_2 ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23644     +if missing( GRP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23645     +   _13_0 = .;
MPRINT(EM_DIAGRAM):   end;
23646     +   _13_1 = .;
23647     +   _13_2 = .;
MPRINT(EM_DIAGRAM):   else do;
23648     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
23649     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23650     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NINQ , BEST12. );
23651     +else do;
23652     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
23653     +   _dm12 = put( GRP_NINQ , BEST12. );
23654     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 1;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
MPRINT(EM_DIAGRAM):   end;
23655     +   if _dm12 = '1'  then do;
23656     +      _13_0 = 1;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
23657     +      _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
23658     +      _13_2 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 1;
23659     +   end;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
23660     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
23661     +      _13_0 = 0;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
23662     +      _13_1 = 1;
MPRINT(EM_DIAGRAM):   _13_0 = -1;
23663     +      _13_2 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = -1;
23664     +   end;
MPRINT(EM_DIAGRAM):   _13_2 = -1;
23665     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   end;
23666     +      _13_0 = -1;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
23667     +      _13_1 = -1;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
23668     +      _13_2 = -1;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
23669     +   end;
MPRINT(EM_DIAGRAM):   _13_2 = 1;
23670     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   end;
23671     +      _13_0 = 0;
MPRINT(EM_DIAGRAM):   else do;
23672     +      _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_0 = .;
23673     +      _13_2 = 1;
MPRINT(EM_DIAGRAM):   _13_1 = .;
23674     +   end;
MPRINT(EM_DIAGRAM):   _13_2 = .;
23675     +   else do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23676     +      _13_0 = .;
MPRINT(EM_DIAGRAM):   end;
23677     +      _13_1 = .;
MPRINT(EM_DIAGRAM):   end;
23678     +      _13_2 = .;
23679     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
23680     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
23681     +   end;
MPRINT(EM_DIAGRAM):   _P0 = 0.1994122586;
23682     +end;
MPRINT(EM_DIAGRAM):   _P1 = 0.8005877414;
23683     +
MPRINT(EM_DIAGRAM):   goto REG3DR1;
23684     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   end;
23685     +if _DM_BAD > 0 then do;
23686     +   _P0 = 0.1994122586;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
23687     +   _P1 = 0.8005877414;
MPRINT(EM_DIAGRAM):   drop _TEMP;
23688     +   goto REG3DR1;
MPRINT(EM_DIAGRAM):   drop _LP0;
23689     +end;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
23690     +
23691     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDELINQ ;
23692     +drop _TEMP;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23693     +drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.87775516834488) * _TEMP * _1_0;
23694     +_LP0 = 0;
23695     +
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDEROG ;
23696     +***  Effect: GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23697     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.55281445474052) * _TEMP * _2_0;
23698     +_LP0 = _LP0 + (   -0.87775516834488) * _TEMP * _1_0;
23699     +
MPRINT(EM_DIAGRAM):   *** Effect: GRP_JOB ;
23700     +***  Effect: GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23701     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.57351647111869) * _TEMP * _3_0;
23702     +_LP0 = _LP0 + (   -0.55281445474052) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28613983828213) * _TEMP * _3_1;
23703     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04717425869826) * _TEMP * _3_2;
23704     +***  Effect: GRP_JOB ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.6273079991539) * _TEMP * _3_3;
23705     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46293169342544) * _TEMP * _3_4;
23706     +_LP0 = _LP0 + (   -1.57351647111869) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.53314640452982) * _TEMP * _3_5;
23707     +_LP0 = _LP0 + (    0.28613983828213) * _TEMP * _3_1;
23708     +_LP0 = _LP0 + (    0.04717425869826) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLAGE ;
23709     +_LP0 = _LP0 + (    -0.6273079991539) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23710     +_LP0 = _LP0 + (    0.46293169342544) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.4885261303632) * _TEMP * _4_0;
23711     +_LP0 = _LP0 + (    0.53314640452982) * _TEMP * _3_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.71554240420541) * _TEMP * _4_1;
23712     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18909158093947) * _TEMP * _4_2;
23713     +***  Effect: GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.53716218509574) * _TEMP * _4_3;
23714     +_TEMP = 1;
23715     +_LP0 = _LP0 + (     0.4885261303632) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLNO ;
23716     +_LP0 = _LP0 + (    0.71554240420541) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23717     +_LP0 = _LP0 + (    0.18909158093947) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.73455654245763) * _TEMP * _5_0;
23718     +_LP0 = _LP0 + (   -0.53716218509574) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.61154389982698) * _TEMP * _5_1;
23719     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.79275770117257) * _TEMP * _5_2;
23720     +***  Effect: GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.73669529752972) * _TEMP * _5_3;
23721     +_TEMP = 1;
23722     +_LP0 = _LP0 + (    2.73455654245763) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEBTINC ;
23723     +_LP0 = _LP0 + (   -0.61154389982698) * _TEMP * _5_1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23724     +_LP0 = _LP0 + (   -0.79275770117257) * _TEMP * _5_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.21025315595452) * _TEMP * _6_0;
23725     +_LP0 = _LP0 + (   -0.73669529752972) * _TEMP * _5_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.9672227584658) * _TEMP * _6_1;
23726     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91408931719345) * _TEMP * _6_2;
23727     +***  Effect: GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.62099733755167) * _TEMP * _6_3;
23728     +_TEMP = 1;
23729     +_LP0 = _LP0 + (    2.21025315595452) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DELINQ ;
23730     +_LP0 = _LP0 + (    -0.9672227584658) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23731     +_LP0 = _LP0 + (   -0.91408931719345) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2959510219925) * _TEMP * _7_0;
23732     +_LP0 = _LP0 + (   -0.62099733755167) * _TEMP * _6_3;
23733     +
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEROG ;
23734     +***  Effect: GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23735     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90393524464235) * _TEMP * _8_0;
23736     +_LP0 = _LP0 + (    -0.2959510219925) * _TEMP * _7_0;
23737     +
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_LOAN ;
23738     +***  Effect: GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23739     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16385991732161) * _TEMP * _9_0;
23740     +_LP0 = _LP0 + (   -0.90393524464235) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15830771669066) * _TEMP * _9_1;
23741     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06806737420677) * _TEMP * _9_2;
23742     +***  Effect: GRP_LOG_LOAN ;
23743     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_MORTDUE ;
23744     +_LP0 = _LP0 + (    0.16385991732161) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23745     +_LP0 = _LP0 + (    0.15830771669066) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.72652835503015) * _TEMP * _10_0;
23746     +_LP0 = _LP0 + (    0.06806737420677) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19458084189349) * _TEMP * _10_1;
23747     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18661188905406) * _TEMP * _10_2;
23748     +***  Effect: GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45638816653046) * _TEMP * _10_3;
23749     +_TEMP = 1;
23750     +_LP0 = _LP0 + (    0.72652835503015) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_VALUE ;
23751     +_LP0 = _LP0 + (    0.19458084189349) * _TEMP * _10_1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23752     +_LP0 = _LP0 + (   -0.18661188905406) * _TEMP * _10_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.36684754151064) * _TEMP * _11_0;
23753     +_LP0 = _LP0 + (   -0.45638816653046) * _TEMP * _10_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90230378426672) * _TEMP * _11_1;
23754     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91035575384715) * _TEMP * _11_2;
23755     +***  Effect: GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.14494565714679) * _TEMP * _11_3;
23756     +_TEMP = 1;
23757     +_LP0 = _LP0 + (    3.36684754151064) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NINQ ;
23758     +_LP0 = _LP0 + (   -0.90230378426672) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
23759     +_LP0 = _LP0 + (   -0.91035575384715) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31468561657707) * _TEMP * _13_0;
23760     +_LP0 = _LP0 + (   -1.14494565714679) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18323440424764) * _TEMP * _13_1;
23761     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09136486214824) * _TEMP * _13_2;
23762     +***  Effect: GRP_NINQ ;
23763     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
23764     +_LP0 = _LP0 + (   -0.31468561657707) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
23765     +_LP0 = _LP0 + (   -0.18323440424764) * _TEMP * _13_1;
MPRINT(EM_DIAGRAM):   _TEMP = -0.63961613873858 + _LP0;
23766     +_LP0 = _LP0 + (   -0.09136486214824) * _TEMP * _13_2;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
23767     +
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
23768     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
23769     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   end;
23770     +_TEMP =    -0.63961613873858 + _LP0;
23771     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
23772     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
23773     +   _P0 = _TEMP / (1 + _TEMP);
23774     +end;
23775     +else _P0 = 1 / (1 + exp(-_TEMP));
23776     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REG3DR1: *** Residuals;
23777     +
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
23778     +REG3DR1:
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
23779     +
MPRINT(EM_DIAGRAM):   end;
23780     +*** Residuals;
23781     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   else do;
23782     +   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
23783     +   R_BAD0 = .;
23784     +end;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
23785     +else do;
MPRINT(EM_DIAGRAM):   R_BAD1 = - _P0;
23786     +    label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   select( _Y );
23787     +    label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   when (0) R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_BAD0 = R_BAD0 + 1;
23788     +   R_BAD1 = - _P0;
MPRINT(EM_DIAGRAM):   end;
23789     +   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   end;
23790     +   select( _Y );
23791     +      when (0)  R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
23792     +      when (1)  R_BAD0 = R_BAD0 + 1;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
23793     +   end;
23794     +end;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
23795     +
23796     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
23797     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
23798     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
23799     +P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
23800     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 2;
23801     +_IY = 1;
MPRINT(EM_DIAGRAM):   end;
23802     +P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   I_BAD = REG3DRF[_IY];
23803     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   U_BAD = REG3DRU[_IY];
23804     +   _MAXP = _P1;
23805     +   _IY = 2;
MPRINT(EM_DIAGRAM):   *************************************;
23806     +end;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
23807     +I_BAD = REG3DRF[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
23808     +U_BAD = REG3DRU[_IY];
23809     +
23810     +*************************************;
23811     +***** end scoring code for regression;
23812     +*************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
23813      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
23814      quit;
23815      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
23816      filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg3: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23817      *------------------------------------------------------------*;
23818      * Reg3: Scoring VALIDATE data;
23819      *------------------------------------------------------------*;
23820      data EMWS1.Reg3_VALIDATE
23821      / view=EMWS1.Reg3_VALIDATE
23822      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg3_VALIDATE / view=EMWS1.Reg3_VALIDATE ;
23823      set EMWS1.BINNING_VALIDATE
23824      ;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_VALIDATE ;
23825      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMFLOWSCORE.sas.
23826     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
23827     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
23828     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
23829     +
23830     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
23831     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
23832     +
23833     +length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
23834     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
23835     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
23836     +array REG3DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG3DRF [2] $12 _temporary_ ('1' '0' );
23837     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
23838     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
23839     +ARRAY REG3DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG3DRU[2] _TEMPORARY_ (1 0);
23840     +
23841     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
23842     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
23843     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
23844     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
23845     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
23846     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23847     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
23848     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
23849     +end;
MPRINT(EM_DIAGRAM):   end;
23850     +else do;
MPRINT(EM_DIAGRAM):   else do;
23851     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
23852     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
23853     +   end;
MPRINT(EM_DIAGRAM):   end;
23854     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
23855     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
23856     +   end;
MPRINT(EM_DIAGRAM):   end;
23857     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23858     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
23859     +   end;
MPRINT(EM_DIAGRAM):   end;
23860     +end;
MPRINT(EM_DIAGRAM):   end;
23861     +
23862     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
23863     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
23864     +
23865     +*** Generate dummy variables for GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDELINQ ;
23866     +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
23867     +if missing( GRP_INDELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDELINQ ) then do;
23868     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
23869     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23870     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23871     +end;
MPRINT(EM_DIAGRAM):   end;
23872     +else do;
MPRINT(EM_DIAGRAM):   else do;
23873     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23874     +   _dm12 = put( GRP_INDELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDELINQ , BEST12. );
23875     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23876     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
23877     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
23878     +   end;
MPRINT(EM_DIAGRAM):   end;
23879     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
23880     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
23881     +   end;
MPRINT(EM_DIAGRAM):   end;
23882     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23883     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
23884     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23885     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23886     +   end;
MPRINT(EM_DIAGRAM):   end;
23887     +end;
MPRINT(EM_DIAGRAM):   end;
23888     +
23889     +*** Generate dummy variables for GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDEROG ;
23890     +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
23891     +if missing( GRP_INDEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDEROG ) then do;
23892     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
23893     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23894     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23895     +end;
MPRINT(EM_DIAGRAM):   end;
23896     +else do;
MPRINT(EM_DIAGRAM):   else do;
23897     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23898     +   _dm12 = put( GRP_INDEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDEROG , BEST12. );
23899     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23900     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
23901     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
23902     +   end;
MPRINT(EM_DIAGRAM):   end;
23903     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
23904     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
23905     +   end;
MPRINT(EM_DIAGRAM):   end;
23906     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23907     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
23908     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23909     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23910     +   end;
MPRINT(EM_DIAGRAM):   end;
23911     +end;
MPRINT(EM_DIAGRAM):   end;
23912     +
23913     +*** Generate dummy variables for GRP_JOB ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_JOB ;
23914     +drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 ;
23915     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
23916     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
23917     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
23918     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
23919     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
23920     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
23921     +_3_5 = 0;
MPRINT(EM_DIAGRAM):   _3_5 = 0;
23922     +if missing( GRP_JOB ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_JOB ) then do;
23923     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
23924     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
23925     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
23926     +   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
23927     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
23928     +   _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
23929     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23930     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23931     +end;
MPRINT(EM_DIAGRAM):   end;
23932     +else do;
MPRINT(EM_DIAGRAM):   else do;
23933     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23934     +   _dm12 = put( GRP_JOB , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_JOB , BEST12. );
23935     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23936     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
23937     +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
23938     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
23939     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
23940     +            _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
23941     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23942     +         end;
MPRINT(EM_DIAGRAM):   end;
23943     +         else do;
MPRINT(EM_DIAGRAM):   else do;
23944     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
23945     +               _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
23946     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23947     +            end;
MPRINT(EM_DIAGRAM):   end;
23948     +         end;
MPRINT(EM_DIAGRAM):   end;
23949     +      end;
MPRINT(EM_DIAGRAM):   end;
23950     +      else do;
MPRINT(EM_DIAGRAM):   else do;
23951     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
23952     +            _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
23953     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23954     +         end;
MPRINT(EM_DIAGRAM):   end;
23955     +         else do;
MPRINT(EM_DIAGRAM):   else do;
23956     +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
23957     +               _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
23958     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23959     +            end;
MPRINT(EM_DIAGRAM):   end;
23960     +         end;
MPRINT(EM_DIAGRAM):   end;
23961     +      end;
MPRINT(EM_DIAGRAM):   end;
23962     +   end;
MPRINT(EM_DIAGRAM):   end;
23963     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23964     +      if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
23965     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
23966     +            _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
23967     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23968     +         end;
MPRINT(EM_DIAGRAM):   end;
23969     +         else do;
MPRINT(EM_DIAGRAM):   else do;
23970     +            if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
23971     +               _3_5 = 1;
MPRINT(EM_DIAGRAM):   _3_5 = 1;
23972     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23973     +            end;
MPRINT(EM_DIAGRAM):   end;
23974     +         end;
MPRINT(EM_DIAGRAM):   end;
23975     +      end;
MPRINT(EM_DIAGRAM):   end;
23976     +      else do;
MPRINT(EM_DIAGRAM):   else do;
23977     +         if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
23978     +            _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
23979     +            _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
23980     +            _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
23981     +            _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
23982     +            _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
23983     +            _3_5 = -1;
MPRINT(EM_DIAGRAM):   _3_5 = -1;
23984     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
23985     +         end;
MPRINT(EM_DIAGRAM):   end;
23986     +      end;
MPRINT(EM_DIAGRAM):   end;
23987     +   end;
MPRINT(EM_DIAGRAM):   end;
23988     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
23989     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
23990     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
23991     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
23992     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
23993     +      _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
23994     +      _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
23995     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23996     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23997     +   end;
MPRINT(EM_DIAGRAM):   end;
23998     +end;
MPRINT(EM_DIAGRAM):   end;
23999     +
24000     +*** Generate dummy variables for GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLAGE ;
24001     +drop _4_0 _4_1 _4_2 _4_3 ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 ;
24002     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
24003     +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
24004     +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
24005     +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
24006     +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
24007     +if missing( GRP_LOG_CLAGE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLAGE ) then do;
24008     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
24009     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
24010     +   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
24011     +   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
24012     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24013     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24014     +end;
MPRINT(EM_DIAGRAM):   end;
24015     +else do;
MPRINT(EM_DIAGRAM):   else do;
24016     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24017     +   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
24018     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24019     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
24020     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
24021     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
24022     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
24023     +            _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
24024     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24025     +         end;
MPRINT(EM_DIAGRAM):   end;
24026     +         else do;
MPRINT(EM_DIAGRAM):   else do;
24027     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
24028     +               _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
24029     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24030     +            end;
MPRINT(EM_DIAGRAM):   end;
24031     +         end;
MPRINT(EM_DIAGRAM):   end;
24032     +      end;
MPRINT(EM_DIAGRAM):   end;
24033     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24034     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24035     +            _4_2 = 1;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
24036     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24037     +         end;
MPRINT(EM_DIAGRAM):   end;
24038     +      end;
MPRINT(EM_DIAGRAM):   end;
24039     +   end;
MPRINT(EM_DIAGRAM):   end;
24040     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24041     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
24042     +         _4_3 = 1;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
24043     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24044     +      end;
MPRINT(EM_DIAGRAM):   end;
24045     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24046     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
24047     +            _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
24048     +            _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
24049     +            _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
24050     +            _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
24051     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24052     +         end;
MPRINT(EM_DIAGRAM):   end;
24053     +      end;
MPRINT(EM_DIAGRAM):   end;
24054     +   end;
MPRINT(EM_DIAGRAM):   end;
24055     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
24056     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
24057     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
24058     +      _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
24059     +      _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
24060     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24061     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24062     +   end;
MPRINT(EM_DIAGRAM):   end;
24063     +end;
MPRINT(EM_DIAGRAM):   end;
24064     +
24065     +*** Generate dummy variables for GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLNO ;
24066     +drop _5_0 _5_1 _5_2 _5_3 ;
MPRINT(EM_DIAGRAM):   drop _5_0 _5_1 _5_2 _5_3 ;
24067     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
24068     +_5_0 = 0;
MPRINT(EM_DIAGRAM):   _5_0 = 0;
24069     +_5_1 = 0;
MPRINT(EM_DIAGRAM):   _5_1 = 0;
24070     +_5_2 = 0;
MPRINT(EM_DIAGRAM):   _5_2 = 0;
24071     +_5_3 = 0;
MPRINT(EM_DIAGRAM):   _5_3 = 0;
24072     +if missing( GRP_LOG_CLNO ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLNO ) then do;
24073     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
24074     +   _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
24075     +   _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
24076     +   _5_3 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
24077     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24078     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24079     +end;
MPRINT(EM_DIAGRAM):   end;
24080     +else do;
MPRINT(EM_DIAGRAM):   else do;
24081     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24082     +   _dm12 = put( GRP_LOG_CLNO , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLNO , BEST12. );
24083     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24084     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
24085     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
24086     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
24087     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
24088     +            _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
24089     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24090     +         end;
MPRINT(EM_DIAGRAM):   end;
24091     +         else do;
MPRINT(EM_DIAGRAM):   else do;
24092     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
24093     +               _5_1 = 1;
MPRINT(EM_DIAGRAM):   _5_1 = 1;
24094     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24095     +            end;
MPRINT(EM_DIAGRAM):   end;
24096     +         end;
MPRINT(EM_DIAGRAM):   end;
24097     +      end;
MPRINT(EM_DIAGRAM):   end;
24098     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24099     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24100     +            _5_2 = 1;
MPRINT(EM_DIAGRAM):   _5_2 = 1;
24101     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24102     +         end;
MPRINT(EM_DIAGRAM):   end;
24103     +      end;
MPRINT(EM_DIAGRAM):   end;
24104     +   end;
MPRINT(EM_DIAGRAM):   end;
24105     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24106     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
24107     +         _5_3 = 1;
MPRINT(EM_DIAGRAM):   _5_3 = 1;
24108     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24109     +      end;
MPRINT(EM_DIAGRAM):   end;
24110     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24111     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
24112     +            _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
24113     +            _5_1 = -1;
MPRINT(EM_DIAGRAM):   _5_1 = -1;
24114     +            _5_2 = -1;
MPRINT(EM_DIAGRAM):   _5_2 = -1;
24115     +            _5_3 = -1;
MPRINT(EM_DIAGRAM):   _5_3 = -1;
24116     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24117     +         end;
MPRINT(EM_DIAGRAM):   end;
24118     +      end;
MPRINT(EM_DIAGRAM):   end;
24119     +   end;
MPRINT(EM_DIAGRAM):   end;
24120     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
24121     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
24122     +      _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
24123     +      _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
24124     +      _5_3 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
24125     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24126     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24127     +   end;
MPRINT(EM_DIAGRAM):   end;
24128     +end;
MPRINT(EM_DIAGRAM):   end;
24129     +
24130     +*** Generate dummy variables for GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEBTINC ;
24131     +drop _6_0 _6_1 _6_2 _6_3 ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 ;
24132     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
24133     +_6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
24134     +_6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
24135     +_6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
24136     +_6_3 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
24137     +if missing( GRP_LOG_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEBTINC ) then do;
24138     +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
24139     +   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
24140     +   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
24141     +   _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
24142     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24143     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24144     +end;
MPRINT(EM_DIAGRAM):   end;
24145     +else do;
MPRINT(EM_DIAGRAM):   else do;
24146     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24147     +   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
24148     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24149     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
24150     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
24151     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
24152     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
24153     +            _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
24154     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24155     +         end;
MPRINT(EM_DIAGRAM):   end;
24156     +         else do;
MPRINT(EM_DIAGRAM):   else do;
24157     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
24158     +               _6_1 = 1;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
24159     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24160     +            end;
MPRINT(EM_DIAGRAM):   end;
24161     +         end;
MPRINT(EM_DIAGRAM):   end;
24162     +      end;
MPRINT(EM_DIAGRAM):   end;
24163     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24164     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24165     +            _6_2 = 1;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
24166     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24167     +         end;
MPRINT(EM_DIAGRAM):   end;
24168     +      end;
MPRINT(EM_DIAGRAM):   end;
24169     +   end;
MPRINT(EM_DIAGRAM):   end;
24170     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24171     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
24172     +         _6_3 = 1;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
24173     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24174     +      end;
MPRINT(EM_DIAGRAM):   end;
24175     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24176     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
24177     +            _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
24178     +            _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
24179     +            _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
24180     +            _6_3 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
24181     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24182     +         end;
MPRINT(EM_DIAGRAM):   end;
24183     +      end;
MPRINT(EM_DIAGRAM):   end;
24184     +   end;
MPRINT(EM_DIAGRAM):   end;
24185     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
24186     +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
24187     +      _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
24188     +      _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
24189     +      _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
24190     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24191     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24192     +   end;
MPRINT(EM_DIAGRAM):   end;
24193     +end;
MPRINT(EM_DIAGRAM):   end;
24194     +
24195     +*** Generate dummy variables for GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DELINQ ;
24196     +drop _7_0 ;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
24197     +if missing( GRP_LOG_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DELINQ ) then do;
24198     +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
24199     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24200     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24201     +end;
MPRINT(EM_DIAGRAM):   end;
24202     +else do;
MPRINT(EM_DIAGRAM):   else do;
24203     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24204     +   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
24205     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24206     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24207     +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
24208     +   end;
MPRINT(EM_DIAGRAM):   end;
24209     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
24210     +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
24211     +   end;
MPRINT(EM_DIAGRAM):   end;
24212     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24213     +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
24214     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24215     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24216     +   end;
MPRINT(EM_DIAGRAM):   end;
24217     +end;
MPRINT(EM_DIAGRAM):   end;
24218     +
24219     +*** Generate dummy variables for GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEROG ;
24220     +drop _8_0 ;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
24221     +if missing( GRP_LOG_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEROG ) then do;
24222     +   _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
24223     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24224     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24225     +end;
MPRINT(EM_DIAGRAM):   end;
24226     +else do;
MPRINT(EM_DIAGRAM):   else do;
24227     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24228     +   _dm12 = put( GRP_LOG_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEROG , BEST12. );
24229     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24230     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24231     +      _8_0 = -1;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
24232     +   end;
MPRINT(EM_DIAGRAM):   end;
24233     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
24234     +      _8_0 = 1;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
24235     +   end;
MPRINT(EM_DIAGRAM):   end;
24236     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24237     +      _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
24238     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24239     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24240     +   end;
MPRINT(EM_DIAGRAM):   end;
24241     +end;
MPRINT(EM_DIAGRAM):   end;
24242     +
24243     +*** Generate dummy variables for GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_LOAN ;
24244     +drop _9_0 _9_1 _9_2 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 ;
24245     +if missing( GRP_LOG_LOAN ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_LOAN ) then do;
24246     +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
24247     +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
24248     +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
24249     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24250     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24251     +end;
MPRINT(EM_DIAGRAM):   end;
24252     +else do;
MPRINT(EM_DIAGRAM):   else do;
24253     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24254     +   _dm12 = put( GRP_LOG_LOAN , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_LOAN , BEST12. );
24255     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24256     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24257     +      _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
24258     +      _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
24259     +      _9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
24260     +   end;
MPRINT(EM_DIAGRAM):   end;
24261     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
24262     +      _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
24263     +      _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
24264     +      _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
24265     +   end;
MPRINT(EM_DIAGRAM):   end;
24266     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
24267     +      _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
24268     +      _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
24269     +      _9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
24270     +   end;
MPRINT(EM_DIAGRAM):   end;
24271     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
24272     +      _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
24273     +      _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
24274     +      _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
24275     +   end;
MPRINT(EM_DIAGRAM):   end;
24276     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24277     +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
24278     +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
24279     +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
24280     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24281     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24282     +   end;
MPRINT(EM_DIAGRAM):   end;
24283     +end;
MPRINT(EM_DIAGRAM):   end;
24284     +
24285     +*** Generate dummy variables for GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_MORTDUE ;
24286     +drop _10_0 _10_1 _10_2 _10_3 ;
MPRINT(EM_DIAGRAM):   drop _10_0 _10_1 _10_2 _10_3 ;
24287     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
24288     +_10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
24289     +_10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = 0;
24290     +_10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
24291     +_10_3 = 0;
MPRINT(EM_DIAGRAM):   _10_3 = 0;
24292     +if missing( GRP_LOG_MORTDUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_MORTDUE ) then do;
24293     +   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
24294     +   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
24295     +   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
24296     +   _10_3 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
24297     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24298     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24299     +end;
MPRINT(EM_DIAGRAM):   end;
24300     +else do;
MPRINT(EM_DIAGRAM):   else do;
24301     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24302     +   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
24303     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24304     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
24305     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
24306     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
24307     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
24308     +            _10_0 = 1;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
24309     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24310     +         end;
MPRINT(EM_DIAGRAM):   end;
24311     +         else do;
MPRINT(EM_DIAGRAM):   else do;
24312     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
24313     +               _10_1 = 1;
MPRINT(EM_DIAGRAM):   _10_1 = 1;
24314     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24315     +            end;
MPRINT(EM_DIAGRAM):   end;
24316     +         end;
MPRINT(EM_DIAGRAM):   end;
24317     +      end;
MPRINT(EM_DIAGRAM):   end;
24318     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24319     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24320     +            _10_2 = 1;
MPRINT(EM_DIAGRAM):   _10_2 = 1;
24321     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24322     +         end;
MPRINT(EM_DIAGRAM):   end;
24323     +      end;
MPRINT(EM_DIAGRAM):   end;
24324     +   end;
MPRINT(EM_DIAGRAM):   end;
24325     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24326     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
24327     +         _10_3 = 1;
MPRINT(EM_DIAGRAM):   _10_3 = 1;
24328     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24329     +      end;
MPRINT(EM_DIAGRAM):   end;
24330     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24331     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
24332     +            _10_0 = -1;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
24333     +            _10_1 = -1;
MPRINT(EM_DIAGRAM):   _10_1 = -1;
24334     +            _10_2 = -1;
MPRINT(EM_DIAGRAM):   _10_2 = -1;
24335     +            _10_3 = -1;
MPRINT(EM_DIAGRAM):   _10_3 = -1;
24336     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24337     +         end;
MPRINT(EM_DIAGRAM):   end;
24338     +      end;
MPRINT(EM_DIAGRAM):   end;
24339     +   end;
MPRINT(EM_DIAGRAM):   end;
24340     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
24341     +      _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
24342     +      _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
24343     +      _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
24344     +      _10_3 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
24345     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24346     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24347     +   end;
MPRINT(EM_DIAGRAM):   end;
24348     +end;
MPRINT(EM_DIAGRAM):   end;
24349     +
24350     +*** Generate dummy variables for GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_VALUE ;
24351     +drop _11_0 _11_1 _11_2 _11_3 ;
MPRINT(EM_DIAGRAM):   drop _11_0 _11_1 _11_2 _11_3 ;
24352     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
24353     +_11_0 = 0;
MPRINT(EM_DIAGRAM):   _11_0 = 0;
24354     +_11_1 = 0;
MPRINT(EM_DIAGRAM):   _11_1 = 0;
24355     +_11_2 = 0;
MPRINT(EM_DIAGRAM):   _11_2 = 0;
24356     +_11_3 = 0;
MPRINT(EM_DIAGRAM):   _11_3 = 0;
24357     +if missing( GRP_LOG_VALUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_VALUE ) then do;
24358     +   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_0 = .;
24359     +   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
24360     +   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
24361     +   _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
24362     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24363     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24364     +end;
MPRINT(EM_DIAGRAM):   end;
24365     +else do;
MPRINT(EM_DIAGRAM):   else do;
24366     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24367     +   _dm12 = put( GRP_LOG_VALUE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_VALUE , BEST12. );
24368     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24369     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
24370     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
24371     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
24372     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
24373     +            _11_0 = 1;
MPRINT(EM_DIAGRAM):   _11_0 = 1;
24374     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24375     +         end;
MPRINT(EM_DIAGRAM):   end;
24376     +         else do;
MPRINT(EM_DIAGRAM):   else do;
24377     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
24378     +               _11_1 = 1;
MPRINT(EM_DIAGRAM):   _11_1 = 1;
24379     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24380     +            end;
MPRINT(EM_DIAGRAM):   end;
24381     +         end;
MPRINT(EM_DIAGRAM):   end;
24382     +      end;
MPRINT(EM_DIAGRAM):   end;
24383     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24384     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24385     +            _11_2 = 1;
MPRINT(EM_DIAGRAM):   _11_2 = 1;
24386     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24387     +         end;
MPRINT(EM_DIAGRAM):   end;
24388     +      end;
MPRINT(EM_DIAGRAM):   end;
24389     +   end;
MPRINT(EM_DIAGRAM):   end;
24390     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24391     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
24392     +         _11_3 = 1;
MPRINT(EM_DIAGRAM):   _11_3 = 1;
24393     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24394     +      end;
MPRINT(EM_DIAGRAM):   end;
24395     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24396     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
24397     +            _11_0 = -1;
MPRINT(EM_DIAGRAM):   _11_0 = -1;
24398     +            _11_1 = -1;
MPRINT(EM_DIAGRAM):   _11_1 = -1;
24399     +            _11_2 = -1;
MPRINT(EM_DIAGRAM):   _11_2 = -1;
24400     +            _11_3 = -1;
MPRINT(EM_DIAGRAM):   _11_3 = -1;
24401     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24402     +         end;
MPRINT(EM_DIAGRAM):   end;
24403     +      end;
MPRINT(EM_DIAGRAM):   end;
24404     +   end;
MPRINT(EM_DIAGRAM):   end;
24405     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
24406     +      _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_0 = .;
24407     +      _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
24408     +      _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
24409     +      _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
24410     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24411     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24412     +   end;
MPRINT(EM_DIAGRAM):   end;
24413     +end;
MPRINT(EM_DIAGRAM):   end;
24414     +
24415     +*** Generate dummy variables for GRP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NINQ ;
24416     +drop _13_0 _13_1 _13_2 ;
MPRINT(EM_DIAGRAM):   drop _13_0 _13_1 _13_2 ;
24417     +if missing( GRP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NINQ ) then do;
24418     +   _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_0 = .;
24419     +   _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
24420     +   _13_2 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
24421     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24422     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24423     +end;
MPRINT(EM_DIAGRAM):   end;
24424     +else do;
MPRINT(EM_DIAGRAM):   else do;
24425     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24426     +   _dm12 = put( GRP_NINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NINQ , BEST12. );
24427     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24428     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
24429     +      _13_0 = 1;
MPRINT(EM_DIAGRAM):   _13_0 = 1;
24430     +      _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
24431     +      _13_2 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
24432     +   end;
MPRINT(EM_DIAGRAM):   end;
24433     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
24434     +      _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
24435     +      _13_1 = 1;
MPRINT(EM_DIAGRAM):   _13_1 = 1;
24436     +      _13_2 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
24437     +   end;
MPRINT(EM_DIAGRAM):   end;
24438     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
24439     +      _13_0 = -1;
MPRINT(EM_DIAGRAM):   _13_0 = -1;
24440     +      _13_1 = -1;
MPRINT(EM_DIAGRAM):   _13_1 = -1;
24441     +      _13_2 = -1;
MPRINT(EM_DIAGRAM):   _13_2 = -1;
24442     +   end;
MPRINT(EM_DIAGRAM):   end;
24443     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
24444     +      _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
24445     +      _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
24446     +      _13_2 = 1;
MPRINT(EM_DIAGRAM):   _13_2 = 1;
24447     +   end;
MPRINT(EM_DIAGRAM):   end;
24448     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24449     +      _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_0 = .;
24450     +      _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
24451     +      _13_2 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
24452     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24453     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24454     +   end;
MPRINT(EM_DIAGRAM):   end;
24455     +end;
MPRINT(EM_DIAGRAM):   end;
24456     +
24457     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
24458     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
24459     +   _P0 = 0.1994122586;
MPRINT(EM_DIAGRAM):   _P0 = 0.1994122586;
24460     +   _P1 = 0.8005877414;
MPRINT(EM_DIAGRAM):   _P1 = 0.8005877414;
24461     +   goto REG3DR1;
MPRINT(EM_DIAGRAM):   goto REG3DR1;
24462     +end;
MPRINT(EM_DIAGRAM):   end;
24463     +
24464     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
24465     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
24466     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
24467     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
24468     +
24469     +***  Effect: GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDELINQ ;
24470     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24471     +_LP0 = _LP0 + (   -0.87775516834488) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.87775516834488) * _TEMP * _1_0;
24472     +
24473     +***  Effect: GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDEROG ;
24474     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24475     +_LP0 = _LP0 + (   -0.55281445474052) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.55281445474052) * _TEMP * _2_0;
24476     +
24477     +***  Effect: GRP_JOB ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_JOB ;
24478     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24479     +_LP0 = _LP0 + (   -1.57351647111869) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.57351647111869) * _TEMP * _3_0;
24480     +_LP0 = _LP0 + (    0.28613983828213) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28613983828213) * _TEMP * _3_1;
24481     +_LP0 = _LP0 + (    0.04717425869826) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04717425869826) * _TEMP * _3_2;
24482     +_LP0 = _LP0 + (    -0.6273079991539) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.6273079991539) * _TEMP * _3_3;
24483     +_LP0 = _LP0 + (    0.46293169342544) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46293169342544) * _TEMP * _3_4;
24484     +_LP0 = _LP0 + (    0.53314640452982) * _TEMP * _3_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.53314640452982) * _TEMP * _3_5;
24485     +
24486     +***  Effect: GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLAGE ;
24487     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24488     +_LP0 = _LP0 + (     0.4885261303632) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.4885261303632) * _TEMP * _4_0;
24489     +_LP0 = _LP0 + (    0.71554240420541) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.71554240420541) * _TEMP * _4_1;
24490     +_LP0 = _LP0 + (    0.18909158093947) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18909158093947) * _TEMP * _4_2;
24491     +_LP0 = _LP0 + (   -0.53716218509574) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.53716218509574) * _TEMP * _4_3;
24492     +
24493     +***  Effect: GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLNO ;
24494     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24495     +_LP0 = _LP0 + (    2.73455654245763) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.73455654245763) * _TEMP * _5_0;
24496     +_LP0 = _LP0 + (   -0.61154389982698) * _TEMP * _5_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.61154389982698) * _TEMP * _5_1;
24497     +_LP0 = _LP0 + (   -0.79275770117257) * _TEMP * _5_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.79275770117257) * _TEMP * _5_2;
24498     +_LP0 = _LP0 + (   -0.73669529752972) * _TEMP * _5_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.73669529752972) * _TEMP * _5_3;
24499     +
24500     +***  Effect: GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEBTINC ;
24501     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24502     +_LP0 = _LP0 + (    2.21025315595452) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.21025315595452) * _TEMP * _6_0;
24503     +_LP0 = _LP0 + (    -0.9672227584658) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.9672227584658) * _TEMP * _6_1;
24504     +_LP0 = _LP0 + (   -0.91408931719345) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91408931719345) * _TEMP * _6_2;
24505     +_LP0 = _LP0 + (   -0.62099733755167) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.62099733755167) * _TEMP * _6_3;
24506     +
24507     +***  Effect: GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DELINQ ;
24508     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24509     +_LP0 = _LP0 + (    -0.2959510219925) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2959510219925) * _TEMP * _7_0;
24510     +
24511     +***  Effect: GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEROG ;
24512     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24513     +_LP0 = _LP0 + (   -0.90393524464235) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90393524464235) * _TEMP * _8_0;
24514     +
24515     +***  Effect: GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_LOAN ;
24516     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24517     +_LP0 = _LP0 + (    0.16385991732161) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16385991732161) * _TEMP * _9_0;
24518     +_LP0 = _LP0 + (    0.15830771669066) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15830771669066) * _TEMP * _9_1;
24519     +_LP0 = _LP0 + (    0.06806737420677) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06806737420677) * _TEMP * _9_2;
24520     +
24521     +***  Effect: GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_MORTDUE ;
24522     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24523     +_LP0 = _LP0 + (    0.72652835503015) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.72652835503015) * _TEMP * _10_0;
24524     +_LP0 = _LP0 + (    0.19458084189349) * _TEMP * _10_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19458084189349) * _TEMP * _10_1;
24525     +_LP0 = _LP0 + (   -0.18661188905406) * _TEMP * _10_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18661188905406) * _TEMP * _10_2;
24526     +_LP0 = _LP0 + (   -0.45638816653046) * _TEMP * _10_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45638816653046) * _TEMP * _10_3;
24527     +
24528     +***  Effect: GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_VALUE ;
24529     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24530     +_LP0 = _LP0 + (    3.36684754151064) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.36684754151064) * _TEMP * _11_0;
24531     +_LP0 = _LP0 + (   -0.90230378426672) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90230378426672) * _TEMP * _11_1;
24532     +_LP0 = _LP0 + (   -0.91035575384715) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91035575384715) * _TEMP * _11_2;
24533     +_LP0 = _LP0 + (   -1.14494565714679) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.14494565714679) * _TEMP * _11_3;
24534     +
24535     +***  Effect: GRP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NINQ ;
24536     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
24537     +_LP0 = _LP0 + (   -0.31468561657707) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31468561657707) * _TEMP * _13_0;
24538     +_LP0 = _LP0 + (   -0.18323440424764) * _TEMP * _13_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18323440424764) * _TEMP * _13_1;
24539     +_LP0 = _LP0 + (   -0.09136486214824) * _TEMP * _13_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09136486214824) * _TEMP * _13_2;
24540     +
24541     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
24542     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
24543     +_TEMP =    -0.63961613873858 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -0.63961613873858 + _LP0;
24544     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
24545     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
24546     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
24547     +end;
MPRINT(EM_DIAGRAM):   end;
24548     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
24549     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
24550     +
24551     +REG3DR1:
24552     +
24553     +*** Residuals;
MPRINT(EM_DIAGRAM):   REG3DR1: *** Residuals;
24554     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
24555     +   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
24556     +   R_BAD0 = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
24557     +end;
MPRINT(EM_DIAGRAM):   end;
24558     +else do;
MPRINT(EM_DIAGRAM):   else do;
24559     +    label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
24560     +    label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
24561     +   R_BAD1 = - _P0;
MPRINT(EM_DIAGRAM):   R_BAD1 = - _P0;
24562     +   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   R_BAD0 = - _P1;
24563     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
24564     +      when (0)  R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_BAD1 = R_BAD1 + 1;
24565     +      when (1)  R_BAD0 = R_BAD0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_BAD0 = R_BAD0 + 1;
24566     +   end;
MPRINT(EM_DIAGRAM):   end;
24567     +end;
MPRINT(EM_DIAGRAM):   end;
24568     +
24569     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
24570     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
24571     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
24572     +P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
24573     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
24574     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
24575     +P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
24576     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
24577     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
24578     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
24579     +end;
MPRINT(EM_DIAGRAM):   end;
24580     +I_BAD = REG3DRF[_IY];
MPRINT(EM_DIAGRAM):   I_BAD = REG3DRF[_IY];
24581     +U_BAD = REG3DRU[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REG3DRU[_IY];
24582     +
24583     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
24584     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
24585     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
24586      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG3_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
24587      quit;
24588      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
24589      filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg3: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24590      *------------------------------------------------------------*;
24591      * Reg3: Scoring TEST data;
24592      *------------------------------------------------------------*;
24593      data EMWS1.Reg3_TEST
24594      / view=EMWS1.Reg3_TEST
24595      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg3_TEST / view=EMWS1.Reg3_TEST ;
24596      set EMWS1.BINNING_TEST
24597      ;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_TEST ;
24598      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMFLOWSCORE.sas.
24599     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
24600     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
24601     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
24602     +
24603     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
24604     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
24605     +
24606     +length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
24607     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
24608     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
24609     +array REG3DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG3DRF [2] $12 _temporary_ ('1' '0' );
24610     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
24611     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
24612     +ARRAY REG3DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG3DRU[2] _TEMPORARY_ (1 0);
24613     +
24614     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
24615     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
24616     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
24617     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
24618     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
24619     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24620     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
24621     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
24622     +end;
MPRINT(EM_DIAGRAM):   end;
24623     +else do;
MPRINT(EM_DIAGRAM):   else do;
24624     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
24625     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
24626     +   end;
MPRINT(EM_DIAGRAM):   end;
24627     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
24628     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
24629     +   end;
MPRINT(EM_DIAGRAM):   end;
24630     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24631     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
24632     +   end;
MPRINT(EM_DIAGRAM):   end;
24633     +end;
MPRINT(EM_DIAGRAM):   end;
24634     +
24635     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
24636     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
24637     +
24638     +*** Generate dummy variables for GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDELINQ ;
24639     +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
24640     +if missing( GRP_INDELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDELINQ ) then do;
24641     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
24642     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24643     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24644     +end;
MPRINT(EM_DIAGRAM):   end;
24645     +else do;
MPRINT(EM_DIAGRAM):   else do;
24646     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24647     +   _dm12 = put( GRP_INDELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDELINQ , BEST12. );
24648     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24649     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24650     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
24651     +   end;
MPRINT(EM_DIAGRAM):   end;
24652     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
24653     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
24654     +   end;
MPRINT(EM_DIAGRAM):   end;
24655     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24656     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
24657     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24658     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24659     +   end;
MPRINT(EM_DIAGRAM):   end;
24660     +end;
MPRINT(EM_DIAGRAM):   end;
24661     +
24662     +*** Generate dummy variables for GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDEROG ;
24663     +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
24664     +if missing( GRP_INDEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDEROG ) then do;
24665     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
24666     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24667     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24668     +end;
MPRINT(EM_DIAGRAM):   end;
24669     +else do;
MPRINT(EM_DIAGRAM):   else do;
24670     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24671     +   _dm12 = put( GRP_INDEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDEROG , BEST12. );
24672     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24673     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24674     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
24675     +   end;
MPRINT(EM_DIAGRAM):   end;
24676     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
24677     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
24678     +   end;
MPRINT(EM_DIAGRAM):   end;
24679     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24680     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
24681     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24682     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24683     +   end;
MPRINT(EM_DIAGRAM):   end;
24684     +end;
MPRINT(EM_DIAGRAM):   end;
24685     +
24686     +*** Generate dummy variables for GRP_JOB ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_JOB ;
24687     +drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 ;
24688     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
24689     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
24690     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
24691     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
24692     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
24693     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
24694     +_3_5 = 0;
MPRINT(EM_DIAGRAM):   _3_5 = 0;
24695     +if missing( GRP_JOB ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_JOB ) then do;
24696     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
24697     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
24698     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
24699     +   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
24700     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
24701     +   _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
24702     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24703     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24704     +end;
MPRINT(EM_DIAGRAM):   end;
24705     +else do;
MPRINT(EM_DIAGRAM):   else do;
24706     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24707     +   _dm12 = put( GRP_JOB , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_JOB , BEST12. );
24708     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24709     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
24710     +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
24711     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
24712     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
24713     +            _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
24714     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24715     +         end;
MPRINT(EM_DIAGRAM):   end;
24716     +         else do;
MPRINT(EM_DIAGRAM):   else do;
24717     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
24718     +               _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
24719     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24720     +            end;
MPRINT(EM_DIAGRAM):   end;
24721     +         end;
MPRINT(EM_DIAGRAM):   end;
24722     +      end;
MPRINT(EM_DIAGRAM):   end;
24723     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24724     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24725     +            _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
24726     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24727     +         end;
MPRINT(EM_DIAGRAM):   end;
24728     +         else do;
MPRINT(EM_DIAGRAM):   else do;
24729     +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
24730     +               _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
24731     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24732     +            end;
MPRINT(EM_DIAGRAM):   end;
24733     +         end;
MPRINT(EM_DIAGRAM):   end;
24734     +      end;
MPRINT(EM_DIAGRAM):   end;
24735     +   end;
MPRINT(EM_DIAGRAM):   end;
24736     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24737     +      if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
24738     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
24739     +            _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
24740     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24741     +         end;
MPRINT(EM_DIAGRAM):   end;
24742     +         else do;
MPRINT(EM_DIAGRAM):   else do;
24743     +            if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
24744     +               _3_5 = 1;
MPRINT(EM_DIAGRAM):   _3_5 = 1;
24745     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24746     +            end;
MPRINT(EM_DIAGRAM):   end;
24747     +         end;
MPRINT(EM_DIAGRAM):   end;
24748     +      end;
MPRINT(EM_DIAGRAM):   end;
24749     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24750     +         if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
24751     +            _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
24752     +            _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
24753     +            _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
24754     +            _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
24755     +            _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
24756     +            _3_5 = -1;
MPRINT(EM_DIAGRAM):   _3_5 = -1;
24757     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24758     +         end;
MPRINT(EM_DIAGRAM):   end;
24759     +      end;
MPRINT(EM_DIAGRAM):   end;
24760     +   end;
MPRINT(EM_DIAGRAM):   end;
24761     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
24762     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
24763     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
24764     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
24765     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
24766     +      _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
24767     +      _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
24768     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24769     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24770     +   end;
MPRINT(EM_DIAGRAM):   end;
24771     +end;
MPRINT(EM_DIAGRAM):   end;
24772     +
24773     +*** Generate dummy variables for GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLAGE ;
24774     +drop _4_0 _4_1 _4_2 _4_3 ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 ;
24775     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
24776     +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
24777     +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
24778     +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
24779     +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
24780     +if missing( GRP_LOG_CLAGE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLAGE ) then do;
24781     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
24782     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
24783     +   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
24784     +   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
24785     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24786     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24787     +end;
MPRINT(EM_DIAGRAM):   end;
24788     +else do;
MPRINT(EM_DIAGRAM):   else do;
24789     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24790     +   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
24791     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24792     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
24793     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
24794     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
24795     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
24796     +            _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
24797     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24798     +         end;
MPRINT(EM_DIAGRAM):   end;
24799     +         else do;
MPRINT(EM_DIAGRAM):   else do;
24800     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
24801     +               _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
24802     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24803     +            end;
MPRINT(EM_DIAGRAM):   end;
24804     +         end;
MPRINT(EM_DIAGRAM):   end;
24805     +      end;
MPRINT(EM_DIAGRAM):   end;
24806     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24807     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24808     +            _4_2 = 1;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
24809     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24810     +         end;
MPRINT(EM_DIAGRAM):   end;
24811     +      end;
MPRINT(EM_DIAGRAM):   end;
24812     +   end;
MPRINT(EM_DIAGRAM):   end;
24813     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24814     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
24815     +         _4_3 = 1;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
24816     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24817     +      end;
MPRINT(EM_DIAGRAM):   end;
24818     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24819     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
24820     +            _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
24821     +            _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
24822     +            _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
24823     +            _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
24824     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24825     +         end;
MPRINT(EM_DIAGRAM):   end;
24826     +      end;
MPRINT(EM_DIAGRAM):   end;
24827     +   end;
MPRINT(EM_DIAGRAM):   end;
24828     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
24829     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
24830     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
24831     +      _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
24832     +      _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
24833     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24834     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24835     +   end;
MPRINT(EM_DIAGRAM):   end;
24836     +end;
MPRINT(EM_DIAGRAM):   end;
24837     +
24838     +*** Generate dummy variables for GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLNO ;
24839     +drop _5_0 _5_1 _5_2 _5_3 ;
MPRINT(EM_DIAGRAM):   drop _5_0 _5_1 _5_2 _5_3 ;
24840     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
24841     +_5_0 = 0;
MPRINT(EM_DIAGRAM):   _5_0 = 0;
24842     +_5_1 = 0;
MPRINT(EM_DIAGRAM):   _5_1 = 0;
24843     +_5_2 = 0;
MPRINT(EM_DIAGRAM):   _5_2 = 0;
24844     +_5_3 = 0;
MPRINT(EM_DIAGRAM):   _5_3 = 0;
24845     +if missing( GRP_LOG_CLNO ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLNO ) then do;
24846     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
24847     +   _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
24848     +   _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
24849     +   _5_3 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
24850     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24851     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24852     +end;
MPRINT(EM_DIAGRAM):   end;
24853     +else do;
MPRINT(EM_DIAGRAM):   else do;
24854     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24855     +   _dm12 = put( GRP_LOG_CLNO , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLNO , BEST12. );
24856     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24857     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
24858     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
24859     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
24860     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
24861     +            _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
24862     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24863     +         end;
MPRINT(EM_DIAGRAM):   end;
24864     +         else do;
MPRINT(EM_DIAGRAM):   else do;
24865     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
24866     +               _5_1 = 1;
MPRINT(EM_DIAGRAM):   _5_1 = 1;
24867     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24868     +            end;
MPRINT(EM_DIAGRAM):   end;
24869     +         end;
MPRINT(EM_DIAGRAM):   end;
24870     +      end;
MPRINT(EM_DIAGRAM):   end;
24871     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24872     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24873     +            _5_2 = 1;
MPRINT(EM_DIAGRAM):   _5_2 = 1;
24874     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24875     +         end;
MPRINT(EM_DIAGRAM):   end;
24876     +      end;
MPRINT(EM_DIAGRAM):   end;
24877     +   end;
MPRINT(EM_DIAGRAM):   end;
24878     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24879     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
24880     +         _5_3 = 1;
MPRINT(EM_DIAGRAM):   _5_3 = 1;
24881     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24882     +      end;
MPRINT(EM_DIAGRAM):   end;
24883     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24884     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
24885     +            _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
24886     +            _5_1 = -1;
MPRINT(EM_DIAGRAM):   _5_1 = -1;
24887     +            _5_2 = -1;
MPRINT(EM_DIAGRAM):   _5_2 = -1;
24888     +            _5_3 = -1;
MPRINT(EM_DIAGRAM):   _5_3 = -1;
24889     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24890     +         end;
MPRINT(EM_DIAGRAM):   end;
24891     +      end;
MPRINT(EM_DIAGRAM):   end;
24892     +   end;
MPRINT(EM_DIAGRAM):   end;
24893     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
24894     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
24895     +      _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
24896     +      _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
24897     +      _5_3 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
24898     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24899     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24900     +   end;
MPRINT(EM_DIAGRAM):   end;
24901     +end;
MPRINT(EM_DIAGRAM):   end;
24902     +
24903     +*** Generate dummy variables for GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEBTINC ;
24904     +drop _6_0 _6_1 _6_2 _6_3 ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 ;
24905     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
24906     +_6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
24907     +_6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
24908     +_6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
24909     +_6_3 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
24910     +if missing( GRP_LOG_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEBTINC ) then do;
24911     +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
24912     +   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
24913     +   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
24914     +   _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
24915     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24916     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24917     +end;
MPRINT(EM_DIAGRAM):   end;
24918     +else do;
MPRINT(EM_DIAGRAM):   else do;
24919     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24920     +   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
24921     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24922     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
24923     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
24924     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
24925     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
24926     +            _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
24927     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24928     +         end;
MPRINT(EM_DIAGRAM):   end;
24929     +         else do;
MPRINT(EM_DIAGRAM):   else do;
24930     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
24931     +               _6_1 = 1;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
24932     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24933     +            end;
MPRINT(EM_DIAGRAM):   end;
24934     +         end;
MPRINT(EM_DIAGRAM):   end;
24935     +      end;
MPRINT(EM_DIAGRAM):   end;
24936     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24937     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24938     +            _6_2 = 1;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
24939     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24940     +         end;
MPRINT(EM_DIAGRAM):   end;
24941     +      end;
MPRINT(EM_DIAGRAM):   end;
24942     +   end;
MPRINT(EM_DIAGRAM):   end;
24943     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24944     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
24945     +         _6_3 = 1;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
24946     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24947     +      end;
MPRINT(EM_DIAGRAM):   end;
24948     +      else do;
MPRINT(EM_DIAGRAM):   else do;
24949     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
24950     +            _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
24951     +            _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
24952     +            _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
24953     +            _6_3 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
24954     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24955     +         end;
MPRINT(EM_DIAGRAM):   end;
24956     +      end;
MPRINT(EM_DIAGRAM):   end;
24957     +   end;
MPRINT(EM_DIAGRAM):   end;
24958     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
24959     +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
24960     +      _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
24961     +      _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
24962     +      _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
24963     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24964     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24965     +   end;
MPRINT(EM_DIAGRAM):   end;
24966     +end;
MPRINT(EM_DIAGRAM):   end;
24967     +
24968     +*** Generate dummy variables for GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DELINQ ;
24969     +drop _7_0 ;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
24970     +if missing( GRP_LOG_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DELINQ ) then do;
24971     +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
24972     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24973     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24974     +end;
MPRINT(EM_DIAGRAM):   end;
24975     +else do;
MPRINT(EM_DIAGRAM):   else do;
24976     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24977     +   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
24978     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
24979     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
24980     +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
24981     +   end;
MPRINT(EM_DIAGRAM):   end;
24982     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
24983     +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
24984     +   end;
MPRINT(EM_DIAGRAM):   end;
24985     +   else do;
MPRINT(EM_DIAGRAM):   else do;
24986     +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
24987     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24988     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24989     +   end;
MPRINT(EM_DIAGRAM):   end;
24990     +end;
MPRINT(EM_DIAGRAM):   end;
24991     +
24992     +*** Generate dummy variables for GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEROG ;
24993     +drop _8_0 ;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
24994     +if missing( GRP_LOG_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEROG ) then do;
24995     +   _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
24996     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24997     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24998     +end;
MPRINT(EM_DIAGRAM):   end;
24999     +else do;
MPRINT(EM_DIAGRAM):   else do;
25000     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
25001     +   _dm12 = put( GRP_LOG_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEROG , BEST12. );
25002     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
25003     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
25004     +      _8_0 = -1;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
25005     +   end;
MPRINT(EM_DIAGRAM):   end;
25006     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
25007     +      _8_0 = 1;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
25008     +   end;
MPRINT(EM_DIAGRAM):   end;
25009     +   else do;
MPRINT(EM_DIAGRAM):   else do;
25010     +      _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
25011     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
25012     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25013     +   end;
MPRINT(EM_DIAGRAM):   end;
25014     +end;
MPRINT(EM_DIAGRAM):   end;
25015     +
25016     +*** Generate dummy variables for GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_LOAN ;
25017     +drop _9_0 _9_1 _9_2 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 ;
25018     +if missing( GRP_LOG_LOAN ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_LOAN ) then do;
25019     +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
25020     +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
25021     +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
25022     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25023     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25024     +end;
MPRINT(EM_DIAGRAM):   end;
25025     +else do;
MPRINT(EM_DIAGRAM):   else do;
25026     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
25027     +   _dm12 = put( GRP_LOG_LOAN , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_LOAN , BEST12. );
25028     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
25029     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
25030     +      _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
25031     +      _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
25032     +      _9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
25033     +   end;
MPRINT(EM_DIAGRAM):   end;
25034     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
25035     +      _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
25036     +      _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
25037     +      _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
25038     +   end;
MPRINT(EM_DIAGRAM):   end;
25039     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
25040     +      _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
25041     +      _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
25042     +      _9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
25043     +   end;
MPRINT(EM_DIAGRAM):   end;
25044     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
25045     +      _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
25046     +      _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
25047     +      _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
25048     +   end;
MPRINT(EM_DIAGRAM):   end;
25049     +   else do;
MPRINT(EM_DIAGRAM):   else do;
25050     +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
25051     +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
25052     +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
25053     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
25054     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25055     +   end;
MPRINT(EM_DIAGRAM):   end;
25056     +end;
MPRINT(EM_DIAGRAM):   end;
25057     +
25058     +*** Generate dummy variables for GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_MORTDUE ;
25059     +drop _10_0 _10_1 _10_2 _10_3 ;
MPRINT(EM_DIAGRAM):   drop _10_0 _10_1 _10_2 _10_3 ;
25060     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
25061     +_10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
25062     +_10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = 0;
25063     +_10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
25064     +_10_3 = 0;
MPRINT(EM_DIAGRAM):   _10_3 = 0;
25065     +if missing( GRP_LOG_MORTDUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_MORTDUE ) then do;
25066     +   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
25067     +   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
25068     +   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
25069     +   _10_3 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
25070     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25071     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25072     +end;
MPRINT(EM_DIAGRAM):   end;
25073     +else do;
MPRINT(EM_DIAGRAM):   else do;
25074     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
25075     +   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
25076     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
25077     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
25078     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
25079     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
25080     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
25081     +            _10_0 = 1;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
25082     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25083     +         end;
MPRINT(EM_DIAGRAM):   end;
25084     +         else do;
MPRINT(EM_DIAGRAM):   else do;
25085     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
25086     +               _10_1 = 1;
MPRINT(EM_DIAGRAM):   _10_1 = 1;
25087     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25088     +            end;
MPRINT(EM_DIAGRAM):   end;
25089     +         end;
MPRINT(EM_DIAGRAM):   end;
25090     +      end;
MPRINT(EM_DIAGRAM):   end;
25091     +      else do;
MPRINT(EM_DIAGRAM):   else do;
25092     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
25093     +            _10_2 = 1;
MPRINT(EM_DIAGRAM):   _10_2 = 1;
25094     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25095     +         end;
MPRINT(EM_DIAGRAM):   end;
25096     +      end;
MPRINT(EM_DIAGRAM):   end;
25097     +   end;
MPRINT(EM_DIAGRAM):   end;
25098     +   else do;
MPRINT(EM_DIAGRAM):   else do;
25099     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
25100     +         _10_3 = 1;
MPRINT(EM_DIAGRAM):   _10_3 = 1;
25101     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25102     +      end;
MPRINT(EM_DIAGRAM):   end;
25103     +      else do;
MPRINT(EM_DIAGRAM):   else do;
25104     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
25105     +            _10_0 = -1;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
25106     +            _10_1 = -1;
MPRINT(EM_DIAGRAM):   _10_1 = -1;
25107     +            _10_2 = -1;
MPRINT(EM_DIAGRAM):   _10_2 = -1;
25108     +            _10_3 = -1;
MPRINT(EM_DIAGRAM):   _10_3 = -1;
25109     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25110     +         end;
MPRINT(EM_DIAGRAM):   end;
25111     +      end;
MPRINT(EM_DIAGRAM):   end;
25112     +   end;
MPRINT(EM_DIAGRAM):   end;
25113     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
25114     +      _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
25115     +      _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
25116     +      _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
25117     +      _10_3 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
25118     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
25119     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25120     +   end;
MPRINT(EM_DIAGRAM):   end;
25121     +end;
MPRINT(EM_DIAGRAM):   end;
25122     +
25123     +*** Generate dummy variables for GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_VALUE ;
25124     +drop _11_0 _11_1 _11_2 _11_3 ;
MPRINT(EM_DIAGRAM):   drop _11_0 _11_1 _11_2 _11_3 ;
25125     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
25126     +_11_0 = 0;
MPRINT(EM_DIAGRAM):   _11_0 = 0;
25127     +_11_1 = 0;
MPRINT(EM_DIAGRAM):   _11_1 = 0;
25128     +_11_2 = 0;
MPRINT(EM_DIAGRAM):   _11_2 = 0;
25129     +_11_3 = 0;
MPRINT(EM_DIAGRAM):   _11_3 = 0;
25130     +if missing( GRP_LOG_VALUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_VALUE ) then do;
25131     +   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_0 = .;
25132     +   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
25133     +   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
25134     +   _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
25135     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25136     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25137     +end;
MPRINT(EM_DIAGRAM):   end;
25138     +else do;
MPRINT(EM_DIAGRAM):   else do;
25139     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
25140     +   _dm12 = put( GRP_LOG_VALUE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_VALUE , BEST12. );
25141     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
25142     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
25143     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
25144     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
25145     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
25146     +            _11_0 = 1;
MPRINT(EM_DIAGRAM):   _11_0 = 1;
25147     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25148     +         end;
MPRINT(EM_DIAGRAM):   end;
25149     +         else do;
MPRINT(EM_DIAGRAM):   else do;
25150     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
25151     +               _11_1 = 1;
MPRINT(EM_DIAGRAM):   _11_1 = 1;
25152     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25153     +            end;
MPRINT(EM_DIAGRAM):   end;
25154     +         end;
MPRINT(EM_DIAGRAM):   end;
25155     +      end;
MPRINT(EM_DIAGRAM):   end;
25156     +      else do;
MPRINT(EM_DIAGRAM):   else do;
25157     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
25158     +            _11_2 = 1;
MPRINT(EM_DIAGRAM):   _11_2 = 1;
25159     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25160     +         end;
MPRINT(EM_DIAGRAM):   end;
25161     +      end;
MPRINT(EM_DIAGRAM):   end;
25162     +   end;
MPRINT(EM_DIAGRAM):   end;
25163     +   else do;
MPRINT(EM_DIAGRAM):   else do;
25164     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
25165     +         _11_3 = 1;
MPRINT(EM_DIAGRAM):   _11_3 = 1;
25166     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25167     +      end;
MPRINT(EM_DIAGRAM):   end;
25168     +      else do;
MPRINT(EM_DIAGRAM):   else do;
25169     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
25170     +            _11_0 = -1;
MPRINT(EM_DIAGRAM):   _11_0 = -1;
25171     +            _11_1 = -1;
MPRINT(EM_DIAGRAM):   _11_1 = -1;
25172     +            _11_2 = -1;
MPRINT(EM_DIAGRAM):   _11_2 = -1;
25173     +            _11_3 = -1;
MPRINT(EM_DIAGRAM):   _11_3 = -1;
25174     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25175     +         end;
MPRINT(EM_DIAGRAM):   end;
25176     +      end;
MPRINT(EM_DIAGRAM):   end;
25177     +   end;
MPRINT(EM_DIAGRAM):   end;
25178     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
25179     +      _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_0 = .;
25180     +      _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
25181     +      _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
25182     +      _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
25183     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
25184     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25185     +   end;
MPRINT(EM_DIAGRAM):   end;
25186     +end;
MPRINT(EM_DIAGRAM):   end;
25187     +
25188     +*** Generate dummy variables for GRP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NINQ ;
25189     +drop _13_0 _13_1 _13_2 ;
MPRINT(EM_DIAGRAM):   drop _13_0 _13_1 _13_2 ;
25190     +if missing( GRP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NINQ ) then do;
25191     +   _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_0 = .;
25192     +   _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
25193     +   _13_2 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
25194     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25195     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25196     +end;
MPRINT(EM_DIAGRAM):   end;
25197     +else do;
MPRINT(EM_DIAGRAM):   else do;
25198     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
25199     +   _dm12 = put( GRP_NINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NINQ , BEST12. );
25200     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
25201     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
25202     +      _13_0 = 1;
MPRINT(EM_DIAGRAM):   _13_0 = 1;
25203     +      _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
25204     +      _13_2 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
25205     +   end;
MPRINT(EM_DIAGRAM):   end;
25206     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
25207     +      _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
25208     +      _13_1 = 1;
MPRINT(EM_DIAGRAM):   _13_1 = 1;
25209     +      _13_2 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
25210     +   end;
MPRINT(EM_DIAGRAM):   end;
25211     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
25212     +      _13_0 = -1;
MPRINT(EM_DIAGRAM):   _13_0 = -1;
25213     +      _13_1 = -1;
MPRINT(EM_DIAGRAM):   _13_1 = -1;
25214     +      _13_2 = -1;
MPRINT(EM_DIAGRAM):   _13_2 = -1;
25215     +   end;
MPRINT(EM_DIAGRAM):   end;
25216     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
25217     +      _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
25218     +      _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
25219     +      _13_2 = 1;
MPRINT(EM_DIAGRAM):   _13_2 = 1;
25220     +   end;
MPRINT(EM_DIAGRAM):   end;
25221     +   else do;
MPRINT(EM_DIAGRAM):   else do;
25222     +      _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_0 = .;
25223     +      _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
25224     +      _13_2 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
25225     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
25226     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25227     +   end;
MPRINT(EM_DIAGRAM):   end;
25228     +end;
MPRINT(EM_DIAGRAM):   end;
25229     +
25230     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
25231     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
25232     +   _P0 = 0.1994122586;
MPRINT(EM_DIAGRAM):   _P0 = 0.1994122586;
25233     +   _P1 = 0.8005877414;
MPRINT(EM_DIAGRAM):   _P1 = 0.8005877414;
25234     +   goto REG3DR1;
MPRINT(EM_DIAGRAM):   goto REG3DR1;
25235     +end;
MPRINT(EM_DIAGRAM):   end;
25236     +
25237     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
25238     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
25239     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
25240     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
25241     +
25242     +***  Effect: GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDELINQ ;
25243     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25244     +_LP0 = _LP0 + (   -0.87775516834488) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.87775516834488) * _TEMP * _1_0;
25245     +
25246     +***  Effect: GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDEROG ;
25247     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25248     +_LP0 = _LP0 + (   -0.55281445474052) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.55281445474052) * _TEMP * _2_0;
25249     +
25250     +***  Effect: GRP_JOB ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_JOB ;
25251     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25252     +_LP0 = _LP0 + (   -1.57351647111869) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.57351647111869) * _TEMP * _3_0;
25253     +_LP0 = _LP0 + (    0.28613983828213) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28613983828213) * _TEMP * _3_1;
25254     +_LP0 = _LP0 + (    0.04717425869826) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04717425869826) * _TEMP * _3_2;
25255     +_LP0 = _LP0 + (    -0.6273079991539) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.6273079991539) * _TEMP * _3_3;
25256     +_LP0 = _LP0 + (    0.46293169342544) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46293169342544) * _TEMP * _3_4;
25257     +_LP0 = _LP0 + (    0.53314640452982) * _TEMP * _3_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.53314640452982) * _TEMP * _3_5;
25258     +
25259     +***  Effect: GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLAGE ;
25260     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25261     +_LP0 = _LP0 + (     0.4885261303632) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.4885261303632) * _TEMP * _4_0;
25262     +_LP0 = _LP0 + (    0.71554240420541) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.71554240420541) * _TEMP * _4_1;
25263     +_LP0 = _LP0 + (    0.18909158093947) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18909158093947) * _TEMP * _4_2;
25264     +_LP0 = _LP0 + (   -0.53716218509574) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.53716218509574) * _TEMP * _4_3;
25265     +
25266     +***  Effect: GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLNO ;
25267     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25268     +_LP0 = _LP0 + (    2.73455654245763) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.73455654245763) * _TEMP * _5_0;
25269     +_LP0 = _LP0 + (   -0.61154389982698) * _TEMP * _5_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.61154389982698) * _TEMP * _5_1;
25270     +_LP0 = _LP0 + (   -0.79275770117257) * _TEMP * _5_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.79275770117257) * _TEMP * _5_2;
25271     +_LP0 = _LP0 + (   -0.73669529752972) * _TEMP * _5_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.73669529752972) * _TEMP * _5_3;
25272     +
25273     +***  Effect: GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEBTINC ;
25274     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25275     +_LP0 = _LP0 + (    2.21025315595452) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.21025315595452) * _TEMP * _6_0;
25276     +_LP0 = _LP0 + (    -0.9672227584658) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.9672227584658) * _TEMP * _6_1;
25277     +_LP0 = _LP0 + (   -0.91408931719345) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91408931719345) * _TEMP * _6_2;
25278     +_LP0 = _LP0 + (   -0.62099733755167) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.62099733755167) * _TEMP * _6_3;
25279     +
25280     +***  Effect: GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DELINQ ;
25281     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25282     +_LP0 = _LP0 + (    -0.2959510219925) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2959510219925) * _TEMP * _7_0;
25283     +
25284     +***  Effect: GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEROG ;
25285     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25286     +_LP0 = _LP0 + (   -0.90393524464235) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90393524464235) * _TEMP * _8_0;
25287     +
25288     +***  Effect: GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_LOAN ;
25289     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25290     +_LP0 = _LP0 + (    0.16385991732161) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16385991732161) * _TEMP * _9_0;
25291     +_LP0 = _LP0 + (    0.15830771669066) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15830771669066) * _TEMP * _9_1;
25292     +_LP0 = _LP0 + (    0.06806737420677) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06806737420677) * _TEMP * _9_2;
25293     +
25294     +***  Effect: GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_MORTDUE ;
25295     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25296     +_LP0 = _LP0 + (    0.72652835503015) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.72652835503015) * _TEMP * _10_0;
25297     +_LP0 = _LP0 + (    0.19458084189349) * _TEMP * _10_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19458084189349) * _TEMP * _10_1;
25298     +_LP0 = _LP0 + (   -0.18661188905406) * _TEMP * _10_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18661188905406) * _TEMP * _10_2;
25299     +_LP0 = _LP0 + (   -0.45638816653046) * _TEMP * _10_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45638816653046) * _TEMP * _10_3;
25300     +
25301     +***  Effect: GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_VALUE ;
25302     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25303     +_LP0 = _LP0 + (    3.36684754151064) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.36684754151064) * _TEMP * _11_0;
25304     +_LP0 = _LP0 + (   -0.90230378426672) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90230378426672) * _TEMP * _11_1;
25305     +_LP0 = _LP0 + (   -0.91035575384715) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91035575384715) * _TEMP * _11_2;
25306     +_LP0 = _LP0 + (   -1.14494565714679) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.14494565714679) * _TEMP * _11_3;
25307     +
25308     +***  Effect: GRP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NINQ ;
25309     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25310     +_LP0 = _LP0 + (   -0.31468561657707) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31468561657707) * _TEMP * _13_0;
25311     +_LP0 = _LP0 + (   -0.18323440424764) * _TEMP * _13_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18323440424764) * _TEMP * _13_1;
25312     +_LP0 = _LP0 + (   -0.09136486214824) * _TEMP * _13_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09136486214824) * _TEMP * _13_2;
25313     +
25314     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
25315     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
25316     +_TEMP =    -0.63961613873858 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -0.63961613873858 + _LP0;
25317     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
25318     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
25319     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
25320     +end;
MPRINT(EM_DIAGRAM):   end;
25321     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
25322     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
25323     +
25324     +REG3DR1:
25325     +
25326     +*** Residuals;
MPRINT(EM_DIAGRAM):   REG3DR1: *** Residuals;
25327     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
25328     +   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
25329     +   R_BAD0 = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
25330     +end;
MPRINT(EM_DIAGRAM):   end;
25331     +else do;
MPRINT(EM_DIAGRAM):   else do;
25332     +    label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
25333     +    label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
25334     +   R_BAD1 = - _P0;
MPRINT(EM_DIAGRAM):   R_BAD1 = - _P0;
25335     +   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   R_BAD0 = - _P1;
25336     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
25337     +      when (0)  R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_BAD1 = R_BAD1 + 1;
25338     +      when (1)  R_BAD0 = R_BAD0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_BAD0 = R_BAD0 + 1;
25339     +   end;
MPRINT(EM_DIAGRAM):   end;
25340     +end;
MPRINT(EM_DIAGRAM):   end;
25341     +
25342     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
25343     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
25344     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
25345     +P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
25346     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
25347     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
25348     +P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
25349     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
25350     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
25351     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
25352     +end;
MPRINT(EM_DIAGRAM):   end;
25353     +I_BAD = REG3DRF[_IY];
MPRINT(EM_DIAGRAM):   I_BAD = REG3DRF[_IY];
25354     +U_BAD = REG3DRU[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REG3DRU[_IY];
25355     +
25356     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
25357     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
25358     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
25359      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG3_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_TEST.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
25360      quit;
25361      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
25362      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25363      * Reg3: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg3: Computing metadata for TRAIN data;
25364      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.REG3_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Reg3_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Reg3_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Reg3_TRAIN out=WORK.M17IQUTZ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M17IQUTZ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M17IQUTZ(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M17IQUTZ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M17IQUTZ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M31SOMFR NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M31SOMFR;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M31SOMFR;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0H3HP2I(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M31SOMFR;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M31SOMFR;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M31SOMFR;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M31SOMFR;
MPRINT(EMADVISECOLUMNS):   set WORK.M31SOMFR;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.BINNING_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.BINNING_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg3";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("BAD") model = "Reg3";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg3: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'GRP_INDELINQ' 'GRP_INDEROG' 'GRP_JOB' 'GRP_LOG_CLAGE' 'GRP_LOG_CLNO' 'GRP_LOG_DEBTINC' 'GRP_LOG_DELINQ' 'GRP_LOG_DEROG' 'GRP_LOG_LOAN' 'GRP_LOG_MORTDUE' 'GRP_LOG_VALUE' 'GRP_NINQ' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg3: Rejected using forward selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
25729      data EMWS1.Reg3_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg3_EMINFO;
25730      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
25731      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
25732      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.REG3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
25736      run;
25737      proc sort data = EMWS1.Reg3_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Reg3_EMINFO NOTHREADS;
25738      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
25739      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG3_EMINFO.
NOTE: The data set EMWS1.REG3_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.15 seconds
      cpu time            0.04 seconds
 
 
25740      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
25741      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
25742      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
25743      proc sort data = EMWS1.Reg3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Reg3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
25744      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
25745      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.REG3_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
25746      data EMWS1.Reg3_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg3_EMINFO;
25747      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
25748      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
25749      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.REG3_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
25750      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
25751      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
25752      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
25753      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS1.REG3_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: View EMWS1.REG3_VALIDATE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: View EMWS1.REG3_TEST.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 25, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:49:26" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                October 25, 2018
Time:                23:49:26
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3WMYZA4 "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3WMYZA4 new;
MPRINT(EM_DIAGRAM):   run;
25777      data WORK.DMREGTEMP;
MPRINT(EM_DIAGRAM):    data WORK.DMREGTEMP;
25778      set EMWS1.Reg3_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_EMESTIMATE;
25779      where _CHOSEN_ ne '';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '';
25780      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG3_EMESTIMATE.
      WHERE _CHOSEN_ not = ' ';
NOTE: The data set WORK.DMREGTEMP has 3 observations and 79 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
25781      data WORK.DMREGTEMP;
MPRINT(EM_DIAGRAM):   data WORK.DMREGTEMP;
25782      merge WORK.DMREGTEMP EMWS1.Reg3_FITTEST;
MPRINT(EM_DIAGRAM):   merge WORK.DMREGTEMP EMWS1.Reg3_FITTEST;
25783      by _step_;
MPRINT(EM_DIAGRAM):   by _step_;
25784      if _CHOSEN_ ne '' then output;
MPRINT(EM_DIAGRAM):   if _CHOSEN_ ne '' then output;
25785      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.DMREGTEMP.
NOTE: There were 3 observations read from the data set EMWS1.REG3_FITTEST.
NOTE: The data set WORK.DMREGTEMP has 3 observations and 93 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
25786      data EMWS1.Reg3_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg3_EMOUTFIT;
25787      length TARGET $32;
MPRINT(EM_DIAGRAM):   length TARGET $32;
25788      set WORK.DMREGTEMP end=eof;
MPRINT(EM_DIAGRAM):   set WORK.DMREGTEMP end=eof;
25789      where (_TYPE_='PARMS');
MPRINT(EM_DIAGRAM):   where (_TYPE_='PARMS');
25790      drop _STEP_--GRP_REASON2;
MPRINT(EM_DIAGRAM):   drop _STEP_--GRP_REASON2;
25791      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
25792      TARGET = "BAD";
MPRINT(EM_DIAGRAM):   TARGET = "BAD";
25793      output;
MPRINT(EM_DIAGRAM):   output;
25794      end;
MPRINT(EM_DIAGRAM):   end;
25795      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.DMREGTEMP.
      WHERE _TYPE_='PARMS';
NOTE: The data set EMWS1.REG3_EMOUTFIT has 1 observations and 47 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
25796      data EMWS1.Reg3_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg3_EMOUTFIT;
25797      set EMWS1.Reg3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_EMOUTFIT;
25798      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
25799      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
25800      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.REG3_EMOUTFIT.
NOTE: The data set EMWS1.REG3_EMOUTFIT has 1 observations and 48 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
 
 
25801      proc sort data=EMWS1.Reg3_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Reg3_EMREPORTFIT nothreads;
25802      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
25803      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.REG3_EMREPORTFIT.
NOTE: The data set EMWS1.REG3_EMREPORTFIT has 20 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
 
 
25804      %let _EMwarndup = 0;
25805      %let _EMtargetdup =;
25806      %let _EMASEtargetdup =;
25807      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
25808      set EMWS1.Reg3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_EMOUTFIT;
25809      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
25810      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
25811      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
25812      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
25813      end;
MPRINT(EM_DIAGRAM):   end;
25814      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG3_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
25815      proc sort data=EMWS1.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
25816      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
25817      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 30 observations read from the data set EMWS1.BINNING_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 30 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
25818      proc sort data=EMWS1.Reg3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
25819      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
25820      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 29 observations read from the data set EMWS1.REG3_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 29 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
25821      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
25822      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
25823      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
25824      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 30 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 29 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 30 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
25825      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
25826      set EMWS1.Reg3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_CMeta_TRAIN;
25827      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
25828      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
25829      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
25830      set EMWS1.Reg3_TRAIN(keep=
25831      F_BAD
25832      I_BAD
25833      P_BAD0
25834      P_BAD1
25835      R_BAD0
25836      R_BAD1
25837      U_BAD
25838      _WARN_
25839      BAD
25840      );
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_TRAIN(keep= F_BAD I_BAD P_BAD0 P_BAD1 R_BAD0 R_BAD1 U_BAD _WARN_ BAD );
25841      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2382 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2382 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.REG3_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
NOTE: There were 2382 observations read from the data set EMWS1.BINNING_TRAIN.
NOTE: There were 2382 observations read from the data set EMWS1.REG3_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2382 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Reg3_2CDD50_ nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_2CDD50_;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg3_2CDD50_(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg3_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Reg3_2CDD50_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg3_2CDD50_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 -
EVENTS100 NONEVENTS1 - NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1994122586 _NEVENTS 475 _NNONEVENTS 1907 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1 SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100 SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2382));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0005903148 OVLMAX 0.9999217666 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2382 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (2382/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2382)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2382/20) ) / ( AVGNUMRESP / (2382/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2382 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2382 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2382/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 2382/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2382;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg3_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
30122      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
30123      set EMWS1.Reg3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_CMeta_TRAIN;
30124      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
30124    ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
30125      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
30126      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
30127      set EMWS1.Reg3_VALIDATE(keep=
30128      F_BAD
30129      I_BAD
30130      P_BAD0
30131      P_BAD1
30132      R_BAD0
30133      R_BAD1
30134      U_BAD
30135      _WARN_
30136      BAD
30137      );
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_VALIDATE(keep= F_BAD I_BAD P_BAD0 P_BAD1 R_BAD0 R_BAD1
U_BAD _WARN_ BAD );
30138      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1788 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS1.TRANS_VALIDATE.
NOTE: View EMWS1.REG3_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.07 seconds
 
NOTE: There were 1788 observations read from the data set EMWS1.BINNING_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS1.REG3_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1788 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Reg3_1GR13IU nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg3_1GR13IU;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
The SAS System
 
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg3_1GR13IU(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg3_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_EMCLASSIFICATION WORK.Reg3_1GR13IU;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg3_1GR13IU;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1996644295 _NEVENTS
357 _NNONEVENTS 1431 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1788));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0004543223 OVLMAX 0.9998374871 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1788 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
(1788/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1788)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 1788/20) ) / (
AVGNUMRESP / (1788/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 1788/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE *
((20-GROUP+1)* 1788/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg3_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
34428      %let _cn = %sysfunc(getoption(CENTER));
34429      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
34430      proc print data=EMWS1.Reg3_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg3_EMREPORTFIT noobs label;
34431      var STAT LABEL TRAIN
34432      VALIDATE
34433      TEST
34434      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
34435      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
34436      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
34437      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
34438      run;
 
NOTE: There were 20 observations read from the data set EMWS1.REG3_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
34439      title10;
MPRINT(EM_DIAGRAM):   title10;
34440      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
34441      proc sort data=EMWS1.Reg3_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Reg3_EMCLASSIFICATION nothreads;
34442      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
34443      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG3_EMCLASSIFICATION.
NOTE: The data set EMWS1.REG3_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.14 seconds
      cpu time            0.01 seconds
 
 
34444      %let _cn = %sysfunc(getoption(CENTER));
34445      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
34446      proc print data=EMWS1.Reg3_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg3_EMCLASSIFICATION noobs label;
34447      var from into pct_row pct_col count percent
34448      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
34449      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
34450      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
34451      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
34452      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
34453      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
34454      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
34455      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
34456      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
34457      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
34458      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
34459      run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG3_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
34460      title9;
MPRINT(EM_DIAGRAM):   title9;
34461      title10;
MPRINT(EM_DIAGRAM):   title10;
34462      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
34463      %let _cn = %sysfunc(getoption(CENTER));
34464      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
34465      data EMWS1.Reg3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg3_EMEVENTREPORT;
34466      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
34466    ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
34467      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
34467    !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
34467    ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
34467    ! FALSEEVENT
34468      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
34468    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
34468    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
34469         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
34470      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
34471      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
34472      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
34473      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
34474      set EMWS1.Reg3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_EMEVENTREPORT;
34475      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG3_EMEVENTREPORT.
NOTE: The data set EMWS1.REG3_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.04 seconds
 
 
34476      proc print data=EMWS1.Reg3_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg3_EMEVENTREPORT noobs label;
34477      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
34478      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
34479      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
34480      run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG3_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 10.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
34481      title10;
MPRINT(EM_DIAGRAM):   title10;
34482      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
34483      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
34484      modify Reg3_EMRANK;
MPRINT(EM_DIAGRAM):   modify Reg3_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
34485      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
34486      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
34486    ! ;
MPRINT(EM_DIAGRAM):   run;
34487      run;
 
NOTE: MODIFY was successful for EMWS1.REG3_EMRANK.DATA.
34488      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           1.04 seconds
      cpu time            0.31 seconds
 
 
34489      %let _cn = %sysfunc(getoption(CENTER));
34490      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
34491      proc print data=EMWS1.Reg3_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg3_EMRANK label noobs;
34492      var
34493      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
34494      by
34495      notsorted DATAROLE
34496      notsorted TARGET
34497      notsorted TARGETLABEL
34498      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
34499      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
34500      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
34501      run;
 
NOTE: There were 40 observations read from the data set EMWS1.REG3_EMRANK.
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
34502      title10;
MPRINT(EM_DIAGRAM):   title10;
34503      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
34504      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
34505      modify Reg3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Reg3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
34506      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
34506    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
34507      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
34507    ! ;
MPRINT(EM_DIAGRAM):   run;
34508      run;
 
NOTE: MODIFY was successful for EMWS1.REG3_EMSCOREDIST.DATA.
34509      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.98 seconds
      cpu time            0.26 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg3_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "BAD" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
