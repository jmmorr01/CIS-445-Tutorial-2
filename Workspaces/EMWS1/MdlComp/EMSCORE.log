MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 26, 2018" 
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:12:30" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                October 26, 2018
Time:                00:12:30
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O28K5SO4 "J:\JMMORR01\CIS 445\Tutorial 2\My 
Project\Workspaces\EMWS1\MdlComp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O28K5SO4 new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
      
82892      /* Generate assessment metadata, which will be used to generate assessment data step
82892    !  */
82893      /* code, such as retrieving names of temporary variables and summary variables,
82893    !  */
82894      /* labels, etc.  It is used in almost all the assessment computations such as lift,
82894    !  */
82895      /* roc, index, scoreDist and could be thought as a global variable in assessment
82895    !  */
82896      /* computation.
82896    !  */
82897      data work.ASSESS_14RJ7I1_assessMeta_NdmzDR;
MPRINT(EM_DIAGRAM):    data work.ASSESS_14RJ7I1_assessMeta_NdmzDR;
82898      length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32
82898    ! MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32
82898    ! RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32
82898    ! RESULT_MAX $32 RESULT_MAX_LABEL
82899         $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE
82899    !  $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY 
$32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL 
$100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32 RESULT_MAX_LABEL 
$100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
82900      VARIABLE = "BAD";
MPRINT(EM_DIAGRAM):   VARIABLE = "BAD";
82901      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
82902      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
82903      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
82904      LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
82905      PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
82906      MEASUREMENT = "BINARY";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "BINARY";
82907      LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
82908      GEN_VAR_IN_TEMP_DATA = "BAD";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "BAD";
82909      RESULT_MEAN = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "";
82910      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
82911      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
82912      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
82913      MIN_ADJUSTED = "";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "";
82914      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
82915      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
82916      MAX_ADJUSTED = "";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "";
82917      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
82918      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
82919      TEMPORARY_VARIABLE = "BAD_jBwWXveo6GDvqlo";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "BAD_jBwWXveo6GDvqlo";
82920      output;
MPRINT(EM_DIAGRAM):   output;
82921      VARIABLE = "F_BAD_1";
MPRINT(EM_DIAGRAM):   VARIABLE = "F_BAD_1";
82922      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
82923      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
82924      PARENT = "F_BAD";
MPRINT(EM_DIAGRAM):   PARENT = "F_BAD";
82925      LEVEL = "1";
MPRINT(EM_DIAGRAM):   LEVEL = "1";
82926      PROPERTY = "TARGET_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET_LEVEL";
82927      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
82928      LAST_LEVEL = "0";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "0";
82929      GEN_VAR_IN_TEMP_DATA = "F_BAD_1_vbRqNGq5zKixsrK";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "F_BAD_1_vbRqNGq5zKixsrK";
82930      RESULT_MEAN = "F_BAD_1_mean_sAARPjqaeT_3bX9";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "F_BAD_1_mean_sAARPjqaeT_3bX9";
82931      /* adjust for tied cases */
82932      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
82933      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
82934      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
82935      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
82936      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
82937      RESULT_COUNT = "NumberOfEvents";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "NumberOfEvents";
82938      RESULT_COUNT_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel,
82938    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "Number of Events";
82939      TEMPORARY_VARIABLE = "F_BAD_1_Ao7G0GReXEMxfUK";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "F_BAD_1_Ao7G0GReXEMxfUK";
82940      output;
MPRINT(EM_DIAGRAM):   output;
82941      VARIABLE = "F_BAD_0";
MPRINT(EM_DIAGRAM):   VARIABLE = "F_BAD_0";
82942      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
82943      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
82944      PARENT = "F_BAD";
MPRINT(EM_DIAGRAM):   PARENT = "F_BAD";
82945      LEVEL = "0";
MPRINT(EM_DIAGRAM):   LEVEL = "0";
82946      PROPERTY = "TARGET_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET_LEVEL";
82947      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
82948      LAST_LEVEL = "0";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "0";
82949      GEN_VAR_IN_TEMP_DATA = "F_BAD_0__yRGahmOVgo023Z";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "F_BAD_0__yRGahmOVgo023Z";
82950      RESULT_MEAN = "F_BAD_0_mean_qiitIhjeC951J9c";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "F_BAD_0_mean_qiitIhjeC951J9c";
82951      /* adjust for tied cases */
82952      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
82953      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
82954      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
82955      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
82956      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
82957      RESULT_COUNT = "NumberOfEvents";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "NumberOfEvents";
82958      RESULT_COUNT_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel,
82958    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "Number of Events";
82959      TEMPORARY_VARIABLE = "F_BAD_0_O9qrAQC87r6oFPH";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "F_BAD_0_O9qrAQC87r6oFPH";
82960      output;
MPRINT(EM_DIAGRAM):   output;
82961      VARIABLE = "P_BAD1";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_BAD1";
82962      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
82963      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
82964      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
82965      LEVEL = "1";
MPRINT(EM_DIAGRAM):   LEVEL = "1";
82966      PROPERTY = "POSTERIOR_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "POSTERIOR_LEVEL";
82967      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
82968      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
82969      GEN_VAR_IN_TEMP_DATA = "P_BAD1";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_BAD1";
82970      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
82971      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMean_vlabel,
82971    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Posterior Probability";
82972      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
82973      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Posterior Probability";
82974      MIN_ADJUSTED = "P_BAD1_minAdjusted_T1vHghZ8s";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_BAD1_minAdjusted_T1vHghZ8s";
82975      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
82976      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Posterior Probability";
82977      MAX_ADJUSTED = "P_BAD1_maxAdjusted_P1h5vD6h9";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "P_BAD1_maxAdjusted_P1h5vD6h9";
82978      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
82979      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
82980      TEMPORARY_VARIABLE = "P_BAD1_uaO3uXCfX6OLmPq";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_BAD1_uaO3uXCfX6OLmPq";
82981      output;
MPRINT(EM_DIAGRAM):   output;
82982      VARIABLE = "P_BAD0";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_BAD0";
82983      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
82984      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
82985      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
82986      LEVEL = "0";
MPRINT(EM_DIAGRAM):   LEVEL = "0";
82987      PROPERTY = "POSTERIOR_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "POSTERIOR_LEVEL";
82988      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
82989      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
82990      GEN_VAR_IN_TEMP_DATA = "P_BAD0";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_BAD0";
82991      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
82992      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMean_vlabel,
82992    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Posterior Probability";
82993      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
82994      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Posterior Probability";
82995      MIN_ADJUSTED = "P_BAD0_minAdjusted_q_n4r5nQs";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_BAD0_minAdjusted_q_n4r5nQs";
82996      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
82997      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Posterior Probability";
82998      MAX_ADJUSTED = "P_BAD0_maxAdjusted_oFqhGvw2v";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "P_BAD0_maxAdjusted_oFqhGvw2v";
82999      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
83000      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
83001      TEMPORARY_VARIABLE = "P_BAD0_RFLq7TVB6A1X78M";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_BAD0_RFLq7TVB6A1X78M";
83002      output;
MPRINT(EM_DIAGRAM):   output;
83003      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.ASSESS_14RJ7I1_ASSESSMETA_NDMZDR has 5 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

83004      /* Generate temporary dataset and obtain summary statistics such as total number of
83004    !   */
83005      /* obserations, frequency of target.  However, summary statistics for class
83005    ! reporting */
83006      /* variabels are not computed here since if there exist class reporting variables,
83006    !   */
83007      /* then PROC DMDB will be called. And there is no need to compute interval reporting
83007    !   */
83008      /* summary statisitcs, if any.
83008    !   */
83009      data work.ASSESS_14RJ7I1_normSD_gFawvM(drop=
83010      _numberOfObservation_
83011      _levelFrequency_1
83012      _levelFrequency_2
83013      )
83014      work.ASSESS_14RJ7I1_meansAndTi_eRSwNY (keep=
83015      _numberOfObservation_
83016      _levelFrequency_1
83017      _levelFrequency_2
83018      );
MPRINT(EM_DIAGRAM):    data work.ASSESS_14RJ7I1_normSD_gFawvM(drop= _numberOfObservation_ 
_levelFrequency_1 _levelFrequency_2 ) work.ASSESS_14RJ7I1_meansAndTi_eRSwNY (keep= 
_numberOfObservation_ _levelFrequency_1 _levelFrequency_2 );
83019      set EMWS1.Tree_TRAIN(
83020      where=(
83021      (BAD ^= .)
83022      )
83023      ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_TRAIN( where=( (BAD ^= .) ) ) end=_lastObservation_;
83024      keep frequency_F_lvJn;
MPRINT(EM_DIAGRAM):   keep frequency_F_lvJn;
83025      frequency_F_lvJn = 1;
MPRINT(EM_DIAGRAM):   frequency_F_lvJn = 1;
83026      keep I_BAD F_BAD;
MPRINT(EM_DIAGRAM):   keep I_BAD F_BAD;
83027      keep F_BAD_1_vbRqNGq5zKixsrK;
MPRINT(EM_DIAGRAM):   keep F_BAD_1_vbRqNGq5zKixsrK;
83028      if (F_BAD = '1') then do;
MPRINT(EM_DIAGRAM):   if (F_BAD = '1') then do;
83029      F_BAD_1_vbRqNGq5zKixsrK = 1;
MPRINT(EM_DIAGRAM):   F_BAD_1_vbRqNGq5zKixsrK = 1;
83030      end;
MPRINT(EM_DIAGRAM):   end;
83031      else do;
MPRINT(EM_DIAGRAM):   else do;
83032      F_BAD_1_vbRqNGq5zKixsrK = 0;
MPRINT(EM_DIAGRAM):   F_BAD_1_vbRqNGq5zKixsrK = 0;
83033      end;
MPRINT(EM_DIAGRAM):   end;
83034      keep F_BAD_0__yRGahmOVgo023Z;
MPRINT(EM_DIAGRAM):   keep F_BAD_0__yRGahmOVgo023Z;
83035      if (F_BAD = '0') then do;
MPRINT(EM_DIAGRAM):   if (F_BAD = '0') then do;
83036      F_BAD_0__yRGahmOVgo023Z = 1;
MPRINT(EM_DIAGRAM):   F_BAD_0__yRGahmOVgo023Z = 1;
83037      end;
MPRINT(EM_DIAGRAM):   end;
83038      else do;
MPRINT(EM_DIAGRAM):   else do;
83039      F_BAD_0__yRGahmOVgo023Z = 0;
MPRINT(EM_DIAGRAM):   F_BAD_0__yRGahmOVgo023Z = 0;
83040      end;
MPRINT(EM_DIAGRAM):   end;
83041      keep P_BAD1;
MPRINT(EM_DIAGRAM):   keep P_BAD1;
83042      keep P_BAD0;
MPRINT(EM_DIAGRAM):   keep P_BAD0;
83043      output work.ASSESS_14RJ7I1_normSD_gFawvM;
MPRINT(EM_DIAGRAM):   output work.ASSESS_14RJ7I1_normSD_gFawvM;
83044      keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
83045      retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
83046      _numberOfObservation_ + frequency_F_lvJn;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_F_lvJn;
83047      keep _levelFrequency_1;
MPRINT(EM_DIAGRAM):   keep _levelFrequency_1;
83048      retain _levelFrequency_1 0;
MPRINT(EM_DIAGRAM):   retain _levelFrequency_1 0;
83049      if (F_BAD = '1') then do;
MPRINT(EM_DIAGRAM):   if (F_BAD = '1') then do;
83050      _levelFrequency_1 + frequency_F_lvJn;
MPRINT(EM_DIAGRAM):   _levelFrequency_1 + frequency_F_lvJn;
83051      end;
MPRINT(EM_DIAGRAM):   end;
83052      keep _levelFrequency_2;
MPRINT(EM_DIAGRAM):   keep _levelFrequency_2;
83053      retain _levelFrequency_2 0;
MPRINT(EM_DIAGRAM):   retain _levelFrequency_2 0;
83054      if (F_BAD = '0') then do;
MPRINT(EM_DIAGRAM):   if (F_BAD = '0') then do;
83055      _levelFrequency_2 + frequency_F_lvJn;
MPRINT(EM_DIAGRAM):   _levelFrequency_2 + frequency_F_lvJn;
83056      end;
MPRINT(EM_DIAGRAM):   end;
83057      if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
83058      output work.ASSESS_14RJ7I1_meansAndTi_eRSwNY;
MPRINT(EM_DIAGRAM):   output work.ASSESS_14RJ7I1_meansAndTi_eRSwNY;
83059      end;
MPRINT(EM_DIAGRAM):   end;
83060      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2382 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 2382 observations read from the data set EMWS1.TREE_TRAIN.
      WHERE BAD not = .;
NOTE: The data set WORK.ASSESS_14RJ7I1_NORMSD_GFAWVM has 2382 observations and 7 variables.
NOTE: The data set WORK.ASSESS_14RJ7I1_MEANSANDTI_ERSWNY has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

83061      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
83062      set EMWS1.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK;
83063      where MODEL = "Tree" and TARGET = "BAD" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Tree" and TARGET = "BAD" and dataRole="TRAIN";
83064      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS1.MDLCOMP_EMRANK.
      WHERE (MODEL='Tree') and (TARGET='BAD') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

83065      data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
83066      do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
83067      DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
83068      output;
MPRINT(EM_DIAGRAM):   output;
83069      end;
MPRINT(EM_DIAGRAM):   end;
83070      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

83071      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
83072      merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
83073      by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
83074      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

83075      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
83076      set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
83077      retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
83078      retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
83079      keep event;
MPRINT(EM_DIAGRAM):   keep event;
83080      keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
83081      if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
83082      bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
83083      _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
83084      if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
83085      /* tied */
83086      _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
83087      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
83088      end;
MPRINT(EM_DIAGRAM):   end;
83089      else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
83090      /* next tied */
83091      _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
83092      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ 
));
83093      end;
MPRINT(EM_DIAGRAM):   end;
83094      output;
MPRINT(EM_DIAGRAM):   output;
83095      *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 
1E-6) then do;
83096      * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
83097      *end;
MPRINT(EM_DIAGRAM):   *end;
83098      if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
83099      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
83100      end;
MPRINT(EM_DIAGRAM):   end;
83101      else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
83102      if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
83103      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
83104      end;
MPRINT(EM_DIAGRAM):   end;
83105      end;
MPRINT(EM_DIAGRAM):   end;
83106      bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
83107      /* correct the previous change */
83108      end;
MPRINT(EM_DIAGRAM):   end;
83109      if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
83110      _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
83111      output;
MPRINT(EM_DIAGRAM):   output;
83112      end;
MPRINT(EM_DIAGRAM):   end;
83113      _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
83114      _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
83115      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

83116      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
83117      set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
83118      by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
83119      retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
83120      if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
83121      _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
83122      end;
MPRINT(EM_DIAGRAM):   end;
83123      if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
83124      _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
83125      output;
MPRINT(EM_DIAGRAM):   output;
83126      end;
MPRINT(EM_DIAGRAM):   end;
83127      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 5 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

83128      filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My
83128    ! Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My 
Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring TREE_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
83129      *------------------------------------------------------------*;
83130      * MdlComp: Scoring TREE_TRAIN data;
83131      *------------------------------------------------------------*;
83132      data EMWS1.MdlComp_TRAIN
83133      / view=EMWS1.MdlComp_TRAIN
83134      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_TRAIN / view=EMWS1.MdlComp_TRAIN ;
83135      set EMWS1.Tree_TRAIN
83136      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_TRAIN ;
83137      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\JMMORR01\CIS 445\Tutorial 2\My 
      Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
83138     +drop _temp_;
MPRINT(EM_DIAGRAM):   drop _temp_;
83139     +if (P_BAD1 ge 0.9076923076923) then do;
MPRINT(EM_DIAGRAM):   if (P_BAD1 ge 0.9076923076923) then do;
83140     +b_BAD = 1;
MPRINT(EM_DIAGRAM):   b_BAD = 1;
83141     +end;
MPRINT(EM_DIAGRAM):   end;
83142     +else
83143     +if (P_BAD1 ge 0.71573604060913) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.71573604060913) then do;
83144     +b_BAD = 2;
MPRINT(EM_DIAGRAM):   b_BAD = 2;
83145     +end;
MPRINT(EM_DIAGRAM):   end;
83146     +else
83147     +if (P_BAD1 ge 0.54838709677419) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.54838709677419) then do;
83148     +b_BAD = 3;
MPRINT(EM_DIAGRAM):   b_BAD = 3;
83149     +end;
MPRINT(EM_DIAGRAM):   end;
83150     +else
83151     +if (P_BAD1 ge 0.35211267605633) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.35211267605633) then do;
83152     +b_BAD = 4;
MPRINT(EM_DIAGRAM):   b_BAD = 4;
83153     +end;
MPRINT(EM_DIAGRAM):   end;
83154     +else
83155     +do;
MPRINT(EM_DIAGRAM):   else do;
83156     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
83157     +b_BAD = floor(5 + 16*_temp_);
MPRINT(EM_DIAGRAM):   b_BAD = floor(5 + 16*_temp_);
83158     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
83159      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
83160      quit;
83161      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
83162      filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My
83162    ! Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My 
Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring TREE_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
83163      *------------------------------------------------------------*;
83164      * MdlComp: Scoring TREE_VALIDATE data;
83165      *------------------------------------------------------------*;
83166      data EMWS1.MdlComp_VALIDATE
83167      / view=EMWS1.MdlComp_VALIDATE
83168      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_VALIDATE / view=EMWS1.MdlComp_VALIDATE ;
83169      set EMWS1.Tree_VALIDATE
83170      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_VALIDATE ;
83171      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\JMMORR01\CIS 445\Tutorial 2\My 
      Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
83172     +drop _temp_;
MPRINT(EM_DIAGRAM):   drop _temp_;
83173     +if (P_BAD1 ge 0.9076923076923) then do;
MPRINT(EM_DIAGRAM):   if (P_BAD1 ge 0.9076923076923) then do;
83174     +b_BAD = 1;
MPRINT(EM_DIAGRAM):   b_BAD = 1;
83175     +end;
MPRINT(EM_DIAGRAM):   end;
83176     +else
83177     +if (P_BAD1 ge 0.71573604060913) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.71573604060913) then do;
83178     +b_BAD = 2;
MPRINT(EM_DIAGRAM):   b_BAD = 2;
83179     +end;
MPRINT(EM_DIAGRAM):   end;
83180     +else
83181     +if (P_BAD1 ge 0.54838709677419) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.54838709677419) then do;
83182     +b_BAD = 3;
MPRINT(EM_DIAGRAM):   b_BAD = 3;
83183     +end;
MPRINT(EM_DIAGRAM):   end;
83184     +else
83185     +if (P_BAD1 ge 0.35211267605633) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.35211267605633) then do;
83186     +b_BAD = 4;
MPRINT(EM_DIAGRAM):   b_BAD = 4;
83187     +end;
MPRINT(EM_DIAGRAM):   end;
83188     +else
83189     +do;
MPRINT(EM_DIAGRAM):   else do;
83190     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
83191     +b_BAD = floor(5 + 16*_temp_);
MPRINT(EM_DIAGRAM):   b_BAD = floor(5 + 16*_temp_);
83192     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
83193      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
83194      quit;
83195      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
83196      filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My
83196    ! Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My 
Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring TREE_TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
83197      *------------------------------------------------------------*;
83198      * MdlComp: Scoring TREE_TEST data;
83199      *------------------------------------------------------------*;
83200      data EMWS1.MdlComp_TEST
83201      / view=EMWS1.MdlComp_TEST
83202      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_TEST / view=EMWS1.MdlComp_TEST ;
83203      set EMWS1.Tree_TEST
83204      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_TEST ;
83205      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\JMMORR01\CIS 445\Tutorial 2\My 
      Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
83206     +drop _temp_;
MPRINT(EM_DIAGRAM):   drop _temp_;
83207     +if (P_BAD1 ge 0.9076923076923) then do;
MPRINT(EM_DIAGRAM):   if (P_BAD1 ge 0.9076923076923) then do;
83208     +b_BAD = 1;
MPRINT(EM_DIAGRAM):   b_BAD = 1;
83209     +end;
MPRINT(EM_DIAGRAM):   end;
83210     +else
83211     +if (P_BAD1 ge 0.71573604060913) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.71573604060913) then do;
83212     +b_BAD = 2;
MPRINT(EM_DIAGRAM):   b_BAD = 2;
83213     +end;
MPRINT(EM_DIAGRAM):   end;
83214     +else
83215     +if (P_BAD1 ge 0.54838709677419) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.54838709677419) then do;
83216     +b_BAD = 3;
MPRINT(EM_DIAGRAM):   b_BAD = 3;
83217     +end;
MPRINT(EM_DIAGRAM):   end;
83218     +else
83219     +if (P_BAD1 ge 0.35211267605633) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.35211267605633) then do;
83220     +b_BAD = 4;
MPRINT(EM_DIAGRAM):   b_BAD = 4;
83221     +end;
MPRINT(EM_DIAGRAM):   end;
83222     +else
83223     +do;
MPRINT(EM_DIAGRAM):   else do;
83224     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
83225     +b_BAD = floor(5 + 16*_temp_);
MPRINT(EM_DIAGRAM):   b_BAD = floor(5 + 16*_temp_);
83226     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
83227      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TREE_TEST.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.06 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_DIAGRAM):   quit;
83228      quit;
83229      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
83230      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
83231      * MdlComp: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp: Computing metadata for TRAIN data;
83232      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.MdlComp_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.MdlComp_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.MdlComp_TRAIN out=WORK.M21H_OPK noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M21H_OPK;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M21H_OPK(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M21H_OPK;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M21H_OPK;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0DH_Y3E NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0DH_Y3E;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0DH_Y3E;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2W5FRX1(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0DH_Y3E;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0DH_Y3E;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0DH_Y3E;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then 
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0DH_Y3E;
MPRINT(EMADVISECOLUMNS):   set WORK.M0DH_Y3E;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Tree_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS1.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.07 seconds
      
NOTE: View EMWS1.MDLCOMP_TEST.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
