MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 26, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:02:16" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                October 26, 2018
Time:                00:02:16
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3IXWITX "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3IXWITX new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 26, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:02:16" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                jmmorr01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080761";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 26, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:02:16" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                jmmorr01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
28418      proc freq data=EMWS1.Score_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Score_VariableSet noprint;
28419      table ROLE*LEVEL/out=WORK.ScoreMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.ScoreMETA;
28420      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.SCORE_VARIABLESET.
NOTE: The data set WORK.SCOREMETA has 1 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
      

28421      proc print data=WORK.ScoreMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.ScoreMETA label noobs;
28422      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
28423      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
28424      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
28425      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
28426      run;

NOTE: There were 1 observations read from the data set WORK.SCOREMETA.
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

28427      title10;
MPRINT(EM_DIAGRAM):   title10;
28428      %let groupid =;
28429      %let endGroupid =;
28430      %let prescoreid =;
28431      %let idsTable =;
28432      %let hpdmTable =;
28433      %let lasthptm =;
28434      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
28435      set EMWS1.Reg3_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_EMINFO;
28436      where upcase(key) in('LASTHPTM', 'IDSTABLE', 'HPDMSAMPLE', 'PRESCORECODE','ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
MPRINT(EM_DIAGRAM):   where upcase(key) in('LASTHPTM', 'IDSTABLE', 'HPDMSAMPLE', 'PRESCORECODE','ENDGROUP', 'GROUPINFO', 'BOOSTINFO', 'BAGINFO', 'TARGETINFO', 'INDEXINFO');
28437      select(upcase(key));
MPRINT(EM_DIAGRAM):   select(upcase(key));
28438      when('LASTHPTM') call symput('lasthptm', DATA);
MPRINT(EM_DIAGRAM):   when('LASTHPTM') call symput('lasthptm', DATA);
28439      when('IDSTABLE') call symput('idsTable', DATA);
MPRINT(EM_DIAGRAM):   when('IDSTABLE') call symput('idsTable', DATA);
28440      when('HPDMSAMPLE') call symput('hpdmSample', DATA);
MPRINT(EM_DIAGRAM):   when('HPDMSAMPLE') call symput('hpdmSample', DATA);
28441      when('PRESCORECODE') call symput('prescoreId', DATA);
MPRINT(EM_DIAGRAM):   when('PRESCORECODE') call symput('prescoreId', DATA);
28442      when('ENDGROUP') call symput('endGroupId', DATA);
MPRINT(EM_DIAGRAM):   when('ENDGROUP') call symput('endGroupId', DATA);
28443      otherwise call symput('groupId', DATA);
MPRINT(EM_DIAGRAM):   otherwise call symput('groupId', DATA);
28444      end;
MPRINT(EM_DIAGRAM):   end;
28445      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.REG3_EMINFO.
      WHERE UPCASE(key) in ('BAGINFO', 'BOOSTINFO', 'ENDGROUP', 'GROUPINFO', 'HPDMSAMPLE', 'IDSTABLE', 'INDEXINFO', 'LASTHPTM', 'PRESCORECODE', 'TARGETINFO');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

28446      %let lastModelid =;
28447      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
28448      set EMWS1.Reg3_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_EMINFO;
28449      where upcase(key) = 'MODEL' and TARGET = "BAD";
MPRINT(EM_DIAGRAM):   where upcase(key) = 'MODEL' and TARGET = "BAD";
28450      call symput('lastModelID', DATA);
MPRINT(EM_DIAGRAM):   call symput('lastModelID', DATA);
28451      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.REG3_EMINFO.
      WHERE (UPCASE(key)='MODEL') and (TARGET='BAD');
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
NOTE: There were 1 observations read from the data set EMWS1.REG3_EMINFO.
      WHERE (TARGET='BAD') and (KEY='MODEL');
NOTE: The data set WORK.EMINFO4116L5CI has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL NUMELEMENTS >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
NOTE: There were 1 observations read from the data set EMWS1.REG3_EMINFO.
      WHERE (TARGET='BAD') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO430PJL_M has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data EMWS1.Score_SCORE / view = EMWS1.Score_SCORE;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids2_DATA;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: COB-MBA021;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: J:\JMMORR01\CIS 445\Tutorial 2;
MPRINT(EM_DIAGRAM):   * Project Name: My Project;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: My First Flow;
MPRINT(EM_DIAGRAM):   * Generated by: jmmorr01;
MPRINT(EM_DIAGRAM):   * Date: 26OCT2018:00:02:18;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Part;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Computed Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: CLAGE , log(CLAGE + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_CLAGE = 'Transformed CLAGE';
MPRINT(EM_DIAGRAM):   if CLAGE eq . then LOG_CLAGE = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if CLAGE + 1 > 0 then LOG_CLAGE = log(CLAGE + 1);
MPRINT(EM_DIAGRAM):   else LOG_CLAGE = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: CLNO , log(CLNO + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_CLNO = 'Transformed CLNO';
MPRINT(EM_DIAGRAM):   if CLNO eq . then LOG_CLNO = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if CLNO + 1 > 0 then LOG_CLNO = log(CLNO + 1);
MPRINT(EM_DIAGRAM):   else LOG_CLNO = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: DEBTINC , log(DEBTINC + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_DEBTINC = 'Transformed DEBTINC';
MPRINT(EM_DIAGRAM):   if DEBTINC eq . then LOG_DEBTINC = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if DEBTINC + 1 > 0 then LOG_DEBTINC = log(DEBTINC + 1);
MPRINT(EM_DIAGRAM):   else LOG_DEBTINC = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: DELINQ , log(DELINQ + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_DELINQ = 'Transformed DELINQ';
MPRINT(EM_DIAGRAM):   if DELINQ eq . then LOG_DELINQ = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if DELINQ + 1 > 0 then LOG_DELINQ = log(DELINQ + 1);
MPRINT(EM_DIAGRAM):   else LOG_DELINQ = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: DEROG , log(DEROG + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_DEROG = 'Transformed DEROG';
MPRINT(EM_DIAGRAM):   if DEROG eq . then LOG_DEROG = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if DEROG + 1 > 0 then LOG_DEROG = log(DEROG + 1);
MPRINT(EM_DIAGRAM):   else LOG_DEROG = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: LOAN , log(LOAN + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_LOAN = 'Transformed LOAN';
MPRINT(EM_DIAGRAM):   if LOAN eq . then LOG_LOAN = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if LOAN + 1 > 0 then LOG_LOAN = log(LOAN + 1);
MPRINT(EM_DIAGRAM):   else LOG_LOAN = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: MORTDUE , log(MORTDUE + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_MORTDUE = 'Transformed MORTDUE';
MPRINT(EM_DIAGRAM):   if MORTDUE eq . then LOG_MORTDUE = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if MORTDUE + 1 > 0 then LOG_MORTDUE = log(MORTDUE + 1);
MPRINT(EM_DIAGRAM):   else LOG_MORTDUE = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: VALUE , log(VALUE + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_VALUE = 'Transformed VALUE';
MPRINT(EM_DIAGRAM):   if VALUE eq . then LOG_VALUE = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if VALUE + 1 > 0 then LOG_VALUE = log(VALUE + 1);
MPRINT(EM_DIAGRAM):   else LOG_VALUE = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: YOJ , log(YOJ + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_YOJ = 'Transformed YOJ';
MPRINT(EM_DIAGRAM):   if YOJ eq . then LOG_YOJ = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if YOJ + 1 > 0 then LOG_YOJ = log(YOJ + 1);
MPRINT(EM_DIAGRAM):   else LOG_YOJ = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   INDELINQ =DELINQ > 0 ;
MPRINT(EM_DIAGRAM):   INDEROG =DEROG > 0 ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _UFormat $200;
MPRINT(EM_DIAGRAM):   drop _UFormat;
MPRINT(EM_DIAGRAM):   _UFormat='';
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: INDELINQ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_INDELINQ = "Grouped: INDELINQ";
MPRINT(EM_DIAGRAM):   if MISSING(INDELINQ) then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(INDELINQ) then do;
MPRINT(EM_DIAGRAM):   if INDELINQ < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= INDELINQ AND INDELINQ < 0.5 then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0.5 <= INDELINQ then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: INDEROG;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_INDEROG = "Grouped: INDEROG";
MPRINT(EM_DIAGRAM):   if MISSING(INDEROG) then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(INDEROG) then do;
MPRINT(EM_DIAGRAM):   if INDEROG < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= INDEROG AND INDEROG < 0.5 then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0.5 <= INDEROG then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_CLAGE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_CLAGE = 'Grouped: Transformed CLAGE';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_CLAGE) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_CLAGE) then do;
MPRINT(EM_DIAGRAM):   if LOG_CLAGE < 4.77 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 4.77 <= LOG_CLAGE AND LOG_CLAGE < 5.17 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 5.17 <= LOG_CLAGE AND LOG_CLAGE < 5.46 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 5.46 <= LOG_CLAGE then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_CLNO;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_CLNO = 'Grouped: Transformed CLNO';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_CLNO) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_CLNO) then do;
MPRINT(EM_DIAGRAM):   if LOG_CLNO < 2.71 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2.71 <= LOG_CLNO AND LOG_CLNO < 3.04 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.04 <= LOG_CLNO AND LOG_CLNO < 3.3 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.3 <= LOG_CLNO then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DEBTINC;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DEBTINC = 'Grouped: Transformed DEBTINC';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DEBTINC) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DEBTINC) then do;
MPRINT(EM_DIAGRAM):   if LOG_DEBTINC < 3.4 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.4 <= LOG_DEBTINC AND LOG_DEBTINC < 3.58 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.58 <= LOG_DEBTINC AND LOG_DEBTINC < 3.69 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.69 <= LOG_DEBTINC then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DELINQ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DELINQ = 'Grouped: Transformed DELINQ';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DELINQ) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DELINQ) then do;
MPRINT(EM_DIAGRAM):   if LOG_DELINQ < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= LOG_DELINQ then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DEROG;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DEROG = 'Grouped: Transformed DEROG';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DEROG) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DEROG) then do;
MPRINT(EM_DIAGRAM):   if LOG_DEROG < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= LOG_DEROG then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_LOAN;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_LOAN = 'Grouped: Transformed LOAN';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_LOAN) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_LOAN) then do;
MPRINT(EM_DIAGRAM):   if LOG_LOAN < 9.32 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 9.32 <= LOG_LOAN AND LOG_LOAN < 9.7 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 9.7 <= LOG_LOAN AND LOG_LOAN < 10.06 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 10.06 <= LOG_LOAN then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_MORTDUE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_MORTDUE = 'Grouped: Transformed MORTDUE';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_MORTDUE) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_MORTDUE) then do;
MPRINT(EM_DIAGRAM):   if LOG_MORTDUE < 10.74 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 10.74 <= LOG_MORTDUE AND LOG_MORTDUE < 11.07 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.07 <= LOG_MORTDUE AND LOG_MORTDUE < 11.44 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.44 <= LOG_MORTDUE then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_VALUE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_VALUE = 'Grouped: Transformed VALUE';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_VALUE) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_VALUE) then do;
MPRINT(EM_DIAGRAM):   if LOG_VALUE < 11.1 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.1 <= LOG_VALUE AND LOG_VALUE < 11.4 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.4 <= LOG_VALUE AND LOG_VALUE < 11.71 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.71 <= LOG_VALUE then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_YOJ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_YOJ = 'Grouped: Transformed YOJ';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_YOJ) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_YOJ) then do;
MPRINT(EM_DIAGRAM):   if LOG_YOJ < 1.39 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 1.39 <= LOG_YOJ AND LOG_YOJ < 2.08 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2.08 <= LOG_YOJ AND LOG_YOJ < 2.64 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2.64 <= LOG_YOJ then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: NINQ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_NINQ = "Grouped: NINQ";
MPRINT(EM_DIAGRAM):   if MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   if NINQ < 1 then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 1 <= NINQ AND NINQ < 2 then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2 <= NINQ AND NINQ < 2.5 then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2.5 <= NINQ then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: JOB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_JOB = "Grouped: JOB";
MPRINT(EM_DIAGRAM):   _UFormat = JOB;
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   if MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFORMAT) then do;
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   if (_UFORMAT eq 'OTHER' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'PROFEXE' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'OFFICE' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'MGR' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'SELF' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'SALES' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: REASON;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_REASON = "Grouped: REASON";
MPRINT(EM_DIAGRAM):   _UFormat = REASON;
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   if MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   GRP_REASON = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFORMAT) then do;
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   if (_UFORMAT eq 'DEBTCON' ) then do;
MPRINT(EM_DIAGRAM):   GRP_REASON = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'HOMEIMP' ) then do;
MPRINT(EM_DIAGRAM):   GRP_REASON = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   GRP_REASON = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Regression;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * NODE: Reg3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   *** Target Values;
MPRINT(EM_DIAGRAM):   array REG3DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
MPRINT(EM_DIAGRAM):   ARRAY REG3DRU[2] _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDELINQ ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDELINQ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDEROG ) then do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDEROG , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_JOB ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_5 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_JOB ) then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_JOB , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _3_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_5 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLAGE ) then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   drop _5_0 _5_1 _5_2 _5_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _5_0 = 0;
MPRINT(EM_DIAGRAM):   _5_1 = 0;
MPRINT(EM_DIAGRAM):   _5_2 = 0;
MPRINT(EM_DIAGRAM):   _5_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLNO ) then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLNO , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _5_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _5_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _5_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_1 = -1;
MPRINT(EM_DIAGRAM):   _5_2 = -1;
MPRINT(EM_DIAGRAM):   _5_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEROG ) then do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEROG , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_LOAN ) then do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_LOAN , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   drop _10_0 _10_1 _10_2 _10_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_MORTDUE ) then do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _10_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _10_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _10_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
MPRINT(EM_DIAGRAM):   _10_1 = -1;
MPRINT(EM_DIAGRAM):   _10_2 = -1;
MPRINT(EM_DIAGRAM):   _10_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   drop _11_0 _11_1 _11_2 _11_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _11_0 = 0;
MPRINT(EM_DIAGRAM):   _11_1 = 0;
MPRINT(EM_DIAGRAM):   _11_2 = 0;
MPRINT(EM_DIAGRAM):   _11_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_VALUE ) then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_VALUE , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _11_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _11_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _11_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _11_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _11_0 = -1;
MPRINT(EM_DIAGRAM):   _11_1 = -1;
MPRINT(EM_DIAGRAM):   _11_2 = -1;
MPRINT(EM_DIAGRAM):   _11_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NINQ ;
MPRINT(EM_DIAGRAM):   drop _13_0 _13_1 _13_2 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NINQ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 1;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 1;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _13_0 = -1;
MPRINT(EM_DIAGRAM):   _13_1 = -1;
MPRINT(EM_DIAGRAM):   _13_2 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _P0 = 0.1994122586;
MPRINT(EM_DIAGRAM):   _P1 = 0.8005877414;
MPRINT(EM_DIAGRAM):   goto REG3DR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.87775516834488) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.55281445474052) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_JOB ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.57351647111869) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28613983828213) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04717425869826) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.6273079991539) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46293169342544) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.53314640452982) * _TEMP * _3_5;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.4885261303632) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.71554240420541) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18909158093947) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.53716218509574) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.73455654245763) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.61154389982698) * _TEMP * _5_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.79275770117257) * _TEMP * _5_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.73669529752972) * _TEMP * _5_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.21025315595452) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.9672227584658) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91408931719345) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.62099733755167) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2959510219925) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90393524464235) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16385991732161) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15830771669066) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06806737420677) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.72652835503015) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19458084189349) * _TEMP * _10_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18661188905406) * _TEMP * _10_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45638816653046) * _TEMP * _10_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.36684754151064) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90230378426672) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91035575384715) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.14494565714679) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31468561657707) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18323440424764) * _TEMP * _13_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09136486214824) * _TEMP * _13_2;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   _TEMP = -0.63961613873858 + _LP0;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REG3DR1: *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _IY = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   I_BAD = REG3DRF[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REG3DRU[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of BAD';
MPRINT(EM_DIAGRAM):   EM_EVENTPROBABILITY = P_BAD1;
MPRINT(EM_DIAGRAM):   LABEL EM_PROBABILITY = 'Probability of Classification';
MPRINT(EM_DIAGRAM):   EM_PROBABILITY = max( P_BAD1 , P_BAD0 );
MPRINT(EM_DIAGRAM):   LENGTH EM_CLASSIFICATION
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSIFICATION = "Prediction for BAD";
MPRINT(EM_DIAGRAM):   EM_CLASSIFICATION = I_BAD;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Score_VALIDATE / view = EMWS1.Score_VALIDATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_VALIDATE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: COB-MBA021;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: J:\JMMORR01\CIS 445\Tutorial 2;
MPRINT(EM_DIAGRAM):   * Project Name: My Project;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: My First Flow;
MPRINT(EM_DIAGRAM):   * Generated by: jmmorr01;
MPRINT(EM_DIAGRAM):   * Date: 26OCT2018:00:02:18;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Part;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Computed Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: CLAGE , log(CLAGE + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_CLAGE = 'Transformed CLAGE';
MPRINT(EM_DIAGRAM):   if CLAGE eq . then LOG_CLAGE = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if CLAGE + 1 > 0 then LOG_CLAGE = log(CLAGE + 1);
MPRINT(EM_DIAGRAM):   else LOG_CLAGE = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: CLNO , log(CLNO + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_CLNO = 'Transformed CLNO';
MPRINT(EM_DIAGRAM):   if CLNO eq . then LOG_CLNO = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if CLNO + 1 > 0 then LOG_CLNO = log(CLNO + 1);
MPRINT(EM_DIAGRAM):   else LOG_CLNO = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: DEBTINC , log(DEBTINC + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_DEBTINC = 'Transformed DEBTINC';
MPRINT(EM_DIAGRAM):   if DEBTINC eq . then LOG_DEBTINC = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if DEBTINC + 1 > 0 then LOG_DEBTINC = log(DEBTINC + 1);
MPRINT(EM_DIAGRAM):   else LOG_DEBTINC = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: DELINQ , log(DELINQ + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_DELINQ = 'Transformed DELINQ';
MPRINT(EM_DIAGRAM):   if DELINQ eq . then LOG_DELINQ = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if DELINQ + 1 > 0 then LOG_DELINQ = log(DELINQ + 1);
MPRINT(EM_DIAGRAM):   else LOG_DELINQ = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: DEROG , log(DEROG + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_DEROG = 'Transformed DEROG';
MPRINT(EM_DIAGRAM):   if DEROG eq . then LOG_DEROG = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if DEROG + 1 > 0 then LOG_DEROG = log(DEROG + 1);
MPRINT(EM_DIAGRAM):   else LOG_DEROG = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: LOAN , log(LOAN + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_LOAN = 'Transformed LOAN';
MPRINT(EM_DIAGRAM):   if LOAN eq . then LOG_LOAN = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if LOAN + 1 > 0 then LOG_LOAN = log(LOAN + 1);
MPRINT(EM_DIAGRAM):   else LOG_LOAN = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: MORTDUE , log(MORTDUE + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_MORTDUE = 'Transformed MORTDUE';
MPRINT(EM_DIAGRAM):   if MORTDUE eq . then LOG_MORTDUE = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if MORTDUE + 1 > 0 then LOG_MORTDUE = log(MORTDUE + 1);
MPRINT(EM_DIAGRAM):   else LOG_MORTDUE = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: VALUE , log(VALUE + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_VALUE = 'Transformed VALUE';
MPRINT(EM_DIAGRAM):   if VALUE eq . then LOG_VALUE = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if VALUE + 1 > 0 then LOG_VALUE = log(VALUE + 1);
MPRINT(EM_DIAGRAM):   else LOG_VALUE = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TRANSFORM: YOJ , log(YOJ + 1);
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   label LOG_YOJ = 'Transformed YOJ';
MPRINT(EM_DIAGRAM):   if YOJ eq . then LOG_YOJ = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if YOJ + 1 > 0 then LOG_YOJ = log(YOJ + 1);
MPRINT(EM_DIAGRAM):   else LOG_YOJ = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Formula Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   INDELINQ =DELINQ > 0 ;
MPRINT(EM_DIAGRAM):   INDEROG =DEROG > 0 ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _UFormat $200;
MPRINT(EM_DIAGRAM):   drop _UFormat;
MPRINT(EM_DIAGRAM):   _UFormat='';
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: INDELINQ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_INDELINQ = "Grouped: INDELINQ";
MPRINT(EM_DIAGRAM):   if MISSING(INDELINQ) then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(INDELINQ) then do;
MPRINT(EM_DIAGRAM):   if INDELINQ < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= INDELINQ AND INDELINQ < 0.5 then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0.5 <= INDELINQ then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: INDEROG;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_INDEROG = "Grouped: INDEROG";
MPRINT(EM_DIAGRAM):   if MISSING(INDEROG) then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(INDEROG) then do;
MPRINT(EM_DIAGRAM):   if INDEROG < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= INDEROG AND INDEROG < 0.5 then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0.5 <= INDEROG then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_CLAGE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_CLAGE = 'Grouped: Transformed CLAGE';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_CLAGE) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_CLAGE) then do;
MPRINT(EM_DIAGRAM):   if LOG_CLAGE < 4.77 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 4.77 <= LOG_CLAGE AND LOG_CLAGE < 5.17 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 5.17 <= LOG_CLAGE AND LOG_CLAGE < 5.46 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 5.46 <= LOG_CLAGE then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_CLNO;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_CLNO = 'Grouped: Transformed CLNO';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_CLNO) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_CLNO) then do;
MPRINT(EM_DIAGRAM):   if LOG_CLNO < 2.71 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2.71 <= LOG_CLNO AND LOG_CLNO < 3.04 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.04 <= LOG_CLNO AND LOG_CLNO < 3.3 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.3 <= LOG_CLNO then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DEBTINC;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DEBTINC = 'Grouped: Transformed DEBTINC';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DEBTINC) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DEBTINC) then do;
MPRINT(EM_DIAGRAM):   if LOG_DEBTINC < 3.4 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.4 <= LOG_DEBTINC AND LOG_DEBTINC < 3.58 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.58 <= LOG_DEBTINC AND LOG_DEBTINC < 3.69 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.69 <= LOG_DEBTINC then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DELINQ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DELINQ = 'Grouped: Transformed DELINQ';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DELINQ) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DELINQ) then do;
MPRINT(EM_DIAGRAM):   if LOG_DELINQ < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= LOG_DELINQ then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DEROG;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DEROG = 'Grouped: Transformed DEROG';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DEROG) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DEROG) then do;
MPRINT(EM_DIAGRAM):   if LOG_DEROG < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= LOG_DEROG then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_LOAN;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_LOAN = 'Grouped: Transformed LOAN';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_LOAN) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_LOAN) then do;
MPRINT(EM_DIAGRAM):   if LOG_LOAN < 9.32 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 9.32 <= LOG_LOAN AND LOG_LOAN < 9.7 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 9.7 <= LOG_LOAN AND LOG_LOAN < 10.06 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 10.06 <= LOG_LOAN then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_MORTDUE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_MORTDUE = 'Grouped: Transformed MORTDUE';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_MORTDUE) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_MORTDUE) then do;
MPRINT(EM_DIAGRAM):   if LOG_MORTDUE < 10.74 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 10.74 <= LOG_MORTDUE AND LOG_MORTDUE < 11.07 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.07 <= LOG_MORTDUE AND LOG_MORTDUE < 11.44 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.44 <= LOG_MORTDUE then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_VALUE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_VALUE = 'Grouped: Transformed VALUE';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_VALUE) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_VALUE) then do;
MPRINT(EM_DIAGRAM):   if LOG_VALUE < 11.1 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.1 <= LOG_VALUE AND LOG_VALUE < 11.4 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.4 <= LOG_VALUE AND LOG_VALUE < 11.71 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.71 <= LOG_VALUE then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_YOJ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_YOJ = 'Grouped: Transformed YOJ';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_YOJ) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_YOJ) then do;
MPRINT(EM_DIAGRAM):   if LOG_YOJ < 1.39 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 1.39 <= LOG_YOJ AND LOG_YOJ < 2.08 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2.08 <= LOG_YOJ AND LOG_YOJ < 2.64 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2.64 <= LOG_YOJ then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: NINQ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_NINQ = "Grouped: NINQ";
MPRINT(EM_DIAGRAM):   if MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   if NINQ < 1 then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 1 <= NINQ AND NINQ < 2 then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2 <= NINQ AND NINQ < 2.5 then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2.5 <= NINQ then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: JOB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_JOB = "Grouped: JOB";
MPRINT(EM_DIAGRAM):   _UFormat = JOB;
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   if MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFORMAT) then do;
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   if (_UFORMAT eq 'OTHER' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'PROFEXE' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'OFFICE' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'MGR' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'SELF' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'SALES' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: REASON;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_REASON = "Grouped: REASON";
MPRINT(EM_DIAGRAM):   _UFormat = REASON;
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   if MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   GRP_REASON = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFORMAT) then do;
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   if (_UFORMAT eq 'DEBTCON' ) then do;
MPRINT(EM_DIAGRAM):   GRP_REASON = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'HOMEIMP' ) then do;
MPRINT(EM_DIAGRAM):   GRP_REASON = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   GRP_REASON = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Regression;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * NODE: Reg3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   *** Target Values;
MPRINT(EM_DIAGRAM):   array REG3DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
MPRINT(EM_DIAGRAM):   ARRAY REG3DRU[2] _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   drop _Y ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
MPRINT(EM_DIAGRAM):   _Y = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDELINQ ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDELINQ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDEROG ) then do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDEROG , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_JOB ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_5 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_JOB ) then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_JOB , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _3_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_5 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLAGE ) then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   drop _5_0 _5_1 _5_2 _5_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _5_0 = 0;
MPRINT(EM_DIAGRAM):   _5_1 = 0;
MPRINT(EM_DIAGRAM):   _5_2 = 0;
MPRINT(EM_DIAGRAM):   _5_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLNO ) then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLNO , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _5_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _5_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _5_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_1 = -1;
MPRINT(EM_DIAGRAM):   _5_2 = -1;
MPRINT(EM_DIAGRAM):   _5_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEROG ) then do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEROG , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_LOAN ) then do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_LOAN , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   drop _10_0 _10_1 _10_2 _10_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_MORTDUE ) then do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _10_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _10_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _10_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
MPRINT(EM_DIAGRAM):   _10_1 = -1;
MPRINT(EM_DIAGRAM):   _10_2 = -1;
MPRINT(EM_DIAGRAM):   _10_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   drop _11_0 _11_1 _11_2 _11_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _11_0 = 0;
MPRINT(EM_DIAGRAM):   _11_1 = 0;
MPRINT(EM_DIAGRAM):   _11_2 = 0;
MPRINT(EM_DIAGRAM):   _11_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_VALUE ) then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_VALUE , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _11_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _11_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _11_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _11_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _11_0 = -1;
MPRINT(EM_DIAGRAM):   _11_1 = -1;
MPRINT(EM_DIAGRAM):   _11_2 = -1;
MPRINT(EM_DIAGRAM):   _11_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NINQ ;
MPRINT(EM_DIAGRAM):   drop _13_0 _13_1 _13_2 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NINQ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 1;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 1;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _13_0 = -1;
MPRINT(EM_DIAGRAM):   _13_1 = -1;
MPRINT(EM_DIAGRAM):   _13_2 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _P0 = 0.1994122586;
MPRINT(EM_DIAGRAM):   _P1 = 0.8005877414;
MPRINT(EM_DIAGRAM):   goto REG3DR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.87775516834488) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.55281445474052) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_JOB ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.57351647111869) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28613983828213) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04717425869826) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.6273079991539) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46293169342544) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.53314640452982) * _TEMP * _3_5;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.4885261303632) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.71554240420541) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18909158093947) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.53716218509574) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.73455654245763) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.61154389982698) * _TEMP * _5_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.79275770117257) * _TEMP * _5_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.73669529752972) * _TEMP * _5_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.21025315595452) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.9672227584658) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91408931719345) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.62099733755167) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2959510219925) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90393524464235) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16385991732161) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15830771669066) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06806737420677) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.72652835503015) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19458084189349) * _TEMP * _10_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18661188905406) * _TEMP * _10_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45638816653046) * _TEMP * _10_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.36684754151064) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90230378426672) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91035575384715) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.14494565714679) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31468561657707) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18323440424764) * _TEMP * _13_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09136486214824) * _TEMP * _13_2;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   _TEMP = -0.63961613873858 + _LP0;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REG3DR1: *** Residuals;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   R_BAD1 = - _P0;
MPRINT(EM_DIAGRAM):   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   select( _Y );
MPRINT(EM_DIAGRAM):   when (0) R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_BAD0 = R_BAD0 + 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _IY = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   I_BAD = REG3DRF[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REG3DRU[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of BAD';
MPRINT(EM_DIAGRAM):   EM_EVENTPROBABILITY = P_BAD1;
MPRINT(EM_DIAGRAM):   LABEL EM_PROBABILITY = 'Probability of Classification';
MPRINT(EM_DIAGRAM):   EM_PROBABILITY = max( P_BAD1 , P_BAD0 );
MPRINT(EM_DIAGRAM):   LENGTH EM_CLASSIFICATION
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSIFICATION = "Prediction for BAD";
MPRINT(EM_DIAGRAM):   EM_CLASSIFICATION = I_BAD;
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSTARGET = 'Target Variable: BAD';
MPRINT(EM_DIAGRAM):   EM_CLASSTARGET = F_BAD;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
