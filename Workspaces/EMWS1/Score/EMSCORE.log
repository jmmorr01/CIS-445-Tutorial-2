MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "October 26, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:02:19" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                October 26, 2018
Time:                00:02:19
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0J62MV2 "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0J62MV2 new;
MPRINT(EM_DIAGRAM):   run;
31085      filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31086      *------------------------------------------------------------*;
31087      * Score: Scoring DATA data;
31088      *------------------------------------------------------------*;
31089      data EMWS1.Score_TRAIN
31090      / view=EMWS1.Score_TRAIN
31091      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_TRAIN / view=EMWS1.Score_TRAIN ;
31092      set EMWS1.Reg3_TRAIN
31093      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_TRAIN ;
31094      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMFLOWSCORE.sas.
31095     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31096     +* Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
31097     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31098     +LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of BAD';
MPRINT(EM_DIAGRAM):   LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of BAD';
31099     +EM_EVENTPROBABILITY = P_BAD1;
MPRINT(EM_DIAGRAM):   EM_EVENTPROBABILITY = P_BAD1;
31100     +LABEL EM_PROBABILITY = 'Probability of Classification';
MPRINT(EM_DIAGRAM):   LABEL EM_PROBABILITY = 'Probability of Classification';
31101     +EM_PROBABILITY =
31102     +max(
31103     +P_BAD1
31104     +,
31105     +P_BAD0
31106     +);
MPRINT(EM_DIAGRAM):   EM_PROBABILITY = max( P_BAD1 , P_BAD0 );
31107     +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH EM_CLASSIFICATION
31107    !+       EM_CLASSIFICATION $%dmnorlen;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
31108     +LABEL EM_CLASSIFICATION = "Prediction for BAD";
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSIFICATION = "Prediction for BAD";
31109     +EM_CLASSIFICATION = I_BAD;
MPRINT(EM_DIAGRAM):   EM_CLASSIFICATION = I_BAD;
31110     +LABEL EM_CLASSTARGET = 'Target Variable: BAD';
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSTARGET = 'Target Variable: BAD';
31111     +EM_CLASSTARGET = F_BAD;
MPRINT(EM_DIAGRAM):   EM_CLASSTARGET = F_BAD;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
31112      run;

NOTE: DATA STEP view saved on file EMWS1.SCORE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG3_TRAIN.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.15 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.17 seconds
      

MPRINT(EM_DIAGRAM):   quit;
31113      quit;
31114      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
31115      filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31116      *------------------------------------------------------------*;
31117      * Score: Scoring TEST data;
31118      *------------------------------------------------------------*;
31119      data EMWS1.Score_TEST
31120      / view=EMWS1.Score_TEST
31121      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_TEST / view=EMWS1.Score_TEST ;
31122      set EMWS1.Reg3_TEST
31123      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg3_TEST ;
31124      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMFLOWSCORE.sas.
31125     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31126     +* Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
31127     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31128     +LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of BAD';
MPRINT(EM_DIAGRAM):   LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of BAD';
31129     +EM_EVENTPROBABILITY = P_BAD1;
MPRINT(EM_DIAGRAM):   EM_EVENTPROBABILITY = P_BAD1;
31130     +LABEL EM_PROBABILITY = 'Probability of Classification';
MPRINT(EM_DIAGRAM):   LABEL EM_PROBABILITY = 'Probability of Classification';
31131     +EM_PROBABILITY =
31132     +max(
31133     +P_BAD1
31134     +,
31135     +P_BAD0
31136     +);
MPRINT(EM_DIAGRAM):   EM_PROBABILITY = max( P_BAD1 , P_BAD0 );
31137     +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH EM_CLASSIFICATION
31137    !+       EM_CLASSIFICATION $%dmnorlen;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
31138     +LABEL EM_CLASSIFICATION = "Prediction for BAD";
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSIFICATION = "Prediction for BAD";
31139     +EM_CLASSIFICATION = I_BAD;
MPRINT(EM_DIAGRAM):   EM_CLASSIFICATION = I_BAD;
31140     +LABEL EM_CLASSTARGET = 'Target Variable: BAD';
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSTARGET = 'Target Variable: BAD';
31141     +EM_CLASSTARGET = F_BAD;
MPRINT(EM_DIAGRAM):   EM_CLASSTARGET = F_BAD;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
31142      run;

NOTE: DATA STEP view saved on file EMWS1.SCORE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG3_TEST.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.09 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.20 seconds
      cpu time            0.11 seconds
      

MPRINT(EM_DIAGRAM):   quit;
31143      quit;
31144      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
31145      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
31146      * Score: Creating Publish Score Variables Table;
MPRINT(EM_DIAGRAM):   * Score: Creating Publish Score Variables Table;
31147      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31148      proc sort data=EMWS1.Reg3_CMeta_TRAIN(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg3_CMeta_TRAIN(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp;
31149      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
31150      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 38 observations read from the data set EMWS1.REG3_CMETA_TRAIN.
NOTE: The data set WORK._TEMP has 38 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

31151      proc sort data=EMWS1.Ids_cmeta_data(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp2;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_cmeta_data(keep= NAME ROLE CREATOR COMMENT LABEL) out=_temp2;
31152      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
31153      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS1.IDS_CMETA_DATA.
NOTE: The data set WORK._TEMP2 has 13 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

31154      data EMWS1.Score_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_EMINPUTVARS;
31155      merge _temp2(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge _temp2(in=_a) _temp(in=_b);
31156      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
31157      length HIDE $1 SCOREVAR $1;
MPRINT(EM_DIAGRAM):   length HIDE $1 SCOREVAR $1;
31158      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,    NOQUOTE))" ROLE = "%sysfunc(sasmsg(sashelp.dmine,  meta_role_vlabel ,    NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel , NOQUOTE))" COMMENT =
31159         "%sysfunc(sasmsg(sashelp.dmine,  meta_comment_vlabel , NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,   NOQUOTE))" HIDE = "%sysfunc(sasmsg(sashelp.dmine, rpt_hiddenVariable_vlabel,  NOQUOTE))" SCOREVAR =
31160         "%sysfunc(sasmsg(sashelp.dmine,  rpt_scoreVar_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" ROLE = "Role" CREATOR = "Creator" COMMENT = "Comment" LABEL = "Label" HIDE = "Variable Hidden" SCOREVAR = "Used in Score Code";
31161      if _a and ^_b then HIDE = 'Y';
MPRINT(EM_DIAGRAM):   if _a and ^_b then HIDE = 'Y';
31162      if upcase(NAME) = "BAD" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "BAD" then HIDE = "N";
31163      if upcase(NAME) = "F_BAD" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "F_BAD" then HIDE = "N";
31164      if upcase(NAME) = "GRP_INDELINQ" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_INDELINQ" then HIDE = "N";
31165      if upcase(NAME) = "GRP_INDEROG" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_INDEROG" then HIDE = "N";
31166      if upcase(NAME) = "GRP_JOB" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_JOB" then HIDE = "N";
31167      if upcase(NAME) = "GRP_LOG_CLAGE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_LOG_CLAGE" then HIDE = "N";
31168      if upcase(NAME) = "GRP_LOG_CLNO" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_LOG_CLNO" then HIDE = "N";
31169      if upcase(NAME) = "GRP_LOG_DEBTINC" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_LOG_DEBTINC" then HIDE = "N";
31170      if upcase(NAME) = "GRP_LOG_DELINQ" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_LOG_DELINQ" then HIDE = "N";
31171      if upcase(NAME) = "GRP_LOG_DEROG" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_LOG_DEROG" then HIDE = "N";
31172      if upcase(NAME) = "GRP_LOG_LOAN" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_LOG_LOAN" then HIDE = "N";
31173      if upcase(NAME) = "GRP_LOG_MORTDUE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_LOG_MORTDUE" then HIDE = "N";
31174      if upcase(NAME) = "GRP_LOG_VALUE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_LOG_VALUE" then HIDE = "N";
31175      if upcase(NAME) = "GRP_LOG_YOJ" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_LOG_YOJ" then HIDE = "N";
31176      if upcase(NAME) = "GRP_NINQ" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_NINQ" then HIDE = "N";
31177      if upcase(NAME) = "GRP_REASON" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "GRP_REASON" then HIDE = "N";
31178      if upcase(NAME) = "INDELINQ" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "INDELINQ" then HIDE = "N";
31179      if upcase(NAME) = "INDEROG" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "INDEROG" then HIDE = "N";
31180      if upcase(NAME) = "I_BAD" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "I_BAD" then HIDE = "N";
31181      if upcase(NAME) = "JOB" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "JOB" then HIDE = "N";
31182      if upcase(NAME) = "LOG_CLAGE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "LOG_CLAGE" then HIDE = "N";
31183      if upcase(NAME) = "LOG_CLNO" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "LOG_CLNO" then HIDE = "N";
31184      if upcase(NAME) = "LOG_DEBTINC" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "LOG_DEBTINC" then HIDE = "N";
31185      if upcase(NAME) = "LOG_DELINQ" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "LOG_DELINQ" then HIDE = "N";
31186      if upcase(NAME) = "LOG_DEROG" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "LOG_DEROG" then HIDE = "N";
31187      if upcase(NAME) = "LOG_LOAN" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "LOG_LOAN" then HIDE = "N";
31188      if upcase(NAME) = "LOG_MORTDUE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "LOG_MORTDUE" then HIDE = "N";
31189      if upcase(NAME) = "LOG_VALUE" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "LOG_VALUE" then HIDE = "N";
31190      if upcase(NAME) = "LOG_YOJ" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "LOG_YOJ" then HIDE = "N";
31191      if upcase(NAME) = "NINQ" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "NINQ" then HIDE = "N";
31192      if upcase(NAME) = "P_BAD0" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "P_BAD0" then HIDE = "N";
31193      if upcase(NAME) = "P_BAD1" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "P_BAD1" then HIDE = "N";
31194      if upcase(NAME) = "REASON" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "REASON" then HIDE = "N";
31195      if upcase(NAME) = "R_BAD0" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "R_BAD0" then HIDE = "N";
31196      if upcase(NAME) = "R_BAD1" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "R_BAD1" then HIDE = "N";
31197      if upcase(NAME) = "U_BAD" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "U_BAD" then HIDE = "N";
31198      if upcase(NAME) = "_WARN_" then delete;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_WARN_" then delete;
31199      if upcase(NAME) = "_DATAOBS_" then HIDE = "N";
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_DATAOBS_" then HIDE = "N";
31200      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable SCOREVAR is uninitialized.
NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: There were 38 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS1.SCORE_EMINPUTVARS has 46 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
      

31201      proc sort data=EMWS1.Score_EMINPUTVARS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score_EMINPUTVARS nodupkey;
31202      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
31203      where CREATOR='' or (NAME="BAD" and CREATOR='');
MPRINT(EM_DIAGRAM):   where CREATOR='' or (NAME="BAD" and CREATOR='');
31204      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS1.SCORE_EMINPUTVARS.
      WHERE (CREATOR=' ') or ((NAME='BAD') and (CREATOR=' '));
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS1.SCORE_EMINPUTVARS has 13 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.12 seconds
      cpu time            0.03 seconds
      

31205      filename _pref "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMPUBLISHSCORE.sas";
31206      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
31207      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
31208      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\EMPUBLISHSCORE.sas.
31209     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31210     +* Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
31211     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31212     +LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of BAD';
MPRINT(EM_DIAGRAM):   LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of BAD';
31213     +EM_EVENTPROBABILITY = P_BAD1;
MPRINT(EM_DIAGRAM):   EM_EVENTPROBABILITY = P_BAD1;
31214     +LABEL EM_PROBABILITY = 'Probability of Classification';
MPRINT(EM_DIAGRAM):   LABEL EM_PROBABILITY = 'Probability of Classification';
31215     +EM_PROBABILITY =
31216     +max(
31217     +P_BAD1
31218     +,
31219     +P_BAD0
31220     +);
MPRINT(EM_DIAGRAM):   EM_PROBABILITY = max( P_BAD1 , P_BAD0 );
31221     +LENGTH
MPRINT(EM_DIAGRAM):   LENGTH EM_CLASSIFICATION
31221    !+       EM_CLASSIFICATION $%dmnorlen;
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
31222     +LABEL EM_CLASSIFICATION = "Prediction for BAD";
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSIFICATION = "Prediction for BAD";
31223     +EM_CLASSIFICATION = I_BAD;
MPRINT(EM_DIAGRAM):   EM_CLASSIFICATION = I_BAD;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
31224      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

31225      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
31226      quit;
31227      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
31228      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
31229      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
31230      retain ID 1 Node "Score";
MPRINT(EM_DIAGRAM):   retain ID 1 Node "Score";
31231      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
31232      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

31233      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
31234      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
31235      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 4 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

31236      proc sort data=EMWS1.Reg3_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg3_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
31237      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
31238      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 38 observations read from the data set EMWS1.REG3_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 38 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

31239      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
31240      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
31241      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
31242      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 38 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 38 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

31243      proc contents data=EMWS1.Score_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Score_train out=_meta(keep=NAME) noprint;
31244      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 51 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

31245      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
31246      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
31247      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 51 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 51 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

31248      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
31249      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
31250      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
31251      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 51 observations read from the data set WORK._META.
NOTE: There were 38 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 51 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

31252      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
31253      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 4 rows and 5 columns.

31254      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

31255      proc append base=EMWS1.Score_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_FCMP data=_tempx;
31256      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE_FCMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 4 observations read from the data set WORK._TEMPX.
NOTE: The data set EMWS1.SCORE_FCMP has 4 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.15 seconds
      cpu time            0.03 seconds
      

31257      filename _pref "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMPUBLISHSCORE.sas";
31258      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
31259      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
31260      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Reg3\EMPUBLISHSCORE.sas.
31261     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
31262     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
31263     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
31264     +
31265     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
31266     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
31267     +
31268     +length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
31269     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
31270     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
31271     +array REG3DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG3DRF [2] $12 _temporary_ ('1' '0' );
31272     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
31273     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
31274     +ARRAY REG3DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG3DRU[2] _TEMPORARY_ (1 0);
31275     +
31276     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
31277     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
31278     +
31279     +*** Generate dummy variables for GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDELINQ ;
31280     +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
31281     +if missing( GRP_INDELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDELINQ ) then do;
31282     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
31283     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
31284     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31285     +end;
MPRINT(EM_DIAGRAM):   end;
31286     +else do;
MPRINT(EM_DIAGRAM):   else do;
31287     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
31288     +   _dm12 = put( GRP_INDELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDELINQ , BEST12. );
31289     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
31290     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
31291     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
31292     +   end;
MPRINT(EM_DIAGRAM):   end;
31293     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
31294     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
31295     +   end;
MPRINT(EM_DIAGRAM):   end;
31296     +   else do;
MPRINT(EM_DIAGRAM):   else do;
31297     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
31298     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
31299     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31300     +   end;
MPRINT(EM_DIAGRAM):   end;
31301     +end;
MPRINT(EM_DIAGRAM):   end;
31302     +
31303     +*** Generate dummy variables for GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDEROG ;
31304     +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
31305     +if missing( GRP_INDEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDEROG ) then do;
31306     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
31307     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
31308     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31309     +end;
MPRINT(EM_DIAGRAM):   end;
31310     +else do;
MPRINT(EM_DIAGRAM):   else do;
31311     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
31312     +   _dm12 = put( GRP_INDEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDEROG , BEST12. );
31313     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
31314     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
31315     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
31316     +   end;
MPRINT(EM_DIAGRAM):   end;
31317     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
31318     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
31319     +   end;
MPRINT(EM_DIAGRAM):   end;
31320     +   else do;
MPRINT(EM_DIAGRAM):   else do;
31321     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
31322     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
31323     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31324     +   end;
MPRINT(EM_DIAGRAM):   end;
31325     +end;
MPRINT(EM_DIAGRAM):   end;
31326     +
31327     +*** Generate dummy variables for GRP_JOB ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_JOB ;
31328     +drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 ;
31329     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
31330     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
31331     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
31332     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
31333     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
31334     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
31335     +_3_5 = 0;
MPRINT(EM_DIAGRAM):   _3_5 = 0;
31336     +if missing( GRP_JOB ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_JOB ) then do;
31337     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
31338     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
31339     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
31340     +   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
31341     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
31342     +   _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
31343     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
31344     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31345     +end;
MPRINT(EM_DIAGRAM):   end;
31346     +else do;
MPRINT(EM_DIAGRAM):   else do;
31347     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
31348     +   _dm12 = put( GRP_JOB , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_JOB , BEST12. );
31349     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
31350     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
31351     +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
31352     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
31353     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
31354     +            _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
31355     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31356     +         end;
MPRINT(EM_DIAGRAM):   end;
31357     +         else do;
MPRINT(EM_DIAGRAM):   else do;
31358     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
31359     +               _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
31360     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31361     +            end;
MPRINT(EM_DIAGRAM):   end;
31362     +         end;
MPRINT(EM_DIAGRAM):   end;
31363     +      end;
MPRINT(EM_DIAGRAM):   end;
31364     +      else do;
MPRINT(EM_DIAGRAM):   else do;
31365     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
31366     +            _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
31367     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31368     +         end;
MPRINT(EM_DIAGRAM):   end;
31369     +         else do;
MPRINT(EM_DIAGRAM):   else do;
31370     +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
31371     +               _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
31372     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31373     +            end;
MPRINT(EM_DIAGRAM):   end;
31374     +         end;
MPRINT(EM_DIAGRAM):   end;
31375     +      end;
MPRINT(EM_DIAGRAM):   end;
31376     +   end;
MPRINT(EM_DIAGRAM):   end;
31377     +   else do;
MPRINT(EM_DIAGRAM):   else do;
31378     +      if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
31379     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
31380     +            _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
31381     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31382     +         end;
MPRINT(EM_DIAGRAM):   end;
31383     +         else do;
MPRINT(EM_DIAGRAM):   else do;
31384     +            if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
31385     +               _3_5 = 1;
MPRINT(EM_DIAGRAM):   _3_5 = 1;
31386     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31387     +            end;
MPRINT(EM_DIAGRAM):   end;
31388     +         end;
MPRINT(EM_DIAGRAM):   end;
31389     +      end;
MPRINT(EM_DIAGRAM):   end;
31390     +      else do;
MPRINT(EM_DIAGRAM):   else do;
31391     +         if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
31392     +            _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
31393     +            _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
31394     +            _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
31395     +            _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
31396     +            _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
31397     +            _3_5 = -1;
MPRINT(EM_DIAGRAM):   _3_5 = -1;
31398     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31399     +         end;
MPRINT(EM_DIAGRAM):   end;
31400     +      end;
MPRINT(EM_DIAGRAM):   end;
31401     +   end;
MPRINT(EM_DIAGRAM):   end;
31402     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
31403     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
31404     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
31405     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
31406     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
31407     +      _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
31408     +      _3_5 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
31409     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
31410     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31411     +   end;
MPRINT(EM_DIAGRAM):   end;
31412     +end;
MPRINT(EM_DIAGRAM):   end;
31413     +
31414     +*** Generate dummy variables for GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLAGE ;
31415     +drop _4_0 _4_1 _4_2 _4_3 ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 ;
31416     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
31417     +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
31418     +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
31419     +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
31420     +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
31421     +if missing( GRP_LOG_CLAGE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLAGE ) then do;
31422     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
31423     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
31424     +   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
31425     +   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
31426     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
31427     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31428     +end;
MPRINT(EM_DIAGRAM):   end;
31429     +else do;
MPRINT(EM_DIAGRAM):   else do;
31430     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
31431     +   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
31432     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
31433     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
31434     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
31435     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
31436     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
31437     +            _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
31438     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31439     +         end;
MPRINT(EM_DIAGRAM):   end;
31440     +         else do;
MPRINT(EM_DIAGRAM):   else do;
31441     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
31442     +               _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
31443     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31444     +            end;
MPRINT(EM_DIAGRAM):   end;
31445     +         end;
MPRINT(EM_DIAGRAM):   end;
31446     +      end;
MPRINT(EM_DIAGRAM):   end;
31447     +      else do;
MPRINT(EM_DIAGRAM):   else do;
31448     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
31449     +            _4_2 = 1;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
31450     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31451     +         end;
MPRINT(EM_DIAGRAM):   end;
31452     +      end;
MPRINT(EM_DIAGRAM):   end;
31453     +   end;
MPRINT(EM_DIAGRAM):   end;
31454     +   else do;
MPRINT(EM_DIAGRAM):   else do;
31455     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
31456     +         _4_3 = 1;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
31457     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31458     +      end;
MPRINT(EM_DIAGRAM):   end;
31459     +      else do;
MPRINT(EM_DIAGRAM):   else do;
31460     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
31461     +            _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
31462     +            _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
31463     +            _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
31464     +            _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
31465     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31466     +         end;
MPRINT(EM_DIAGRAM):   end;
31467     +      end;
MPRINT(EM_DIAGRAM):   end;
31468     +   end;
MPRINT(EM_DIAGRAM):   end;
31469     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
31470     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
31471     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
31472     +      _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
31473     +      _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
31474     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
31475     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31476     +   end;
MPRINT(EM_DIAGRAM):   end;
31477     +end;
MPRINT(EM_DIAGRAM):   end;
31478     +
31479     +*** Generate dummy variables for GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLNO ;
31480     +drop _5_0 _5_1 _5_2 _5_3 ;
MPRINT(EM_DIAGRAM):   drop _5_0 _5_1 _5_2 _5_3 ;
31481     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
31482     +_5_0 = 0;
MPRINT(EM_DIAGRAM):   _5_0 = 0;
31483     +_5_1 = 0;
MPRINT(EM_DIAGRAM):   _5_1 = 0;
31484     +_5_2 = 0;
MPRINT(EM_DIAGRAM):   _5_2 = 0;
31485     +_5_3 = 0;
MPRINT(EM_DIAGRAM):   _5_3 = 0;
31486     +if missing( GRP_LOG_CLNO ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLNO ) then do;
31487     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
31488     +   _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
31489     +   _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
31490     +   _5_3 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
31491     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
31492     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31493     +end;
MPRINT(EM_DIAGRAM):   end;
31494     +else do;
MPRINT(EM_DIAGRAM):   else do;
31495     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
31496     +   _dm12 = put( GRP_LOG_CLNO , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLNO , BEST12. );
31497     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
31498     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
31499     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
31500     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
31501     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
31502     +            _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
31503     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31504     +         end;
MPRINT(EM_DIAGRAM):   end;
31505     +         else do;
MPRINT(EM_DIAGRAM):   else do;
31506     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
31507     +               _5_1 = 1;
MPRINT(EM_DIAGRAM):   _5_1 = 1;
31508     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31509     +            end;
MPRINT(EM_DIAGRAM):   end;
31510     +         end;
MPRINT(EM_DIAGRAM):   end;
31511     +      end;
MPRINT(EM_DIAGRAM):   end;
31512     +      else do;
MPRINT(EM_DIAGRAM):   else do;
31513     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
31514     +            _5_2 = 1;
MPRINT(EM_DIAGRAM):   _5_2 = 1;
31515     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31516     +         end;
MPRINT(EM_DIAGRAM):   end;
31517     +      end;
MPRINT(EM_DIAGRAM):   end;
31518     +   end;
MPRINT(EM_DIAGRAM):   end;
31519     +   else do;
MPRINT(EM_DIAGRAM):   else do;
31520     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
31521     +         _5_3 = 1;
MPRINT(EM_DIAGRAM):   _5_3 = 1;
31522     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31523     +      end;
MPRINT(EM_DIAGRAM):   end;
31524     +      else do;
MPRINT(EM_DIAGRAM):   else do;
31525     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
31526     +            _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
31527     +            _5_1 = -1;
MPRINT(EM_DIAGRAM):   _5_1 = -1;
31528     +            _5_2 = -1;
MPRINT(EM_DIAGRAM):   _5_2 = -1;
31529     +            _5_3 = -1;
MPRINT(EM_DIAGRAM):   _5_3 = -1;
31530     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31531     +         end;
MPRINT(EM_DIAGRAM):   end;
31532     +      end;
MPRINT(EM_DIAGRAM):   end;
31533     +   end;
MPRINT(EM_DIAGRAM):   end;
31534     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
31535     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
31536     +      _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
31537     +      _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
31538     +      _5_3 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
31539     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
31540     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31541     +   end;
MPRINT(EM_DIAGRAM):   end;
31542     +end;
MPRINT(EM_DIAGRAM):   end;
31543     +
31544     +*** Generate dummy variables for GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEBTINC ;
31545     +drop _6_0 _6_1 _6_2 _6_3 ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 ;
31546     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
31547     +_6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
31548     +_6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
31549     +_6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
31550     +_6_3 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
31551     +if missing( GRP_LOG_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEBTINC ) then do;
31552     +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
31553     +   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
31554     +   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
31555     +   _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
31556     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
31557     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31558     +end;
MPRINT(EM_DIAGRAM):   end;
31559     +else do;
MPRINT(EM_DIAGRAM):   else do;
31560     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
31561     +   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
31562     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
31563     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
31564     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
31565     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
31566     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
31567     +            _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
31568     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31569     +         end;
MPRINT(EM_DIAGRAM):   end;
31570     +         else do;
MPRINT(EM_DIAGRAM):   else do;
31571     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
31572     +               _6_1 = 1;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
31573     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31574     +            end;
MPRINT(EM_DIAGRAM):   end;
31575     +         end;
MPRINT(EM_DIAGRAM):   end;
31576     +      end;
MPRINT(EM_DIAGRAM):   end;
31577     +      else do;
MPRINT(EM_DIAGRAM):   else do;
31578     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
31579     +            _6_2 = 1;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
31580     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31581     +         end;
MPRINT(EM_DIAGRAM):   end;
31582     +      end;
MPRINT(EM_DIAGRAM):   end;
31583     +   end;
MPRINT(EM_DIAGRAM):   end;
31584     +   else do;
MPRINT(EM_DIAGRAM):   else do;
31585     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
31586     +         _6_3 = 1;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
31587     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31588     +      end;
MPRINT(EM_DIAGRAM):   end;
31589     +      else do;
MPRINT(EM_DIAGRAM):   else do;
31590     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
31591     +            _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
31592     +            _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
31593     +            _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
31594     +            _6_3 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
31595     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31596     +         end;
MPRINT(EM_DIAGRAM):   end;
31597     +      end;
MPRINT(EM_DIAGRAM):   end;
31598     +   end;
MPRINT(EM_DIAGRAM):   end;
31599     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
31600     +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
31601     +      _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
31602     +      _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
31603     +      _6_3 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
31604     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
31605     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31606     +   end;
MPRINT(EM_DIAGRAM):   end;
31607     +end;
MPRINT(EM_DIAGRAM):   end;
31608     +
31609     +*** Generate dummy variables for GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DELINQ ;
31610     +drop _7_0 ;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
31611     +if missing( GRP_LOG_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DELINQ ) then do;
31612     +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
31613     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
31614     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31615     +end;
MPRINT(EM_DIAGRAM):   end;
31616     +else do;
MPRINT(EM_DIAGRAM):   else do;
31617     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
31618     +   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
31619     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
31620     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
31621     +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
31622     +   end;
MPRINT(EM_DIAGRAM):   end;
31623     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
31624     +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
31625     +   end;
MPRINT(EM_DIAGRAM):   end;
31626     +   else do;
MPRINT(EM_DIAGRAM):   else do;
31627     +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
31628     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
31629     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31630     +   end;
MPRINT(EM_DIAGRAM):   end;
31631     +end;
MPRINT(EM_DIAGRAM):   end;
31632     +
31633     +*** Generate dummy variables for GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEROG ;
31634     +drop _8_0 ;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
31635     +if missing( GRP_LOG_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEROG ) then do;
31636     +   _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
31637     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
31638     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31639     +end;
MPRINT(EM_DIAGRAM):   end;
31640     +else do;
MPRINT(EM_DIAGRAM):   else do;
31641     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
31642     +   _dm12 = put( GRP_LOG_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEROG , BEST12. );
31643     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
31644     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
31645     +      _8_0 = -1;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
31646     +   end;
MPRINT(EM_DIAGRAM):   end;
31647     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
31648     +      _8_0 = 1;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
31649     +   end;
MPRINT(EM_DIAGRAM):   end;
31650     +   else do;
MPRINT(EM_DIAGRAM):   else do;
31651     +      _8_0 = .;
MPRINT(EM_DIAGRAM):   _8_0 = .;
31652     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
31653     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31654     +   end;
MPRINT(EM_DIAGRAM):   end;
31655     +end;
MPRINT(EM_DIAGRAM):   end;
31656     +
31657     +*** Generate dummy variables for GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_LOAN ;
31658     +drop _9_0 _9_1 _9_2 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 ;
31659     +if missing( GRP_LOG_LOAN ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_LOAN ) then do;
31660     +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
31661     +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
31662     +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
31663     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
31664     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31665     +end;
MPRINT(EM_DIAGRAM):   end;
31666     +else do;
MPRINT(EM_DIAGRAM):   else do;
31667     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
31668     +   _dm12 = put( GRP_LOG_LOAN , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_LOAN , BEST12. );
31669     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
31670     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
31671     +      _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
31672     +      _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
31673     +      _9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
31674     +   end;
MPRINT(EM_DIAGRAM):   end;
31675     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
31676     +      _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
31677     +      _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
31678     +      _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
31679     +   end;
MPRINT(EM_DIAGRAM):   end;
31680     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
31681     +      _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
31682     +      _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
31683     +      _9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
31684     +   end;
MPRINT(EM_DIAGRAM):   end;
31685     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
31686     +      _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
31687     +      _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
31688     +      _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
31689     +   end;
MPRINT(EM_DIAGRAM):   end;
31690     +   else do;
MPRINT(EM_DIAGRAM):   else do;
31691     +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
31692     +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
31693     +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
31694     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
31695     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31696     +   end;
MPRINT(EM_DIAGRAM):   end;
31697     +end;
MPRINT(EM_DIAGRAM):   end;
31698     +
31699     +*** Generate dummy variables for GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_MORTDUE ;
31700     +drop _10_0 _10_1 _10_2 _10_3 ;
MPRINT(EM_DIAGRAM):   drop _10_0 _10_1 _10_2 _10_3 ;
31701     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
31702     +_10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
31703     +_10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = 0;
31704     +_10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
31705     +_10_3 = 0;
MPRINT(EM_DIAGRAM):   _10_3 = 0;
31706     +if missing( GRP_LOG_MORTDUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_MORTDUE ) then do;
31707     +   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
31708     +   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
31709     +   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
31710     +   _10_3 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
31711     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
31712     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31713     +end;
MPRINT(EM_DIAGRAM):   end;
31714     +else do;
MPRINT(EM_DIAGRAM):   else do;
31715     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
31716     +   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
31717     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
31718     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
31719     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
31720     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
31721     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
31722     +            _10_0 = 1;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
31723     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31724     +         end;
MPRINT(EM_DIAGRAM):   end;
31725     +         else do;
MPRINT(EM_DIAGRAM):   else do;
31726     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
31727     +               _10_1 = 1;
MPRINT(EM_DIAGRAM):   _10_1 = 1;
31728     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31729     +            end;
MPRINT(EM_DIAGRAM):   end;
31730     +         end;
MPRINT(EM_DIAGRAM):   end;
31731     +      end;
MPRINT(EM_DIAGRAM):   end;
31732     +      else do;
MPRINT(EM_DIAGRAM):   else do;
31733     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
31734     +            _10_2 = 1;
MPRINT(EM_DIAGRAM):   _10_2 = 1;
31735     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31736     +         end;
MPRINT(EM_DIAGRAM):   end;
31737     +      end;
MPRINT(EM_DIAGRAM):   end;
31738     +   end;
MPRINT(EM_DIAGRAM):   end;
31739     +   else do;
MPRINT(EM_DIAGRAM):   else do;
31740     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
31741     +         _10_3 = 1;
MPRINT(EM_DIAGRAM):   _10_3 = 1;
31742     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31743     +      end;
MPRINT(EM_DIAGRAM):   end;
31744     +      else do;
MPRINT(EM_DIAGRAM):   else do;
31745     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
31746     +            _10_0 = -1;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
31747     +            _10_1 = -1;
MPRINT(EM_DIAGRAM):   _10_1 = -1;
31748     +            _10_2 = -1;
MPRINT(EM_DIAGRAM):   _10_2 = -1;
31749     +            _10_3 = -1;
MPRINT(EM_DIAGRAM):   _10_3 = -1;
31750     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31751     +         end;
MPRINT(EM_DIAGRAM):   end;
31752     +      end;
MPRINT(EM_DIAGRAM):   end;
31753     +   end;
MPRINT(EM_DIAGRAM):   end;
31754     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
31755     +      _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_0 = .;
31756     +      _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
31757     +      _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
31758     +      _10_3 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
31759     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
31760     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31761     +   end;
MPRINT(EM_DIAGRAM):   end;
31762     +end;
MPRINT(EM_DIAGRAM):   end;
31763     +
31764     +*** Generate dummy variables for GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_VALUE ;
31765     +drop _11_0 _11_1 _11_2 _11_3 ;
MPRINT(EM_DIAGRAM):   drop _11_0 _11_1 _11_2 _11_3 ;
31766     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
31767     +_11_0 = 0;
MPRINT(EM_DIAGRAM):   _11_0 = 0;
31768     +_11_1 = 0;
MPRINT(EM_DIAGRAM):   _11_1 = 0;
31769     +_11_2 = 0;
MPRINT(EM_DIAGRAM):   _11_2 = 0;
31770     +_11_3 = 0;
MPRINT(EM_DIAGRAM):   _11_3 = 0;
31771     +if missing( GRP_LOG_VALUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_VALUE ) then do;
31772     +   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_0 = .;
31773     +   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
31774     +   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
31775     +   _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
31776     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
31777     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31778     +end;
MPRINT(EM_DIAGRAM):   end;
31779     +else do;
MPRINT(EM_DIAGRAM):   else do;
31780     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
31781     +   _dm12 = put( GRP_LOG_VALUE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_VALUE , BEST12. );
31782     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
31783     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
31784     +   if _dm12 <= '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
31785     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
31786     +         if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
31787     +            _11_0 = 1;
MPRINT(EM_DIAGRAM):   _11_0 = 1;
31788     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31789     +         end;
MPRINT(EM_DIAGRAM):   end;
31790     +         else do;
MPRINT(EM_DIAGRAM):   else do;
31791     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
31792     +               _11_1 = 1;
MPRINT(EM_DIAGRAM):   _11_1 = 1;
31793     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31794     +            end;
MPRINT(EM_DIAGRAM):   end;
31795     +         end;
MPRINT(EM_DIAGRAM):   end;
31796     +      end;
MPRINT(EM_DIAGRAM):   end;
31797     +      else do;
MPRINT(EM_DIAGRAM):   else do;
31798     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
31799     +            _11_2 = 1;
MPRINT(EM_DIAGRAM):   _11_2 = 1;
31800     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31801     +         end;
MPRINT(EM_DIAGRAM):   end;
31802     +      end;
MPRINT(EM_DIAGRAM):   end;
31803     +   end;
MPRINT(EM_DIAGRAM):   end;
31804     +   else do;
MPRINT(EM_DIAGRAM):   else do;
31805     +      if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
31806     +         _11_3 = 1;
MPRINT(EM_DIAGRAM):   _11_3 = 1;
31807     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31808     +      end;
MPRINT(EM_DIAGRAM):   end;
31809     +      else do;
MPRINT(EM_DIAGRAM):   else do;
31810     +         if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
31811     +            _11_0 = -1;
MPRINT(EM_DIAGRAM):   _11_0 = -1;
31812     +            _11_1 = -1;
MPRINT(EM_DIAGRAM):   _11_1 = -1;
31813     +            _11_2 = -1;
MPRINT(EM_DIAGRAM):   _11_2 = -1;
31814     +            _11_3 = -1;
MPRINT(EM_DIAGRAM):   _11_3 = -1;
31815     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
31816     +         end;
MPRINT(EM_DIAGRAM):   end;
31817     +      end;
MPRINT(EM_DIAGRAM):   end;
31818     +   end;
MPRINT(EM_DIAGRAM):   end;
31819     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
31820     +      _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_0 = .;
31821     +      _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
31822     +      _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
31823     +      _11_3 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
31824     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
31825     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31826     +   end;
MPRINT(EM_DIAGRAM):   end;
31827     +end;
MPRINT(EM_DIAGRAM):   end;
31828     +
31829     +*** Generate dummy variables for GRP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NINQ ;
31830     +drop _13_0 _13_1 _13_2 ;
MPRINT(EM_DIAGRAM):   drop _13_0 _13_1 _13_2 ;
31831     +if missing( GRP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_NINQ ) then do;
31832     +   _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_0 = .;
31833     +   _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
31834     +   _13_2 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
31835     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
31836     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31837     +end;
MPRINT(EM_DIAGRAM):   end;
31838     +else do;
MPRINT(EM_DIAGRAM):   else do;
31839     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
31840     +   _dm12 = put( GRP_NINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NINQ , BEST12. );
31841     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
31842     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
31843     +      _13_0 = 1;
MPRINT(EM_DIAGRAM):   _13_0 = 1;
31844     +      _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
31845     +      _13_2 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
31846     +   end;
MPRINT(EM_DIAGRAM):   end;
31847     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
31848     +      _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
31849     +      _13_1 = 1;
MPRINT(EM_DIAGRAM):   _13_1 = 1;
31850     +      _13_2 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
31851     +   end;
MPRINT(EM_DIAGRAM):   end;
31852     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
31853     +      _13_0 = -1;
MPRINT(EM_DIAGRAM):   _13_0 = -1;
31854     +      _13_1 = -1;
MPRINT(EM_DIAGRAM):   _13_1 = -1;
31855     +      _13_2 = -1;
MPRINT(EM_DIAGRAM):   _13_2 = -1;
31856     +   end;
MPRINT(EM_DIAGRAM):   end;
31857     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
31858     +      _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
31859     +      _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
31860     +      _13_2 = 1;
MPRINT(EM_DIAGRAM):   _13_2 = 1;
31861     +   end;
MPRINT(EM_DIAGRAM):   end;
31862     +   else do;
MPRINT(EM_DIAGRAM):   else do;
31863     +      _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_0 = .;
31864     +      _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
31865     +      _13_2 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
31866     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
31867     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
31868     +   end;
MPRINT(EM_DIAGRAM):   end;
31869     +end;
MPRINT(EM_DIAGRAM):   end;
31870     +
31871     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
31872     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
31873     +   _P0 = 0.1994122586;
MPRINT(EM_DIAGRAM):   _P0 = 0.1994122586;
31874     +   _P1 = 0.8005877414;
MPRINT(EM_DIAGRAM):   _P1 = 0.8005877414;
31875     +   goto REG3DR1;
MPRINT(EM_DIAGRAM):   goto REG3DR1;
31876     +end;
MPRINT(EM_DIAGRAM):   end;
31877     +
31878     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
31879     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
31880     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
31881     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
31882     +
31883     +***  Effect: GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDELINQ ;
31884     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
31885     +_LP0 = _LP0 + (   -0.87775516834488) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.87775516834488) * _TEMP * _1_0;
31886     +
31887     +***  Effect: GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDEROG ;
31888     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
31889     +_LP0 = _LP0 + (   -0.55281445474052) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.55281445474052) * _TEMP * _2_0;
31890     +
31891     +***  Effect: GRP_JOB ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_JOB ;
31892     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
31893     +_LP0 = _LP0 + (   -1.57351647111869) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.57351647111869) * _TEMP * _3_0;
31894     +_LP0 = _LP0 + (    0.28613983828213) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28613983828213) * _TEMP * _3_1;
31895     +_LP0 = _LP0 + (    0.04717425869826) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04717425869826) * _TEMP * _3_2;
31896     +_LP0 = _LP0 + (    -0.6273079991539) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.6273079991539) * _TEMP * _3_3;
31897     +_LP0 = _LP0 + (    0.46293169342544) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46293169342544) * _TEMP * _3_4;
31898     +_LP0 = _LP0 + (    0.53314640452982) * _TEMP * _3_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.53314640452982) * _TEMP * _3_5;
31899     +
31900     +***  Effect: GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLAGE ;
31901     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
31902     +_LP0 = _LP0 + (     0.4885261303632) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.4885261303632) * _TEMP * _4_0;
31903     +_LP0 = _LP0 + (    0.71554240420541) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.71554240420541) * _TEMP * _4_1;
31904     +_LP0 = _LP0 + (    0.18909158093947) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18909158093947) * _TEMP * _4_2;
31905     +_LP0 = _LP0 + (   -0.53716218509574) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.53716218509574) * _TEMP * _4_3;
31906     +
31907     +***  Effect: GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLNO ;
31908     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
31909     +_LP0 = _LP0 + (    2.73455654245763) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.73455654245763) * _TEMP * _5_0;
31910     +_LP0 = _LP0 + (   -0.61154389982698) * _TEMP * _5_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.61154389982698) * _TEMP * _5_1;
31911     +_LP0 = _LP0 + (   -0.79275770117257) * _TEMP * _5_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.79275770117257) * _TEMP * _5_2;
31912     +_LP0 = _LP0 + (   -0.73669529752972) * _TEMP * _5_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.73669529752972) * _TEMP * _5_3;
31913     +
31914     +***  Effect: GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEBTINC ;
31915     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
31916     +_LP0 = _LP0 + (    2.21025315595452) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.21025315595452) * _TEMP * _6_0;
31917     +_LP0 = _LP0 + (    -0.9672227584658) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.9672227584658) * _TEMP * _6_1;
31918     +_LP0 = _LP0 + (   -0.91408931719345) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91408931719345) * _TEMP * _6_2;
31919     +_LP0 = _LP0 + (   -0.62099733755167) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.62099733755167) * _TEMP * _6_3;
31920     +
31921     +***  Effect: GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DELINQ ;
31922     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
31923     +_LP0 = _LP0 + (    -0.2959510219925) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2959510219925) * _TEMP * _7_0;
31924     +
31925     +***  Effect: GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEROG ;
31926     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
31927     +_LP0 = _LP0 + (   -0.90393524464235) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90393524464235) * _TEMP * _8_0;
31928     +
31929     +***  Effect: GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_LOAN ;
31930     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
31931     +_LP0 = _LP0 + (    0.16385991732161) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16385991732161) * _TEMP * _9_0;
31932     +_LP0 = _LP0 + (    0.15830771669066) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15830771669066) * _TEMP * _9_1;
31933     +_LP0 = _LP0 + (    0.06806737420677) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06806737420677) * _TEMP * _9_2;
31934     +
31935     +***  Effect: GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_MORTDUE ;
31936     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
31937     +_LP0 = _LP0 + (    0.72652835503015) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.72652835503015) * _TEMP * _10_0;
31938     +_LP0 = _LP0 + (    0.19458084189349) * _TEMP * _10_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19458084189349) * _TEMP * _10_1;
31939     +_LP0 = _LP0 + (   -0.18661188905406) * _TEMP * _10_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18661188905406) * _TEMP * _10_2;
31940     +_LP0 = _LP0 + (   -0.45638816653046) * _TEMP * _10_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45638816653046) * _TEMP * _10_3;
31941     +
31942     +***  Effect: GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_VALUE ;
31943     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
31944     +_LP0 = _LP0 + (    3.36684754151064) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.36684754151064) * _TEMP * _11_0;
31945     +_LP0 = _LP0 + (   -0.90230378426672) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90230378426672) * _TEMP * _11_1;
31946     +_LP0 = _LP0 + (   -0.91035575384715) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91035575384715) * _TEMP * _11_2;
31947     +_LP0 = _LP0 + (   -1.14494565714679) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.14494565714679) * _TEMP * _11_3;
31948     +
31949     +***  Effect: GRP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NINQ ;
31950     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
31951     +_LP0 = _LP0 + (   -0.31468561657707) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31468561657707) * _TEMP * _13_0;
31952     +_LP0 = _LP0 + (   -0.18323440424764) * _TEMP * _13_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18323440424764) * _TEMP * _13_1;
31953     +_LP0 = _LP0 + (   -0.09136486214824) * _TEMP * _13_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09136486214824) * _TEMP * _13_2;
31954     +
31955     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
31956     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
31957     +_TEMP =    -0.63961613873858 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -0.63961613873858 + _LP0;
31958     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
31959     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
31960     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
31961     +end;
MPRINT(EM_DIAGRAM):   end;
31962     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
31963     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
31964     +
31965     +REG3DR1:
31966     +
31967     +
31968     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   REG3DR1: *** Posterior Probabilities and Predicted Level;
31969     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
31970     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
31971     +P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
31972     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
31973     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
31974     +P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
31975     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
31976     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
31977     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
31978     +end;
MPRINT(EM_DIAGRAM):   end;
31979     +I_BAD = REG3DRF[_IY];
MPRINT(EM_DIAGRAM):   I_BAD = REG3DRF[_IY];
31980     +U_BAD = REG3DRU[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REG3DRU[_IY];
31981     +
31982     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
31983     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
31984     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
31985      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      

31986      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
31987      quit;
31988      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
31989      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
31990      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
31991      retain ID 2 Node "Reg3";
MPRINT(EM_DIAGRAM):   retain ID 2 Node "Reg3";
31992      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
31993      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1222 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1222 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

31994      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
31995      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
31996      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1222 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 1222 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

31997      proc sort data=EMWS1.BINNING_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.BINNING_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
31998      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
31999      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 30 observations read from the data set EMWS1.BINNING_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 30 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

32000      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
32001      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
32002      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
32003      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 30 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 30 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

32004      proc contents data=EMWS1.Reg3_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Reg3_train out=_meta(keep=NAME) noprint;
32005      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      

32006      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
32007      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
32008      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 47 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 47 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

32009      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
32010      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
32011      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
32012      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 47 observations read from the data set WORK._META.
NOTE: There were 30 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 47 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

32013      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
32014      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 624 rows and 5 columns.

32015      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

32016      proc append base=EMWS1.Score_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_FCMP data=_tempx;
32017      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE_FCMP.
NOTE: There were 624 observations read from the data set WORK._TEMPX.
NOTE: 624 observations added.
NOTE: The data set EMWS1.SCORE_FCMP has 628 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

32018      filename _pref "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\BINNING\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\BINNING\EMPUBLISHSCORE.sas";
32019      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
32020      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
32021      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\BINNING\EMPUBLISHSCORE.sas.
32022     +length _UFormat $200;
MPRINT(EM_DIAGRAM):   length _UFormat $200;
32023     +drop _UFormat;
MPRINT(EM_DIAGRAM):   drop _UFormat;
32024     +_UFormat='';
MPRINT(EM_DIAGRAM):   _UFormat='';
32025     +
32026     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32027     +* Variable: INDELINQ;
MPRINT(EM_DIAGRAM):   * Variable: INDELINQ;
32028     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32029     +LABEL GRP_INDELINQ = "Grouped: INDELINQ";
MPRINT(EM_DIAGRAM):   LABEL GRP_INDELINQ = "Grouped: INDELINQ";
32030     +
32031     +if MISSING(INDELINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(INDELINQ) then do;
32032     +GRP_INDELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 1;
32033     +end;
MPRINT(EM_DIAGRAM):   end;
32034     +else if NOT MISSING(INDELINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(INDELINQ) then do;
32035     +if INDELINQ < 0 then do;
MPRINT(EM_DIAGRAM):   if INDELINQ < 0 then do;
32036     +GRP_INDELINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 2;
32037     +end;
MPRINT(EM_DIAGRAM):   end;
32038     +else
32039     +if 0 <= INDELINQ AND INDELINQ < 0.5 then do;
MPRINT(EM_DIAGRAM):   else if 0 <= INDELINQ AND INDELINQ < 0.5 then do;
32040     +GRP_INDELINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 3;
32041     +end;
MPRINT(EM_DIAGRAM):   end;
32042     +else
32043     +if 0.5 <= INDELINQ then do;
MPRINT(EM_DIAGRAM):   else if 0.5 <= INDELINQ then do;
32044     +GRP_INDELINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 4;
32045     +end;
MPRINT(EM_DIAGRAM):   end;
32046     +end;
MPRINT(EM_DIAGRAM):   end;
32047     +
32048     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32049     +* Variable: INDEROG;
MPRINT(EM_DIAGRAM):   * Variable: INDEROG;
32050     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32051     +LABEL GRP_INDEROG = "Grouped: INDEROG";
MPRINT(EM_DIAGRAM):   LABEL GRP_INDEROG = "Grouped: INDEROG";
32052     +
32053     +if MISSING(INDEROG) then do;
MPRINT(EM_DIAGRAM):   if MISSING(INDEROG) then do;
32054     +GRP_INDEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 1;
32055     +end;
MPRINT(EM_DIAGRAM):   end;
32056     +else if NOT MISSING(INDEROG) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(INDEROG) then do;
32057     +if INDEROG < 0 then do;
MPRINT(EM_DIAGRAM):   if INDEROG < 0 then do;
32058     +GRP_INDEROG = 2;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 2;
32059     +end;
MPRINT(EM_DIAGRAM):   end;
32060     +else
32061     +if 0 <= INDEROG AND INDEROG < 0.5 then do;
MPRINT(EM_DIAGRAM):   else if 0 <= INDEROG AND INDEROG < 0.5 then do;
32062     +GRP_INDEROG = 3;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 3;
32063     +end;
MPRINT(EM_DIAGRAM):   end;
32064     +else
32065     +if 0.5 <= INDEROG then do;
MPRINT(EM_DIAGRAM):   else if 0.5 <= INDEROG then do;
32066     +GRP_INDEROG = 4;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 4;
32067     +end;
MPRINT(EM_DIAGRAM):   end;
32068     +end;
MPRINT(EM_DIAGRAM):   end;
32069     +
32070     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32071     +* Variable: LOG_CLAGE;
MPRINT(EM_DIAGRAM):   * Variable: LOG_CLAGE;
32072     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32073     +LABEL GRP_LOG_CLAGE =
32074     +'Grouped: Transformed CLAGE';
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_CLAGE = 'Grouped: Transformed CLAGE';
32075     +
32076     +if MISSING(LOG_CLAGE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(LOG_CLAGE) then do;
32077     +GRP_LOG_CLAGE = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 1;
32078     +end;
MPRINT(EM_DIAGRAM):   end;
32079     +else if NOT MISSING(LOG_CLAGE) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_CLAGE) then do;
32080     +if LOG_CLAGE < 4.77 then do;
MPRINT(EM_DIAGRAM):   if LOG_CLAGE < 4.77 then do;
32081     +GRP_LOG_CLAGE = 2;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 2;
32082     +end;
MPRINT(EM_DIAGRAM):   end;
32083     +else
32084     +if 4.77 <= LOG_CLAGE AND LOG_CLAGE < 5.17 then do;
MPRINT(EM_DIAGRAM):   else if 4.77 <= LOG_CLAGE AND LOG_CLAGE < 5.17 then do;
32085     +GRP_LOG_CLAGE = 3;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 3;
32086     +end;
MPRINT(EM_DIAGRAM):   end;
32087     +else
32088     +if 5.17 <= LOG_CLAGE AND LOG_CLAGE < 5.46 then do;
MPRINT(EM_DIAGRAM):   else if 5.17 <= LOG_CLAGE AND LOG_CLAGE < 5.46 then do;
32089     +GRP_LOG_CLAGE = 4;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 4;
32090     +end;
MPRINT(EM_DIAGRAM):   end;
32091     +else
32092     +if 5.46 <= LOG_CLAGE then do;
MPRINT(EM_DIAGRAM):   else if 5.46 <= LOG_CLAGE then do;
32093     +GRP_LOG_CLAGE = 5;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 5;
32094     +end;
MPRINT(EM_DIAGRAM):   end;
32095     +end;
MPRINT(EM_DIAGRAM):   end;
32096     +
32097     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32098     +* Variable: LOG_CLNO;
MPRINT(EM_DIAGRAM):   * Variable: LOG_CLNO;
32099     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32100     +LABEL GRP_LOG_CLNO =
32101     +'Grouped: Transformed CLNO';
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_CLNO = 'Grouped: Transformed CLNO';
32102     +
32103     +if MISSING(LOG_CLNO) then do;
MPRINT(EM_DIAGRAM):   if MISSING(LOG_CLNO) then do;
32104     +GRP_LOG_CLNO = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 1;
32105     +end;
MPRINT(EM_DIAGRAM):   end;
32106     +else if NOT MISSING(LOG_CLNO) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_CLNO) then do;
32107     +if LOG_CLNO < 2.71 then do;
MPRINT(EM_DIAGRAM):   if LOG_CLNO < 2.71 then do;
32108     +GRP_LOG_CLNO = 2;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 2;
32109     +end;
MPRINT(EM_DIAGRAM):   end;
32110     +else
32111     +if 2.71 <= LOG_CLNO AND LOG_CLNO < 3.04 then do;
MPRINT(EM_DIAGRAM):   else if 2.71 <= LOG_CLNO AND LOG_CLNO < 3.04 then do;
32112     +GRP_LOG_CLNO = 3;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 3;
32113     +end;
MPRINT(EM_DIAGRAM):   end;
32114     +else
32115     +if 3.04 <= LOG_CLNO AND LOG_CLNO < 3.3 then do;
MPRINT(EM_DIAGRAM):   else if 3.04 <= LOG_CLNO AND LOG_CLNO < 3.3 then do;
32116     +GRP_LOG_CLNO = 4;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 4;
32117     +end;
MPRINT(EM_DIAGRAM):   end;
32118     +else
32119     +if 3.3 <= LOG_CLNO then do;
MPRINT(EM_DIAGRAM):   else if 3.3 <= LOG_CLNO then do;
32120     +GRP_LOG_CLNO = 5;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 5;
32121     +end;
MPRINT(EM_DIAGRAM):   end;
32122     +end;
MPRINT(EM_DIAGRAM):   end;
32123     +
32124     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32125     +* Variable: LOG_DEBTINC;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DEBTINC;
32126     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32127     +LABEL GRP_LOG_DEBTINC =
32128     +'Grouped: Transformed DEBTINC';
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DEBTINC = 'Grouped: Transformed DEBTINC';
32129     +
32130     +if MISSING(LOG_DEBTINC) then do;
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DEBTINC) then do;
32131     +GRP_LOG_DEBTINC = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 1;
32132     +end;
MPRINT(EM_DIAGRAM):   end;
32133     +else if NOT MISSING(LOG_DEBTINC) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DEBTINC) then do;
32134     +if LOG_DEBTINC < 3.4 then do;
MPRINT(EM_DIAGRAM):   if LOG_DEBTINC < 3.4 then do;
32135     +GRP_LOG_DEBTINC = 2;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 2;
32136     +end;
MPRINT(EM_DIAGRAM):   end;
32137     +else
32138     +if 3.4 <= LOG_DEBTINC AND LOG_DEBTINC < 3.58 then do;
MPRINT(EM_DIAGRAM):   else if 3.4 <= LOG_DEBTINC AND LOG_DEBTINC < 3.58 then do;
32139     +GRP_LOG_DEBTINC = 3;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 3;
32140     +end;
MPRINT(EM_DIAGRAM):   end;
32141     +else
32142     +if 3.58 <= LOG_DEBTINC AND LOG_DEBTINC < 3.69 then do;
MPRINT(EM_DIAGRAM):   else if 3.58 <= LOG_DEBTINC AND LOG_DEBTINC < 3.69 then do;
32143     +GRP_LOG_DEBTINC = 4;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 4;
32144     +end;
MPRINT(EM_DIAGRAM):   end;
32145     +else
32146     +if 3.69 <= LOG_DEBTINC then do;
MPRINT(EM_DIAGRAM):   else if 3.69 <= LOG_DEBTINC then do;
32147     +GRP_LOG_DEBTINC = 5;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 5;
32148     +end;
MPRINT(EM_DIAGRAM):   end;
32149     +end;
MPRINT(EM_DIAGRAM):   end;
32150     +
32151     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32152     +* Variable: LOG_DELINQ;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DELINQ;
32153     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32154     +LABEL GRP_LOG_DELINQ =
32155     +'Grouped: Transformed DELINQ';
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DELINQ = 'Grouped: Transformed DELINQ';
32156     +
32157     +if MISSING(LOG_DELINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DELINQ) then do;
32158     +GRP_LOG_DELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 1;
32159     +end;
MPRINT(EM_DIAGRAM):   end;
32160     +else if NOT MISSING(LOG_DELINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DELINQ) then do;
32161     +if LOG_DELINQ < 0 then do;
MPRINT(EM_DIAGRAM):   if LOG_DELINQ < 0 then do;
32162     +GRP_LOG_DELINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 2;
32163     +end;
MPRINT(EM_DIAGRAM):   end;
32164     +else
32165     +if 0 <= LOG_DELINQ then do;
MPRINT(EM_DIAGRAM):   else if 0 <= LOG_DELINQ then do;
32166     +GRP_LOG_DELINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 3;
32167     +end;
MPRINT(EM_DIAGRAM):   end;
32168     +end;
MPRINT(EM_DIAGRAM):   end;
32169     +
32170     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32171     +* Variable: LOG_DEROG;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DEROG;
32172     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32173     +LABEL GRP_LOG_DEROG =
32174     +'Grouped: Transformed DEROG';
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DEROG = 'Grouped: Transformed DEROG';
32175     +
32176     +if MISSING(LOG_DEROG) then do;
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DEROG) then do;
32177     +GRP_LOG_DEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 1;
32178     +end;
MPRINT(EM_DIAGRAM):   end;
32179     +else if NOT MISSING(LOG_DEROG) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DEROG) then do;
32180     +if LOG_DEROG < 0 then do;
MPRINT(EM_DIAGRAM):   if LOG_DEROG < 0 then do;
32181     +GRP_LOG_DEROG = 2;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 2;
32182     +end;
MPRINT(EM_DIAGRAM):   end;
32183     +else
32184     +if 0 <= LOG_DEROG then do;
MPRINT(EM_DIAGRAM):   else if 0 <= LOG_DEROG then do;
32185     +GRP_LOG_DEROG = 3;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 3;
32186     +end;
MPRINT(EM_DIAGRAM):   end;
32187     +end;
MPRINT(EM_DIAGRAM):   end;
32188     +
32189     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32190     +* Variable: LOG_LOAN;
MPRINT(EM_DIAGRAM):   * Variable: LOG_LOAN;
32191     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32192     +LABEL GRP_LOG_LOAN =
32193     +'Grouped: Transformed LOAN';
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_LOAN = 'Grouped: Transformed LOAN';
32194     +
32195     +if MISSING(LOG_LOAN) then do;
MPRINT(EM_DIAGRAM):   if MISSING(LOG_LOAN) then do;
32196     +GRP_LOG_LOAN = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 1;
32197     +end;
MPRINT(EM_DIAGRAM):   end;
32198     +else if NOT MISSING(LOG_LOAN) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_LOAN) then do;
32199     +if LOG_LOAN < 9.32 then do;
MPRINT(EM_DIAGRAM):   if LOG_LOAN < 9.32 then do;
32200     +GRP_LOG_LOAN = 2;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 2;
32201     +end;
MPRINT(EM_DIAGRAM):   end;
32202     +else
32203     +if 9.32 <= LOG_LOAN AND LOG_LOAN < 9.7 then do;
MPRINT(EM_DIAGRAM):   else if 9.32 <= LOG_LOAN AND LOG_LOAN < 9.7 then do;
32204     +GRP_LOG_LOAN = 3;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 3;
32205     +end;
MPRINT(EM_DIAGRAM):   end;
32206     +else
32207     +if 9.7 <= LOG_LOAN AND LOG_LOAN < 10.06 then do;
MPRINT(EM_DIAGRAM):   else if 9.7 <= LOG_LOAN AND LOG_LOAN < 10.06 then do;
32208     +GRP_LOG_LOAN = 4;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 4;
32209     +end;
MPRINT(EM_DIAGRAM):   end;
32210     +else
32211     +if 10.06 <= LOG_LOAN then do;
MPRINT(EM_DIAGRAM):   else if 10.06 <= LOG_LOAN then do;
32212     +GRP_LOG_LOAN = 5;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 5;
32213     +end;
MPRINT(EM_DIAGRAM):   end;
32214     +end;
MPRINT(EM_DIAGRAM):   end;
32215     +
32216     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32217     +* Variable: LOG_MORTDUE;
MPRINT(EM_DIAGRAM):   * Variable: LOG_MORTDUE;
32218     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32219     +LABEL GRP_LOG_MORTDUE =
32220     +'Grouped: Transformed MORTDUE';
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_MORTDUE = 'Grouped: Transformed MORTDUE';
32221     +
32222     +if MISSING(LOG_MORTDUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(LOG_MORTDUE) then do;
32223     +GRP_LOG_MORTDUE = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 1;
32224     +end;
MPRINT(EM_DIAGRAM):   end;
32225     +else if NOT MISSING(LOG_MORTDUE) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_MORTDUE) then do;
32226     +if LOG_MORTDUE < 10.74 then do;
MPRINT(EM_DIAGRAM):   if LOG_MORTDUE < 10.74 then do;
32227     +GRP_LOG_MORTDUE = 2;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 2;
32228     +end;
MPRINT(EM_DIAGRAM):   end;
32229     +else
32230     +if 10.74 <= LOG_MORTDUE AND LOG_MORTDUE < 11.07 then do;
MPRINT(EM_DIAGRAM):   else if 10.74 <= LOG_MORTDUE AND LOG_MORTDUE < 11.07 then do;
32231     +GRP_LOG_MORTDUE = 3;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 3;
32232     +end;
MPRINT(EM_DIAGRAM):   end;
32233     +else
32234     +if 11.07 <= LOG_MORTDUE AND LOG_MORTDUE < 11.44 then do;
MPRINT(EM_DIAGRAM):   else if 11.07 <= LOG_MORTDUE AND LOG_MORTDUE < 11.44 then do;
32235     +GRP_LOG_MORTDUE = 4;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 4;
32236     +end;
MPRINT(EM_DIAGRAM):   end;
32237     +else
32238     +if 11.44 <= LOG_MORTDUE then do;
MPRINT(EM_DIAGRAM):   else if 11.44 <= LOG_MORTDUE then do;
32239     +GRP_LOG_MORTDUE = 5;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 5;
32240     +end;
MPRINT(EM_DIAGRAM):   end;
32241     +end;
MPRINT(EM_DIAGRAM):   end;
32242     +
32243     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32244     +* Variable: LOG_VALUE;
MPRINT(EM_DIAGRAM):   * Variable: LOG_VALUE;
32245     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32246     +LABEL GRP_LOG_VALUE =
32247     +'Grouped: Transformed VALUE';
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_VALUE = 'Grouped: Transformed VALUE';
32248     +
32249     +if MISSING(LOG_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(LOG_VALUE) then do;
32250     +GRP_LOG_VALUE = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 1;
32251     +end;
MPRINT(EM_DIAGRAM):   end;
32252     +else if NOT MISSING(LOG_VALUE) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_VALUE) then do;
32253     +if LOG_VALUE < 11.1 then do;
MPRINT(EM_DIAGRAM):   if LOG_VALUE < 11.1 then do;
32254     +GRP_LOG_VALUE = 2;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 2;
32255     +end;
MPRINT(EM_DIAGRAM):   end;
32256     +else
32257     +if 11.1 <= LOG_VALUE AND LOG_VALUE < 11.4 then do;
MPRINT(EM_DIAGRAM):   else if 11.1 <= LOG_VALUE AND LOG_VALUE < 11.4 then do;
32258     +GRP_LOG_VALUE = 3;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 3;
32259     +end;
MPRINT(EM_DIAGRAM):   end;
32260     +else
32261     +if 11.4 <= LOG_VALUE AND LOG_VALUE < 11.71 then do;
MPRINT(EM_DIAGRAM):   else if 11.4 <= LOG_VALUE AND LOG_VALUE < 11.71 then do;
32262     +GRP_LOG_VALUE = 4;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 4;
32263     +end;
MPRINT(EM_DIAGRAM):   end;
32264     +else
32265     +if 11.71 <= LOG_VALUE then do;
MPRINT(EM_DIAGRAM):   else if 11.71 <= LOG_VALUE then do;
32266     +GRP_LOG_VALUE = 5;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 5;
32267     +end;
MPRINT(EM_DIAGRAM):   end;
32268     +end;
MPRINT(EM_DIAGRAM):   end;
32269     +
32270     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32271     +* Variable: LOG_YOJ;
MPRINT(EM_DIAGRAM):   * Variable: LOG_YOJ;
32272     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32273     +LABEL GRP_LOG_YOJ =
32274     +'Grouped: Transformed YOJ';
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_YOJ = 'Grouped: Transformed YOJ';
32275     +
32276     +if MISSING(LOG_YOJ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(LOG_YOJ) then do;
32277     +GRP_LOG_YOJ = 1;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 1;
32278     +end;
MPRINT(EM_DIAGRAM):   end;
32279     +else if NOT MISSING(LOG_YOJ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_YOJ) then do;
32280     +if LOG_YOJ < 1.39 then do;
MPRINT(EM_DIAGRAM):   if LOG_YOJ < 1.39 then do;
32281     +GRP_LOG_YOJ = 2;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 2;
32282     +end;
MPRINT(EM_DIAGRAM):   end;
32283     +else
32284     +if 1.39 <= LOG_YOJ AND LOG_YOJ < 2.08 then do;
MPRINT(EM_DIAGRAM):   else if 1.39 <= LOG_YOJ AND LOG_YOJ < 2.08 then do;
32285     +GRP_LOG_YOJ = 3;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 3;
32286     +end;
MPRINT(EM_DIAGRAM):   end;
32287     +else
32288     +if 2.08 <= LOG_YOJ AND LOG_YOJ < 2.64 then do;
MPRINT(EM_DIAGRAM):   else if 2.08 <= LOG_YOJ AND LOG_YOJ < 2.64 then do;
32289     +GRP_LOG_YOJ = 4;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 4;
32290     +end;
MPRINT(EM_DIAGRAM):   end;
32291     +else
32292     +if 2.64 <= LOG_YOJ then do;
MPRINT(EM_DIAGRAM):   else if 2.64 <= LOG_YOJ then do;
32293     +GRP_LOG_YOJ = 5;
MPRINT(EM_DIAGRAM):   GRP_LOG_YOJ = 5;
32294     +end;
MPRINT(EM_DIAGRAM):   end;
32295     +end;
MPRINT(EM_DIAGRAM):   end;
32296     +
32297     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32298     +* Variable: NINQ;
MPRINT(EM_DIAGRAM):   * Variable: NINQ;
32299     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32300     +LABEL GRP_NINQ = "Grouped: NINQ";
MPRINT(EM_DIAGRAM):   LABEL GRP_NINQ = "Grouped: NINQ";
32301     +
32302     +if MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NINQ) then do;
32303     +GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
32304     +end;
MPRINT(EM_DIAGRAM):   end;
32305     +else if NOT MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NINQ) then do;
32306     +if NINQ < 1 then do;
MPRINT(EM_DIAGRAM):   if NINQ < 1 then do;
32307     +GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
32308     +end;
MPRINT(EM_DIAGRAM):   end;
32309     +else
32310     +if 1 <= NINQ AND NINQ < 2 then do;
MPRINT(EM_DIAGRAM):   else if 1 <= NINQ AND NINQ < 2 then do;
32311     +GRP_NINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 2;
32312     +end;
MPRINT(EM_DIAGRAM):   end;
32313     +else
32314     +if 2 <= NINQ AND NINQ < 2.5 then do;
MPRINT(EM_DIAGRAM):   else if 2 <= NINQ AND NINQ < 2.5 then do;
32315     +GRP_NINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 3;
32316     +end;
MPRINT(EM_DIAGRAM):   end;
32317     +else
32318     +if 2.5 <= NINQ then do;
MPRINT(EM_DIAGRAM):   else if 2.5 <= NINQ then do;
32319     +GRP_NINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 4;
32320     +end;
MPRINT(EM_DIAGRAM):   end;
32321     +end;
MPRINT(EM_DIAGRAM):   end;
32322     +
32323     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32324     +* Variable: JOB;
MPRINT(EM_DIAGRAM):   * Variable: JOB;
32325     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32326     +LABEL GRP_JOB = "Grouped: JOB";
MPRINT(EM_DIAGRAM):   LABEL GRP_JOB = "Grouped: JOB";
32327     +
32328     +_UFormat = JOB;
MPRINT(EM_DIAGRAM):   _UFormat = JOB;
32329     +%dmnormip(_UFormat);
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
32330     +if MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFORMAT) then do;
32331     +GRP_JOB = 1;
MPRINT(EM_DIAGRAM):   GRP_JOB = 1;
32332     +end;
MPRINT(EM_DIAGRAM):   end;
32333     +else if NOT MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFORMAT) then do;
32334     +%dmnormip(_UFormat);
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
32335     +if (_UFORMAT eq 'OTHER'
32336     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFORMAT eq 'OTHER' ) then do;
32337     +GRP_JOB = 2;
MPRINT(EM_DIAGRAM):   GRP_JOB = 2;
32338     +end;
MPRINT(EM_DIAGRAM):   end;
32339     +else
32340     +if (_UFORMAT eq 'PROFEXE'
32341     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'PROFEXE' ) then do;
32342     +GRP_JOB = 3;
MPRINT(EM_DIAGRAM):   GRP_JOB = 3;
32343     +end;
MPRINT(EM_DIAGRAM):   end;
32344     +else
32345     +if (_UFORMAT eq 'OFFICE'
32346     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'OFFICE' ) then do;
32347     +GRP_JOB = 4;
MPRINT(EM_DIAGRAM):   GRP_JOB = 4;
32348     +end;
MPRINT(EM_DIAGRAM):   end;
32349     +else
32350     +if (_UFORMAT eq 'MGR'
32351     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'MGR' ) then do;
32352     +GRP_JOB = 5;
MPRINT(EM_DIAGRAM):   GRP_JOB = 5;
32353     +end;
MPRINT(EM_DIAGRAM):   end;
32354     +else
32355     +if (_UFORMAT eq 'SELF'
32356     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'SELF' ) then do;
32357     +GRP_JOB = 6;
MPRINT(EM_DIAGRAM):   GRP_JOB = 6;
32358     +end;
MPRINT(EM_DIAGRAM):   end;
32359     +else
32360     +if (_UFORMAT eq 'SALES'
32361     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'SALES' ) then do;
32362     +GRP_JOB = 7;
MPRINT(EM_DIAGRAM):   GRP_JOB = 7;
32363     +end;
MPRINT(EM_DIAGRAM):   end;
32364     +else do;
MPRINT(EM_DIAGRAM):   else do;
32365     +GRP_JOB = 1;
MPRINT(EM_DIAGRAM):   GRP_JOB = 1;
32366     +end;
MPRINT(EM_DIAGRAM):   end;
32367     +end;
MPRINT(EM_DIAGRAM):   end;
32368     +
32369     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32370     +* Variable: REASON;
MPRINT(EM_DIAGRAM):   * Variable: REASON;
32371     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32372     +LABEL GRP_REASON = "Grouped: REASON";
MPRINT(EM_DIAGRAM):   LABEL GRP_REASON = "Grouped: REASON";
32373     +
32374     +_UFormat = REASON;
MPRINT(EM_DIAGRAM):   _UFormat = REASON;
32375     +%dmnormip(_UFormat);
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
32376     +if MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFORMAT) then do;
32377     +GRP_REASON = 1;
MPRINT(EM_DIAGRAM):   GRP_REASON = 1;
32378     +end;
MPRINT(EM_DIAGRAM):   end;
32379     +else if NOT MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFORMAT) then do;
32380     +%dmnormip(_UFormat);
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
32381     +if (_UFORMAT eq 'DEBTCON'
32382     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFORMAT eq 'DEBTCON' ) then do;
32383     +GRP_REASON = 2;
MPRINT(EM_DIAGRAM):   GRP_REASON = 2;
32384     +end;
MPRINT(EM_DIAGRAM):   end;
32385     +else
32386     +if (_UFORMAT eq 'HOMEIMP'
32387     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'HOMEIMP' ) then do;
32388     +GRP_REASON = 3;
MPRINT(EM_DIAGRAM):   GRP_REASON = 3;
32389     +end;
MPRINT(EM_DIAGRAM):   end;
32390     +else do;
MPRINT(EM_DIAGRAM):   else do;
32391     +GRP_REASON = 1;
MPRINT(EM_DIAGRAM):   GRP_REASON = 1;
32392     +end;
MPRINT(EM_DIAGRAM):   end;
32393     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
32394      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

32395      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
32396      quit;
32397      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
32398      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
32399      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
32400      retain ID 3 Node "BINNING";
MPRINT(EM_DIAGRAM):   retain ID 3 Node "BINNING";
32401      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
32402      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 20 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

32403      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
32404      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
32405      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 20 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

32406      proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
32407      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
32408      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 16 observations read from the data set EMWS1.TRANS_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 16 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

32409      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
32410      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
32411      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
32412      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 16 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 16 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

32413      proc contents data=EMWS1.BINNING_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.BINNING_train out=_meta(keep=NAME) noprint;
32414      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 39 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      

32415      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
32416      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
32417      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 39 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 39 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

32418      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
32419      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
32420      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
32421      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 39 observations read from the data set WORK._META.
NOTE: There were 16 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 39 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

32422      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
32423      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 18 rows and 5 columns.

32424      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

32425      proc append base=EMWS1.Score_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_FCMP data=_tempx;
32426      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE_FCMP.
NOTE: There were 18 observations read from the data set WORK._TEMPX.
NOTE: 18 observations added.
NOTE: The data set EMWS1.SCORE_FCMP has 646 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

32427      filename _pref "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):    filename _pref "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas";
32428      options validvarname=ANY;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
32429      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
32430      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Trans\EMPUBLISHSCORE.sas.
32431     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32432     +* Computed Code;
MPRINT(EM_DIAGRAM):   * Computed Code;
32433     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32434     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32435     +* TRANSFORM: CLAGE , log(CLAGE + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: CLAGE , log(CLAGE + 1);
32436     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32437     +label LOG_CLAGE = 'Transformed CLAGE';
MPRINT(EM_DIAGRAM):   label LOG_CLAGE = 'Transformed CLAGE';
32438     +if CLAGE eq . then LOG_CLAGE = .;
MPRINT(EM_DIAGRAM):   if CLAGE eq . then LOG_CLAGE = .;
32439     +else do;
MPRINT(EM_DIAGRAM):   else do;
32440     +if CLAGE + 1 > 0 then LOG_CLAGE = log(CLAGE + 1);
MPRINT(EM_DIAGRAM):   if CLAGE + 1 > 0 then LOG_CLAGE = log(CLAGE + 1);
32441     +else LOG_CLAGE = .;
MPRINT(EM_DIAGRAM):   else LOG_CLAGE = .;
32442     +end;
MPRINT(EM_DIAGRAM):   end;
32443     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32444     +* TRANSFORM: CLNO , log(CLNO + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: CLNO , log(CLNO + 1);
32445     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32446     +label LOG_CLNO = 'Transformed CLNO';
MPRINT(EM_DIAGRAM):   label LOG_CLNO = 'Transformed CLNO';
32447     +if CLNO eq . then LOG_CLNO = .;
MPRINT(EM_DIAGRAM):   if CLNO eq . then LOG_CLNO = .;
32448     +else do;
MPRINT(EM_DIAGRAM):   else do;
32449     +if CLNO + 1 > 0 then LOG_CLNO = log(CLNO + 1);
MPRINT(EM_DIAGRAM):   if CLNO + 1 > 0 then LOG_CLNO = log(CLNO + 1);
32450     +else LOG_CLNO = .;
MPRINT(EM_DIAGRAM):   else LOG_CLNO = .;
32451     +end;
MPRINT(EM_DIAGRAM):   end;
32452     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32453     +* TRANSFORM: DEBTINC , log(DEBTINC + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: DEBTINC , log(DEBTINC + 1);
32454     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32455     +label LOG_DEBTINC = 'Transformed DEBTINC';
MPRINT(EM_DIAGRAM):   label LOG_DEBTINC = 'Transformed DEBTINC';
32456     +if DEBTINC eq . then LOG_DEBTINC = .;
MPRINT(EM_DIAGRAM):   if DEBTINC eq . then LOG_DEBTINC = .;
32457     +else do;
MPRINT(EM_DIAGRAM):   else do;
32458     +if DEBTINC + 1 > 0 then LOG_DEBTINC = log(DEBTINC + 1);
MPRINT(EM_DIAGRAM):   if DEBTINC + 1 > 0 then LOG_DEBTINC = log(DEBTINC + 1);
32459     +else LOG_DEBTINC = .;
MPRINT(EM_DIAGRAM):   else LOG_DEBTINC = .;
32460     +end;
MPRINT(EM_DIAGRAM):   end;
32461     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32462     +* TRANSFORM: DELINQ , log(DELINQ + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: DELINQ , log(DELINQ + 1);
32463     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32464     +label LOG_DELINQ = 'Transformed DELINQ';
MPRINT(EM_DIAGRAM):   label LOG_DELINQ = 'Transformed DELINQ';
32465     +if DELINQ eq . then LOG_DELINQ = .;
MPRINT(EM_DIAGRAM):   if DELINQ eq . then LOG_DELINQ = .;
32466     +else do;
MPRINT(EM_DIAGRAM):   else do;
32467     +if DELINQ + 1 > 0 then LOG_DELINQ = log(DELINQ + 1);
MPRINT(EM_DIAGRAM):   if DELINQ + 1 > 0 then LOG_DELINQ = log(DELINQ + 1);
32468     +else LOG_DELINQ = .;
MPRINT(EM_DIAGRAM):   else LOG_DELINQ = .;
32469     +end;
MPRINT(EM_DIAGRAM):   end;
32470     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32471     +* TRANSFORM: DEROG , log(DEROG + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: DEROG , log(DEROG + 1);
32472     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32473     +label LOG_DEROG = 'Transformed DEROG';
MPRINT(EM_DIAGRAM):   label LOG_DEROG = 'Transformed DEROG';
32474     +if DEROG eq . then LOG_DEROG = .;
MPRINT(EM_DIAGRAM):   if DEROG eq . then LOG_DEROG = .;
32475     +else do;
MPRINT(EM_DIAGRAM):   else do;
32476     +if DEROG + 1 > 0 then LOG_DEROG = log(DEROG + 1);
MPRINT(EM_DIAGRAM):   if DEROG + 1 > 0 then LOG_DEROG = log(DEROG + 1);
32477     +else LOG_DEROG = .;
MPRINT(EM_DIAGRAM):   else LOG_DEROG = .;
32478     +end;
MPRINT(EM_DIAGRAM):   end;
32479     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32480     +* TRANSFORM: LOAN , log(LOAN + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: LOAN , log(LOAN + 1);
32481     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32482     +label LOG_LOAN = 'Transformed LOAN';
MPRINT(EM_DIAGRAM):   label LOG_LOAN = 'Transformed LOAN';
32483     +if LOAN eq . then LOG_LOAN = .;
MPRINT(EM_DIAGRAM):   if LOAN eq . then LOG_LOAN = .;
32484     +else do;
MPRINT(EM_DIAGRAM):   else do;
32485     +if LOAN + 1 > 0 then LOG_LOAN = log(LOAN + 1);
MPRINT(EM_DIAGRAM):   if LOAN + 1 > 0 then LOG_LOAN = log(LOAN + 1);
32486     +else LOG_LOAN = .;
MPRINT(EM_DIAGRAM):   else LOG_LOAN = .;
32487     +end;
MPRINT(EM_DIAGRAM):   end;
32488     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32489     +* TRANSFORM: MORTDUE , log(MORTDUE + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: MORTDUE , log(MORTDUE + 1);
32490     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32491     +label LOG_MORTDUE = 'Transformed MORTDUE';
MPRINT(EM_DIAGRAM):   label LOG_MORTDUE = 'Transformed MORTDUE';
32492     +if MORTDUE eq . then LOG_MORTDUE = .;
MPRINT(EM_DIAGRAM):   if MORTDUE eq . then LOG_MORTDUE = .;
32493     +else do;
MPRINT(EM_DIAGRAM):   else do;
32494     +if MORTDUE + 1 > 0 then LOG_MORTDUE = log(MORTDUE + 1);
MPRINT(EM_DIAGRAM):   if MORTDUE + 1 > 0 then LOG_MORTDUE = log(MORTDUE + 1);
32495     +else LOG_MORTDUE = .;
MPRINT(EM_DIAGRAM):   else LOG_MORTDUE = .;
32496     +end;
MPRINT(EM_DIAGRAM):   end;
32497     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32498     +* TRANSFORM: VALUE , log(VALUE + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: VALUE , log(VALUE + 1);
32499     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32500     +label LOG_VALUE = 'Transformed VALUE';
MPRINT(EM_DIAGRAM):   label LOG_VALUE = 'Transformed VALUE';
32501     +if VALUE eq . then LOG_VALUE = .;
MPRINT(EM_DIAGRAM):   if VALUE eq . then LOG_VALUE = .;
32502     +else do;
MPRINT(EM_DIAGRAM):   else do;
32503     +if VALUE + 1 > 0 then LOG_VALUE = log(VALUE + 1);
MPRINT(EM_DIAGRAM):   if VALUE + 1 > 0 then LOG_VALUE = log(VALUE + 1);
32504     +else LOG_VALUE = .;
MPRINT(EM_DIAGRAM):   else LOG_VALUE = .;
32505     +end;
MPRINT(EM_DIAGRAM):   end;
32506     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32507     +* TRANSFORM: YOJ , log(YOJ + 1);
MPRINT(EM_DIAGRAM):   * TRANSFORM: YOJ , log(YOJ + 1);
32508     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32509     +label LOG_YOJ = 'Transformed YOJ';
MPRINT(EM_DIAGRAM):   label LOG_YOJ = 'Transformed YOJ';
32510     +if YOJ eq . then LOG_YOJ = .;
MPRINT(EM_DIAGRAM):   if YOJ eq . then LOG_YOJ = .;
32511     +else do;
MPRINT(EM_DIAGRAM):   else do;
32512     +if YOJ + 1 > 0 then LOG_YOJ = log(YOJ + 1);
MPRINT(EM_DIAGRAM):   if YOJ + 1 > 0 then LOG_YOJ = log(YOJ + 1);
32513     +else LOG_YOJ = .;
MPRINT(EM_DIAGRAM):   else LOG_YOJ = .;
32514     +end;
MPRINT(EM_DIAGRAM):   end;
32515     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32516     +* Formula Code;
MPRINT(EM_DIAGRAM):   * Formula Code;
32517     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32518     +INDELINQ =DELINQ > 0 ;
MPRINT(EM_DIAGRAM):   INDELINQ =DELINQ > 0 ;
32519     +INDEROG =DEROG > 0 ;
MPRINT(EM_DIAGRAM):   INDEROG =DEROG > 0 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
32520      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

32521      options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   quit;
32522      quit;
32523      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
32524      data _temp(rename=(RHS=NAME));
MPRINT(EM_DIAGRAM):   data _temp(rename=(RHS=NAME));
32525      length Node $32;
MPRINT(EM_DIAGRAM):   length Node $32;
32526      retain ID 4 Node "Trans";
MPRINT(EM_DIAGRAM):   retain ID 4 Node "Trans";
32527      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
32528      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 11 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

32529      proc sort data=_temp;
MPRINT(EM_DIAGRAM):   proc sort data=_temp;
32530      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
32531      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 11 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

32532      proc sort data=EMWS1.Part_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part_CMeta_TRAIN out=_temp2(keep=NAME CREATOR);
32533      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
32534      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

32535      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
32536      length CREATOR $32;
MPRINT(EM_DIAGRAM):   length CREATOR $32;
32537      set _temp2;
MPRINT(EM_DIAGRAM):   set _temp2;
32538      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 14 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

32539      proc contents data=EMWS1.Trans_train out=_meta(keep=NAME) noprint;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans_train out=_meta(keep=NAME) noprint;
32540      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._META has 25 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      

32541      proc sort data=_meta;
MPRINT(EM_DIAGRAM):   proc sort data=_meta;
32542      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
32543      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 25 observations read from the data set WORK._META.
NOTE: The data set WORK._META has 25 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

32544      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
32545      merge _meta _temp2;
MPRINT(EM_DIAGRAM):   merge _meta _temp2;
32546      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
32547      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
The SAS System

NOTE: There were 25 observations read from the data set WORK._META.
NOTE: There were 14 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 25 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

32548      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
32549      create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
MPRINT(EM_DIAGRAM):   create table _tempx as select p.node, p.lhs, p.id , p2.name, p2.CREATOR from work._temp p, work._temp2 p2 where upcase(p.NAME)=upcase(p2.NAME);
NOTE: Table WORK._TEMPX created, with 11 rows and 5 columns.

32550      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

32551      proc append base=EMWS1.Score_FCMP data=_tempx;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Score_FCMP data=_tempx;
32552      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Appending WORK._TEMPX to EMWS1.SCORE_FCMP.
NOTE: There were 11 observations read from the data set WORK._TEMPX.
NOTE: 11 observations added.
NOTE: The data set EMWS1.SCORE_FCMP has 657 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

32553      %macro varDept(fcmpdata=,id=);
32554      %global nobs&id scoreFlag&id;
32555      %let scoreFlag&id = 0;
32556      %if &id=1 or ^&fcmpStart %then %do;
32557      proc sort data=&fcmpdata out=_temp&id nodupkey;
32558      by NAME;
32559      %if EM_CLASSIFICATION EM_PROBABILITY EM_EVENTPROBABILITY ne %then %do;
32560      where id=&id and (LHS in( %let j=1;
32561      %do %while(%scan( EM_CLASSIFICATION EM_PROBABILITY EM_EVENTPROBABILITY, &j) ne );
32562      %let var = %scan( EM_CLASSIFICATION EM_PROBABILITY EM_EVENTPROBABILITY, &j);
32563      "&var" %let j = %eval(&j+1);
32564      %end;
32565      ) or substr(LHS, 1, 3)='EM_');
32566      %end;
32567      %else %do;
32568      where id=&id and substr(LHS, 1, 3)='EM_';
32569      %end;
32570      run;
32571      %let dsid = %sysfunc(open(_temp&id));
32572      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
32573      %let dsid = %sysfunc(close(&dsid));
32574      %if &&nobs&id %then %do;
32575      %let scoreFlag&id = 1;
32576      %let fcmpStart = 1;
32577      %end;
32578      %else %let fcmpStart = 0;
32579      %end;
32580      %else %do;
32581      proc sort data=&fcmpdata out=_tempid;
32582      where id=&id;
32583      by LHS;
32584      run;
32585      %let dsid = %sysfunc(open(_tempid));
32586      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
32587      %let dsid = %sysfunc(close(&dsid));
32588      %if ^&&nobs&id %then %do;
32589      proc datasets lib=work nolist;
32590      delete _tempid;
32591      run;
32592      quit;
32593      %end;
32594      %else %do;
32595      data _tempAll;
32596      set %let j=%eval(&id-1);
32597      %do x=1 %to &j;
32598      %if &&nobs&x %then %do;
32599      _temp&x %end;
32600      %end;
32601      ;
32602      run;
32603      proc sql;
32604      create table _temp&id as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
32605      quit;
32606      data _temp&id;
32607      set _temp&id;
32608      where LHS ne '' and NAME ne '' and Node ne '';
32609      run;
32610      proc datasets lib=work nolist;
32611      delete _tempAll;
32612      run;
32613      %let dsid = %sysfunc(open(_temp&id));
32614      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
32615      %let dsid = %sysfunc(close(&dsid));
32616      %if ^&&nobs&id %then %do;
32617      proc datasets lib=work nolist;
32618      delete _temp&id;
32619      run;
32620      quit;
32621      %end;
32622      %else %do;
32623      %let scoreFlag&id = 1;
32624      data _temp&id;
32625      set _temp&id;
32626      where LHS ne NAME and node ne '';
32627      run;
32628      %let dsid = %sysfunc(open(_temp&id));
32629      %let nobs&id = %sysfunc(attrn(&dsid, NLOBSF));
32630      %let dsid = %sysfunc(close(&dsid));
32631      %if ^&&nobs&id %then %do;
32632      proc datasets lib=work nolist;
32633      delete _temp&id;
32634      run;
32635      quit;
32636      %end;
32637      %else %do;
32638      proc sort data=_temp&id nodupkey;
32639      by LHS NAME;
32640      run;
32641      %end;
32642      %end;
32643      %end;
32644      %end;
32645      %mend varDept;
32646      %macro optCode(outdata=);
32647      %global fcmpStart;
32648      %let fcmpStart = 0;
32649      %let outputVars = EM_CLASSIFICATION EM_PROBABILITY EM_EVENTPROBABILITY;
32650      %let NumNodes=6;
32651      %do k=1 %to &NumNodes;
32652      %vardept(fcmpdata=&outdata, id=&k);
32653      %end;
32654      %mend optCode;
32655      %optcode(outData=EMWS1.Score_FCMP);
MPRINT(EM_DIAGRAM):   
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_temp1 nodupkey;
MPRINT(VARDEPT):   by NAME;
MPRINT(VARDEPT):   where id=1 and (LHS in( "EM_CLASSIFICATION" "EM_PROBABILITY" "EM_EVENTPROBABILITY" ) or substr(LHS, 1, 3)='EM_');
MPRINT(VARDEPT):   run;

NOTE: There were 4 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE (id=1) and (LHS in ('EM_CLASSIFICATION', 'EM_EVENTPROBABILITY', 'EM_PROBABILITY') or (SUBSTR(LHS, 1, 3)='EM_'));
NOTE: 1 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP1 has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=2;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 624 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=2;
NOTE: The data set WORK._TEMPID has 624 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 ;
MPRINT(VARDEPT):   run;

NOTE: There were 3 observations read from the data set WORK._TEMP1.
NOTE: The data set WORK._TEMPALL has 3 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp2 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP2 created, with 36 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(VARDEPT):   data _temp2;
MPRINT(VARDEPT):   set _temp2;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 36 observations read from the data set WORK._TEMP2.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP2 has 36 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp2;
MPRINT(VARDEPT):   set _temp2;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 36 observations read from the data set WORK._TEMP2.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP2 has 36 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc sort data=_temp2 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;

NOTE: There were 36 observations read from the data set WORK._TEMP2.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP2 has 36 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=3;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 18 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=3;
NOTE: The data set WORK._TEMPID has 18 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 ;
MPRINT(VARDEPT):   run;

NOTE: There were 3 observations read from the data set WORK._TEMP1.
NOTE: There were 36 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMPALL has 39 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp3 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP3 created, with 39 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 39 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP3 has 39 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp3;
MPRINT(VARDEPT):   set _temp3;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 39 observations read from the data set WORK._TEMP3.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP3 has 39 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sort data=_temp3 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;

NOTE: There were 39 observations read from the data set WORK._TEMP3.
NOTE: 26 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP3 has 13 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=4;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: There were 11 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=4;
NOTE: The data set WORK._TEMPID has 11 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _tempAll;
MPRINT(VARDEPT):   set _temp1 _temp2 _temp3 ;
MPRINT(VARDEPT):   run;

NOTE: There were 3 observations read from the data set WORK._TEMP1.
NOTE: There were 36 observations read from the data set WORK._TEMP2.
NOTE: There were 13 observations read from the data set WORK._TEMP3.
NOTE: The data set WORK._TEMPALL has 52 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc sql;
MPRINT(VARDEPT):   create table _temp4 as select p2.lhs, p2.name, p2.Node from work._tempAll p, work._tempid p2 where p.name=p2.lhs or substr(p2.LHS, 1, 3)='EM_';
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._TEMP4 created, with 10 rows and 3 columns.

MPRINT(VARDEPT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   data _temp4;
MPRINT(VARDEPT):   set _temp4;
MPRINT(VARDEPT):   where LHS ne '' and NAME ne '' and Node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 10 observations read from the data set WORK._TEMP4.
      WHERE (LHS not = ' ') and (NAME not = ' ') and (Node not = ' ');
NOTE: The data set WORK._TEMP4 has 10 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempAll;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPALL (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   data _temp4;
MPRINT(VARDEPT):   set _temp4;
MPRINT(VARDEPT):   where LHS ne NAME and node ne '';
MPRINT(VARDEPT):   run;

NOTE: There were 10 observations read from the data set WORK._TEMP4.
      WHERE (LHS not = NAME) and (node not = ' ');
NOTE: The data set WORK._TEMP4 has 10 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(VARDEPT):   proc sort data=_temp4 nodupkey;
MPRINT(VARDEPT):   by LHS NAME;
MPRINT(VARDEPT):   run;

NOTE: There were 10 observations read from the data set WORK._TEMP4.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP4 has 10 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=5;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=5;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(VARDEPT):   proc sort data=EMWS1.Score_FCMP out=_tempid;
MPRINT(VARDEPT):   where id=6;
MPRINT(VARDEPT):   by LHS;
MPRINT(VARDEPT):   run;

NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS1.SCORE_FCMP.
      WHERE id=6;
NOTE: The data set WORK._TEMPID has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

MPRINT(VARDEPT):   proc datasets lib=work nolist;
MPRINT(VARDEPT):   delete _tempid;
MPRINT(VARDEPT):   run;

NOTE: Deleting WORK._TEMPID (memtype=DATA).
MPRINT(VARDEPT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(OPTCODE):  ;
MPRINT(EM_DIAGRAM):  ;

32656      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
32657      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
32658      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
32659      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

32660      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
32661      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
32662      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
32663      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

32664      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
32665      create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp4 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp4 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR3 created, with 10 rows and 3 columns.

32666      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

32667      data _CodeVar3;
MPRINT(EM_DIAGRAM):   data _CodeVar3;
32668      set _all_ _CodeVar3 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar3 _postall_;
32669      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 10 observations read from the data set WORK._CODEVAR3.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR3 has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

32670      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
32671      set EMWS1.BINNING_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_EMSCOREVAR;
32672      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
32673      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.BINNING_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

32674      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
32675      set EMWS1.BINNING_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_EMSCOREVAR;
32676      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
32677      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.BINNING_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

32678      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
32679      create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp3 p, EMWS1.BINNING_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp3 p, EMWS1.BINNING_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR4 created, with 13 rows and 3 columns.

32680      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

32681      data _CodeVar4;
MPRINT(EM_DIAGRAM):   data _CodeVar4;
32682      set _all_ _CodeVar4 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar4 _postall_;
32683      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK._ALL_.
NOTE: There were 13 observations read from the data set WORK._CODEVAR4.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR4 has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine Score Inputs;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
MPRINT(EM_DIAGRAM):   filename _pref "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\OPTIMIZEDCODE.sas";
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: COB-MBA021;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: J:\JMMORR01\CIS 445\Tutorial 2;
MPRINT(EM_DIAGRAM):   * Project Name: My Project;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: My First Flow;
MPRINT(EM_DIAGRAM):   * Generated by: jmmorr01;
MPRINT(EM_DIAGRAM):   * Date: 26OCT2018:00:02:23;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Part;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   INDELINQ = DELINQ > 0;
MPRINT(EM_DIAGRAM):   INDEROG = DEROG > 0;
MPRINT(EM_DIAGRAM):   label LOG_CLAGE = 'Transformed CLAGE';
MPRINT(EM_DIAGRAM):   if CLAGE eq . then LOG_CLAGE = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if CLAGE + 1 > 0 then LOG_CLAGE = log(CLAGE + 1);
MPRINT(EM_DIAGRAM):   else LOG_CLAGE = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_CLNO = 'Transformed CLNO';
MPRINT(EM_DIAGRAM):   if CLNO eq . then LOG_CLNO = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if CLNO + 1 > 0 then LOG_CLNO = log(CLNO + 1);
MPRINT(EM_DIAGRAM):   else LOG_CLNO = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_DEBTINC = 'Transformed DEBTINC';
MPRINT(EM_DIAGRAM):   if DEBTINC eq . then LOG_DEBTINC = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if DEBTINC + 1 > 0 then LOG_DEBTINC = log(DEBTINC + 1);
MPRINT(EM_DIAGRAM):   else LOG_DEBTINC = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_DELINQ = 'Transformed DELINQ';
MPRINT(EM_DIAGRAM):   if DELINQ eq . then LOG_DELINQ = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if DELINQ + 1 > 0 then LOG_DELINQ = log(DELINQ + 1);
MPRINT(EM_DIAGRAM):   else LOG_DELINQ = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_DEROG = 'Transformed DEROG';
MPRINT(EM_DIAGRAM):   if DEROG eq . then LOG_DEROG = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if DEROG + 1 > 0 then LOG_DEROG = log(DEROG + 1);
MPRINT(EM_DIAGRAM):   else LOG_DEROG = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_LOAN = 'Transformed LOAN';
MPRINT(EM_DIAGRAM):   if LOAN eq . then LOG_LOAN = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if LOAN + 1 > 0 then LOG_LOAN = log(LOAN + 1);
MPRINT(EM_DIAGRAM):   else LOG_LOAN = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_MORTDUE = 'Transformed MORTDUE';
MPRINT(EM_DIAGRAM):   if MORTDUE eq . then LOG_MORTDUE = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if MORTDUE + 1 > 0 then LOG_MORTDUE = log(MORTDUE + 1);
MPRINT(EM_DIAGRAM):   else LOG_MORTDUE = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_VALUE = 'Transformed VALUE';
MPRINT(EM_DIAGRAM):   if VALUE eq . then LOG_VALUE = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if VALUE + 1 > 0 then LOG_VALUE = log(VALUE + 1);
MPRINT(EM_DIAGRAM):   else LOG_VALUE = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _UFormat $200;
MPRINT(EM_DIAGRAM):   drop _UFormat;
MPRINT(EM_DIAGRAM):   _UFormat='';
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: INDELINQ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_INDELINQ = "Grouped: INDELINQ";
MPRINT(EM_DIAGRAM):   if MISSING(INDELINQ) then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(INDELINQ) then do;
MPRINT(EM_DIAGRAM):   if INDELINQ < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= INDELINQ AND INDELINQ < 0.5 then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0.5 <= INDELINQ then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: INDEROG;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_INDEROG = "Grouped: INDEROG";
MPRINT(EM_DIAGRAM):   if MISSING(INDEROG) then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(INDEROG) then do;
MPRINT(EM_DIAGRAM):   if INDEROG < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= INDEROG AND INDEROG < 0.5 then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0.5 <= INDEROG then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: JOB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_JOB = "Grouped: JOB";
MPRINT(EM_DIAGRAM):   _UFormat = JOB;
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   if MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFORMAT) then do;
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   if (_UFORMAT eq 'OTHER' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'PROFEXE' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'OFFICE' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'MGR' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'SELF' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'SALES' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_CLAGE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_CLAGE = 'Grouped: Transformed CLAGE';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_CLAGE) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_CLAGE) then do;
MPRINT(EM_DIAGRAM):   if LOG_CLAGE < 4.77 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 4.77 <= LOG_CLAGE AND LOG_CLAGE < 5.17 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 5.17 <= LOG_CLAGE AND LOG_CLAGE < 5.46 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 5.46 <= LOG_CLAGE then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_CLNO;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_CLNO = 'Grouped: Transformed CLNO';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_CLNO) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_CLNO) then do;
MPRINT(EM_DIAGRAM):   if LOG_CLNO < 2.71 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2.71 <= LOG_CLNO AND LOG_CLNO < 3.04 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.04 <= LOG_CLNO AND LOG_CLNO < 3.3 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.3 <= LOG_CLNO then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DEBTINC;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DEBTINC = 'Grouped: Transformed DEBTINC';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DEBTINC) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DEBTINC) then do;
MPRINT(EM_DIAGRAM):   if LOG_DEBTINC < 3.4 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.4 <= LOG_DEBTINC AND LOG_DEBTINC < 3.58 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.58 <= LOG_DEBTINC AND LOG_DEBTINC < 3.69 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.69 <= LOG_DEBTINC then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DELINQ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DELINQ = 'Grouped: Transformed DELINQ';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DELINQ) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DELINQ) then do;
MPRINT(EM_DIAGRAM):   if LOG_DELINQ < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= LOG_DELINQ then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DEROG;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DEROG = 'Grouped: Transformed DEROG';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DEROG) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DEROG) then do;
MPRINT(EM_DIAGRAM):   if LOG_DEROG < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= LOG_DEROG then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_LOAN;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_LOAN = 'Grouped: Transformed LOAN';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_LOAN) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_LOAN) then do;
MPRINT(EM_DIAGRAM):   if LOG_LOAN < 9.32 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 9.32 <= LOG_LOAN AND LOG_LOAN < 9.7 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 9.7 <= LOG_LOAN AND LOG_LOAN < 10.06 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 10.06 <= LOG_LOAN then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_MORTDUE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_MORTDUE = 'Grouped: Transformed MORTDUE';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_MORTDUE) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_MORTDUE) then do;
MPRINT(EM_DIAGRAM):   if LOG_MORTDUE < 10.74 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 10.74 <= LOG_MORTDUE AND LOG_MORTDUE < 11.07 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.07 <= LOG_MORTDUE AND LOG_MORTDUE < 11.44 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.44 <= LOG_MORTDUE then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_VALUE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_VALUE = 'Grouped: Transformed VALUE';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_VALUE) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_VALUE) then do;
MPRINT(EM_DIAGRAM):   if LOG_VALUE < 11.1 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.1 <= LOG_VALUE AND LOG_VALUE < 11.4 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.4 <= LOG_VALUE AND LOG_VALUE < 11.71 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.71 <= LOG_VALUE then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: NINQ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_NINQ = "Grouped: NINQ";
MPRINT(EM_DIAGRAM):   if MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   if NINQ < 1 then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 1 <= NINQ AND NINQ < 2 then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2 <= NINQ AND NINQ < 2.5 then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2.5 <= NINQ then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Regression;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * NODE: Reg3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   *** Target Values;
MPRINT(EM_DIAGRAM):   array REG3DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
MPRINT(EM_DIAGRAM):   ARRAY REG3DRU[2] _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDELINQ ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDELINQ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDEROG ) then do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDEROG , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_JOB ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_5 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_JOB ) then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_JOB , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _3_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_5 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLAGE ) then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   drop _5_0 _5_1 _5_2 _5_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _5_0 = 0;
MPRINT(EM_DIAGRAM):   _5_1 = 0;
MPRINT(EM_DIAGRAM):   _5_2 = 0;
MPRINT(EM_DIAGRAM):   _5_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLNO ) then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLNO , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _5_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _5_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _5_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_1 = -1;
MPRINT(EM_DIAGRAM):   _5_2 = -1;
MPRINT(EM_DIAGRAM):   _5_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEROG ) then do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEROG , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_LOAN ) then do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_LOAN , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   drop _10_0 _10_1 _10_2 _10_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_MORTDUE ) then do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _10_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _10_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _10_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
MPRINT(EM_DIAGRAM):   _10_1 = -1;
MPRINT(EM_DIAGRAM):   _10_2 = -1;
MPRINT(EM_DIAGRAM):   _10_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   drop _11_0 _11_1 _11_2 _11_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _11_0 = 0;
MPRINT(EM_DIAGRAM):   _11_1 = 0;
MPRINT(EM_DIAGRAM):   _11_2 = 0;
MPRINT(EM_DIAGRAM):   _11_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_VALUE ) then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_VALUE , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _11_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _11_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _11_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _11_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _11_0 = -1;
MPRINT(EM_DIAGRAM):   _11_1 = -1;
MPRINT(EM_DIAGRAM):   _11_2 = -1;
MPRINT(EM_DIAGRAM):   _11_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NINQ ;
MPRINT(EM_DIAGRAM):   drop _13_0 _13_1 _13_2 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NINQ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 1;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 1;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _13_0 = -1;
MPRINT(EM_DIAGRAM):   _13_1 = -1;
MPRINT(EM_DIAGRAM):   _13_2 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _P0 = 0.1994122586;
MPRINT(EM_DIAGRAM):   _P1 = 0.8005877414;
MPRINT(EM_DIAGRAM):   goto REG3DR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.87775516834488) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.55281445474052) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_JOB ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.57351647111869) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28613983828213) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04717425869826) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.6273079991539) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46293169342544) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.53314640452982) * _TEMP * _3_5;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.4885261303632) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.71554240420541) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18909158093947) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.53716218509574) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.73455654245763) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.61154389982698) * _TEMP * _5_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.79275770117257) * _TEMP * _5_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.73669529752972) * _TEMP * _5_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.21025315595452) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.9672227584658) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91408931719345) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.62099733755167) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2959510219925) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90393524464235) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16385991732161) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15830771669066) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06806737420677) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.72652835503015) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19458084189349) * _TEMP * _10_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18661188905406) * _TEMP * _10_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45638816653046) * _TEMP * _10_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.36684754151064) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90230378426672) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91035575384715) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.14494565714679) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31468561657707) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18323440424764) * _TEMP * _13_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09136486214824) * _TEMP * _13_2;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   _TEMP = -0.63961613873858 + _LP0;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REG3DR1: *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _IY = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   I_BAD = REG3DRF[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REG3DRU[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of BAD';
MPRINT(EM_DIAGRAM):   EM_EVENTPROBABILITY = P_BAD1;
MPRINT(EM_DIAGRAM):   LABEL EM_PROBABILITY = 'Probability of Classification';
MPRINT(EM_DIAGRAM):   EM_PROBABILITY = max( P_BAD1 , P_BAD0 );
MPRINT(EM_DIAGRAM):   LENGTH EM_CLASSIFICATION
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSIFICATION = "Prediction for BAD";
MPRINT(EM_DIAGRAM):   EM_CLASSIFICATION = I_BAD;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   filename _pref;
MPRINT(EM_DIAGRAM):   data _temp;
MPRINT(EM_DIAGRAM):   set _temp;
MPRINT(EM_DIAGRAM):   length UNAME $32;
MPRINT(EM_DIAGRAM):   UNAME = upcase(RHS);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp(keep=UNAME) NODUPKEY;
MPRINT(EM_DIAGRAM):   by UNAME;
MPRINT(EM_DIAGRAM):   run;
33855      %let validvarany = 0;
33856      data _temp2;
MPRINT(EM_DIAGRAM):    data _temp2;
33857      set EMWS1.Score_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   set EMWS1.Score_EMINPUTVARS;
33858      length UNAME $32;
MPRINT(EM_DIAGRAM):   length UNAME $32;
33859      UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
33860      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS1.SCORE_EMINPUTVARS.
NOTE: The data set WORK._TEMP2 has 13 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

33861      proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
33862      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
33863      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: The data set WORK._TEMP2 has 13 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

33864      data _temp2;
MPRINT(EM_DIAGRAM):   data _temp2;
33865      merge _temp2(in=_a) _temp(in=_b);
MPRINT(EM_DIAGRAM):   merge _temp2(in=_a) _temp(in=_b);
33866      by UNAME;
MPRINT(EM_DIAGRAM):   by UNAME;
33867      drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
33868      length SCOREVAR $1;
MPRINT(EM_DIAGRAM):   length SCOREVAR $1;
33869      label SCOREVAR = "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreVar_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label SCOREVAR = "Used in Score Code";
33870      SCOREVAR='Y';
MPRINT(EM_DIAGRAM):   SCOREVAR='Y';
33871      if ROLE='TARGET' then SCOREVAR='N';
MPRINT(EM_DIAGRAM):   if ROLE='TARGET' then SCOREVAR='N';
33872      else if UNAME=:"EM_" then SCOREVAR='N';
MPRINT(EM_DIAGRAM):   else if UNAME=:"EM_" then SCOREVAR='N';
33873      if (_a and _b) or ROLE='TARGET' then do;
MPRINT(EM_DIAGRAM):   if (_a and _b) or ROLE='TARGET' then do;
33874      if notname(trim(UNAME)) or kcount(UNAME) then do;
MPRINT(EM_DIAGRAM):   if notname(trim(UNAME)) or kcount(UNAME) then do;
33875      call symput('validvarany', '1');
MPRINT(EM_DIAGRAM):   call symput('validvarany', '1');
33876      end;
MPRINT(EM_DIAGRAM):   end;
33877      output;
MPRINT(EM_DIAGRAM):   output;
33878      end;
MPRINT(EM_DIAGRAM):   end;
33879      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set WORK._TEMP2.
NOTE: There were 85 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP2 has 11 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

33880      proc sort data=_temp2 out=EMWS1.Score_EMINPUTVARS;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2 out=EMWS1.Score_EMINPUTVARS;
33881      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
33882      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK._TEMP2.
NOTE: The data set EMWS1.SCORE_EMINPUTVARS has 11 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   options validvarname=ANY;
MPRINT(EM_DIAGRAM):   proc contents data=SAMPSIO.HMEQ noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpvvn "C:\Users\jmmorr01\AppData\Local\Temp\SAS Temporary Files\_TD7528_COB-MBA021_\Prc2\DROPVVN.sas";
MPRINT(EM_DIAGRAM):   data _originalvar;
MPRINT(EM_DIAGRAM):   file _drpvvn;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   if notname(trim(NAME)) or kcount(NAME) or ktrim(substr(NAME, 1, 1)) in('1','2','3','4','5','6','7','8','9','0') then do;
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   call symput('_vvnflag', '1');
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else output;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\jmmorr01\AppData\Local\Temp\SAS Temporary Files\_TD7528_COB-MBA021_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   dsid = open('SAMPSIO.HMEQ');
MPRINT(EM_DIAGRAM):   if dsid then do;
MPRINT(EM_DIAGRAM):   call symput('_inputEngine', attrc(dsid, 'ENGINE'));
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   set SAMPSIO.HMEQ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM SCORE CODE;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: COB-MBA021;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: J:\JMMORR01\CIS 445\Tutorial 2;
MPRINT(EM_DIAGRAM):   * Project Name: My Project;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: My First Flow;
MPRINT(EM_DIAGRAM):   * Generated by: jmmorr01;
MPRINT(EM_DIAGRAM):   * Date: 26OCT2018:00:02:23;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Input Data Source;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Ids;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Partition Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: Part;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Transform;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Trans;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   INDELINQ = DELINQ > 0;
MPRINT(EM_DIAGRAM):   INDEROG = DEROG > 0;
MPRINT(EM_DIAGRAM):   label LOG_CLAGE = 'Transformed CLAGE';
MPRINT(EM_DIAGRAM):   if CLAGE eq . then LOG_CLAGE = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if CLAGE + 1 > 0 then LOG_CLAGE = log(CLAGE + 1);
MPRINT(EM_DIAGRAM):   else LOG_CLAGE = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_CLNO = 'Transformed CLNO';
MPRINT(EM_DIAGRAM):   if CLNO eq . then LOG_CLNO = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if CLNO + 1 > 0 then LOG_CLNO = log(CLNO + 1);
MPRINT(EM_DIAGRAM):   else LOG_CLNO = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_DEBTINC = 'Transformed DEBTINC';
MPRINT(EM_DIAGRAM):   if DEBTINC eq . then LOG_DEBTINC = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if DEBTINC + 1 > 0 then LOG_DEBTINC = log(DEBTINC + 1);
MPRINT(EM_DIAGRAM):   else LOG_DEBTINC = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_DELINQ = 'Transformed DELINQ';
MPRINT(EM_DIAGRAM):   if DELINQ eq . then LOG_DELINQ = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if DELINQ + 1 > 0 then LOG_DELINQ = log(DELINQ + 1);
MPRINT(EM_DIAGRAM):   else LOG_DELINQ = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_DEROG = 'Transformed DEROG';
MPRINT(EM_DIAGRAM):   if DEROG eq . then LOG_DEROG = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if DEROG + 1 > 0 then LOG_DEROG = log(DEROG + 1);
MPRINT(EM_DIAGRAM):   else LOG_DEROG = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_LOAN = 'Transformed LOAN';
MPRINT(EM_DIAGRAM):   if LOAN eq . then LOG_LOAN = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if LOAN + 1 > 0 then LOG_LOAN = log(LOAN + 1);
MPRINT(EM_DIAGRAM):   else LOG_LOAN = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_MORTDUE = 'Transformed MORTDUE';
MPRINT(EM_DIAGRAM):   if MORTDUE eq . then LOG_MORTDUE = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if MORTDUE + 1 > 0 then LOG_MORTDUE = log(MORTDUE + 1);
MPRINT(EM_DIAGRAM):   else LOG_MORTDUE = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   label LOG_VALUE = 'Transformed VALUE';
MPRINT(EM_DIAGRAM):   if VALUE eq . then LOG_VALUE = .;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if VALUE + 1 > 0 then LOG_VALUE = log(VALUE + 1);
MPRINT(EM_DIAGRAM):   else LOG_VALUE = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _UFormat $200;
MPRINT(EM_DIAGRAM):   drop _UFormat;
MPRINT(EM_DIAGRAM):   _UFormat='';
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: INDELINQ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_INDELINQ = "Grouped: INDELINQ";
MPRINT(EM_DIAGRAM):   if MISSING(INDELINQ) then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(INDELINQ) then do;
MPRINT(EM_DIAGRAM):   if INDELINQ < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= INDELINQ AND INDELINQ < 0.5 then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0.5 <= INDELINQ then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: INDEROG;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_INDEROG = "Grouped: INDEROG";
MPRINT(EM_DIAGRAM):   if MISSING(INDEROG) then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(INDEROG) then do;
MPRINT(EM_DIAGRAM):   if INDEROG < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= INDEROG AND INDEROG < 0.5 then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0.5 <= INDEROG then do;
MPRINT(EM_DIAGRAM):   GRP_INDEROG = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: JOB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_JOB = "Grouped: JOB";
MPRINT(EM_DIAGRAM):   _UFormat = JOB;
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   if MISSING(_UFORMAT) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFORMAT) then do;
MPRINT(DMNORMIP):   call dmnorm(_UFormat,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   if (_UFORMAT eq 'OTHER' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'PROFEXE' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'OFFICE' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'MGR' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'SELF' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 6;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if (_UFORMAT eq 'SALES' ) then do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 7;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   GRP_JOB = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_CLAGE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_CLAGE = 'Grouped: Transformed CLAGE';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_CLAGE) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_CLAGE) then do;
MPRINT(EM_DIAGRAM):   if LOG_CLAGE < 4.77 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 4.77 <= LOG_CLAGE AND LOG_CLAGE < 5.17 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 5.17 <= LOG_CLAGE AND LOG_CLAGE < 5.46 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 5.46 <= LOG_CLAGE then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLAGE = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_CLNO;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_CLNO = 'Grouped: Transformed CLNO';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_CLNO) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_CLNO) then do;
MPRINT(EM_DIAGRAM):   if LOG_CLNO < 2.71 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2.71 <= LOG_CLNO AND LOG_CLNO < 3.04 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.04 <= LOG_CLNO AND LOG_CLNO < 3.3 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.3 <= LOG_CLNO then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_CLNO = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DEBTINC;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DEBTINC = 'Grouped: Transformed DEBTINC';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DEBTINC) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DEBTINC) then do;
MPRINT(EM_DIAGRAM):   if LOG_DEBTINC < 3.4 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.4 <= LOG_DEBTINC AND LOG_DEBTINC < 3.58 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.58 <= LOG_DEBTINC AND LOG_DEBTINC < 3.69 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 3.69 <= LOG_DEBTINC then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEBTINC = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DELINQ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DELINQ = 'Grouped: Transformed DELINQ';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DELINQ) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DELINQ) then do;
MPRINT(EM_DIAGRAM):   if LOG_DELINQ < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= LOG_DELINQ then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DELINQ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_DEROG;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_DEROG = 'Grouped: Transformed DEROG';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_DEROG) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_DEROG) then do;
MPRINT(EM_DIAGRAM):   if LOG_DEROG < 0 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 0 <= LOG_DEROG then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_DEROG = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_LOAN;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_LOAN = 'Grouped: Transformed LOAN';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_LOAN) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_LOAN) then do;
MPRINT(EM_DIAGRAM):   if LOG_LOAN < 9.32 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 9.32 <= LOG_LOAN AND LOG_LOAN < 9.7 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 9.7 <= LOG_LOAN AND LOG_LOAN < 10.06 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 10.06 <= LOG_LOAN then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_LOAN = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_MORTDUE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_MORTDUE = 'Grouped: Transformed MORTDUE';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_MORTDUE) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_MORTDUE) then do;
MPRINT(EM_DIAGRAM):   if LOG_MORTDUE < 10.74 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 10.74 <= LOG_MORTDUE AND LOG_MORTDUE < 11.07 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.07 <= LOG_MORTDUE AND LOG_MORTDUE < 11.44 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.44 <= LOG_MORTDUE then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_MORTDUE = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: LOG_VALUE;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_LOG_VALUE = 'Grouped: Transformed VALUE';
MPRINT(EM_DIAGRAM):   if MISSING(LOG_VALUE) then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(LOG_VALUE) then do;
MPRINT(EM_DIAGRAM):   if LOG_VALUE < 11.1 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.1 <= LOG_VALUE AND LOG_VALUE < 11.4 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.4 <= LOG_VALUE AND LOG_VALUE < 11.71 then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 11.71 <= LOG_VALUE then do;
MPRINT(EM_DIAGRAM):   GRP_LOG_VALUE = 5;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable: NINQ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL GRP_NINQ = "Grouped: NINQ";
MPRINT(EM_DIAGRAM):   if MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   if NINQ < 1 then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 1 <= NINQ AND NINQ < 2 then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2 <= NINQ AND NINQ < 2.5 then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 3;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if 2.5 <= NINQ then do;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 4;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Regression;
MPRINT(EM_DIAGRAM):   * TYPE: MODEL;
MPRINT(EM_DIAGRAM):   * NODE: Reg3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   *** Target Values;
MPRINT(EM_DIAGRAM):   array REG3DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
MPRINT(EM_DIAGRAM):   ARRAY REG3DRU[2] _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDELINQ ) then do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDELINQ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDEROG ) then do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDEROG , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_JOB ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 _3_5 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_5 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_JOB ) then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_JOB , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _3_5 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_5 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLAGE ) then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLAGE , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   drop _5_0 _5_1 _5_2 _5_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _5_0 = 0;
MPRINT(EM_DIAGRAM):   _5_1 = 0;
MPRINT(EM_DIAGRAM):   _5_2 = 0;
MPRINT(EM_DIAGRAM):   _5_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_CLNO ) then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_CLNO , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _5_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _5_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _5_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_1 = -1;
MPRINT(EM_DIAGRAM):   _5_2 = -1;
MPRINT(EM_DIAGRAM):   _5_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_1 = .;
MPRINT(EM_DIAGRAM):   _5_2 = .;
MPRINT(EM_DIAGRAM):   _5_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 _6_2 _6_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_2 = 0;
MPRINT(EM_DIAGRAM):   _6_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEBTINC , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _6_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _6_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_2 = -1;
MPRINT(EM_DIAGRAM):   _6_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_2 = .;
MPRINT(EM_DIAGRAM):   _6_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   drop _7_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DELINQ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _7_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   drop _8_0 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_DEROG ) then do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_DEROG , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _8_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _8_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _8_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_LOAN ) then do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_LOAN , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   drop _10_0 _10_1 _10_2 _10_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _10_0 = 0;
MPRINT(EM_DIAGRAM):   _10_1 = 0;
MPRINT(EM_DIAGRAM):   _10_2 = 0;
MPRINT(EM_DIAGRAM):   _10_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_MORTDUE ) then do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_MORTDUE , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _10_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _10_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _10_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _10_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _10_0 = -1;
MPRINT(EM_DIAGRAM):   _10_1 = -1;
MPRINT(EM_DIAGRAM):   _10_2 = -1;
MPRINT(EM_DIAGRAM):   _10_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _10_0 = .;
MPRINT(EM_DIAGRAM):   _10_1 = .;
MPRINT(EM_DIAGRAM):   _10_2 = .;
MPRINT(EM_DIAGRAM):   _10_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   drop _11_0 _11_1 _11_2 _11_3 ;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _11_0 = 0;
MPRINT(EM_DIAGRAM):   _11_1 = 0;
MPRINT(EM_DIAGRAM):   _11_2 = 0;
MPRINT(EM_DIAGRAM):   _11_3 = 0;
MPRINT(EM_DIAGRAM):   if missing( GRP_LOG_VALUE ) then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_LOG_VALUE , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '3' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _11_0 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _11_1 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _11_2 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _11_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _11_0 = -1;
MPRINT(EM_DIAGRAM):   _11_1 = -1;
MPRINT(EM_DIAGRAM):   _11_2 = -1;
MPRINT(EM_DIAGRAM):   _11_3 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _11_0 = .;
MPRINT(EM_DIAGRAM):   _11_1 = .;
MPRINT(EM_DIAGRAM):   _11_2 = .;
MPRINT(EM_DIAGRAM):   _11_3 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_NINQ ;
MPRINT(EM_DIAGRAM):   drop _13_0 _13_1 _13_2 ;
MPRINT(EM_DIAGRAM):   if missing( GRP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_NINQ , BEST12. );
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 1;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 1;
MPRINT(EM_DIAGRAM):   _13_2 = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _13_0 = -1;
MPRINT(EM_DIAGRAM):   _13_1 = -1;
MPRINT(EM_DIAGRAM):   _13_2 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _13_0 = 0;
MPRINT(EM_DIAGRAM):   _13_1 = 0;
MPRINT(EM_DIAGRAM):   _13_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _13_0 = .;
MPRINT(EM_DIAGRAM):   _13_1 = .;
MPRINT(EM_DIAGRAM):   _13_2 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   _P0 = 0.1994122586;
MPRINT(EM_DIAGRAM):   _P1 = 0.8005877414;
MPRINT(EM_DIAGRAM):   goto REG3DR1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.87775516834488) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_INDEROG ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.55281445474052) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_JOB ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.57351647111869) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28613983828213) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.04717425869826) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.6273079991539) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.46293169342544) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.53314640452982) * _TEMP * _3_5;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLAGE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.4885261303632) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.71554240420541) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.18909158093947) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.53716218509574) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_CLNO ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.73455654245763) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.61154389982698) * _TEMP * _5_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.79275770117257) * _TEMP * _5_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.73669529752972) * _TEMP * _5_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEBTINC ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.21025315595452) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.9672227584658) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91408931719345) * _TEMP * _6_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.62099733755167) * _TEMP * _6_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DELINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.2959510219925) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_DEROG ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90393524464235) * _TEMP * _8_0;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_LOAN ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.16385991732161) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.15830771669066) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06806737420677) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_MORTDUE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.72652835503015) * _TEMP * _10_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19458084189349) * _TEMP * _10_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18661188905406) * _TEMP * _10_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.45638816653046) * _TEMP * _10_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_LOG_VALUE ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3.36684754151064) * _TEMP * _11_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.90230378426672) * _TEMP * _11_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.91035575384715) * _TEMP * _11_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.14494565714679) * _TEMP * _11_3;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_NINQ ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31468561657707) * _TEMP * _13_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.18323440424764) * _TEMP * _13_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09136486214824) * _TEMP * _13_2;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   _TEMP = -0.63961613873858 + _LP0;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REG3DR1: *** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _IY = 2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   I_BAD = REG3DRF[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REG3DRU[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Score Node;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Score;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Creating Fixed Names;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   LABEL EM_EVENTPROBABILITY = 'Probability for level 1 of BAD';
MPRINT(EM_DIAGRAM):   EM_EVENTPROBABILITY = P_BAD1;
MPRINT(EM_DIAGRAM):   LABEL EM_PROBABILITY = 'Probability of Classification';
MPRINT(EM_DIAGRAM):   EM_PROBABILITY = max( P_BAD1 , P_BAD0 );
MPRINT(EM_DIAGRAM):   LENGTH EM_CLASSIFICATION
MPRINT(DMNORLEN):   $32
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   LABEL EM_CLASSIFICATION = "Prediction for BAD";
MPRINT(EM_DIAGRAM):   EM_CLASSIFICATION = I_BAD;
MPRINT(EM_DIAGRAM):   drop 'BAD'n 'CLAGE'n 'CLNO'n 'DEBTINC'n 'DELINQ'n 'DEROG'n 'JOB'n 'LOAN'n 'MORTDUE'n 'NINQ'n 'REASON'n 'VALUE'n 'YOJ'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
MPRINT(EM_DIAGRAM):   proc contents data =EMWS1.Score_EMOUTPUTVARS noprint out=EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _drpvvn;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
35103      data EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):    data EMWS1.Score_EMOUTPUTVARS;
35104      set EMWS1.Score_EMOUTPUTVARS(keep=name type label rename=(type=itype));
MPRINT(EM_DIAGRAM):   set EMWS1.Score_EMOUTPUTVARS(keep=name type label rename=(type=itype));
35105      length FUNCTION $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   length FUNCTION $32 name_prefix $8;
35106      if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
35107      else type = 'C';
MPRINT(EM_DIAGRAM):   else type = 'C';
35108      drop name_prefix itype;
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
35109      if index(name, '_WARN_')=1 then FUNCTION = 'ASSESS';
MPRINT(EM_DIAGRAM):   if index(name, '_WARN_')=1 then FUNCTION = 'ASSESS';
35110      else if upcase(name) in('EM_PREDICTION', 'EM_EVENTPROBABILITY', 'EM_PROBABILITY') then FUNCTION = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if upcase(name) in('EM_PREDICTION', 'EM_EVENTPROBABILITY', 'EM_PROBABILITY') then FUNCTION = 'PREDICT';
35111      else if upcase(name) = 'EM_CLASSIFICATION' then FUNCTION = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EM_CLASSIFICATION' then FUNCTION = 'CLASSIFICATION';
35112      else if upcase(name) = 'EM_DECISION' then FUNCTION = 'DECISION';
MPRINT(EM_DIAGRAM):   else if upcase(name) = 'EM_DECISION' then FUNCTION = 'DECISION';
35113      else if upcase(name) in('EM_PROFIT', 'EM_LOSS', 'EM_VALUETARGET', 'EM_CLASSTARGET') then FUNCTION = 'ASSESS' /* removed EM_ROI */
35114      ;
MPRINT(EM_DIAGRAM):   else if upcase(name) in('EM_PROFIT', 'EM_LOSS', 'EM_VALUETARGET', 'EM_CLASSTARGET') then FUNCTION = 'ASSESS' ;
35115      else do;
MPRINT(EM_DIAGRAM):   else do;
35116      name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
35117      if name_prefix in('F', 'I', 'U') then FUNCTION = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then FUNCTION = 'CLASSIFICATION';
35118      else if name_prefix in('P', 'V') then FUNCTION = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix in('P', 'V') then FUNCTION = 'PREDICT';
35119      else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then FUNCTION = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then FUNCTION = 'RESIDUAL';
35120      else if name_prefix ='D' then FUNCTION = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then FUNCTION = 'DECISION';
35121      else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then FUNCTION = 'ASSESS';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then FUNCTION = 'ASSESS';
35122      else FUNCTION = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   else FUNCTION = 'TRANSFORM';
35123      end;
MPRINT(EM_DIAGRAM):   end;
35124      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 30 observations read from the data set EMWS1.SCORE_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE_EMOUTPUTVARS has 30 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.03 seconds
      

35125      proc sort data=EMWS1.Reg3_CMeta_TRAIN out=WORK.META(KEEP=NAME CREATOR);
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Reg3_CMeta_TRAIN out=WORK.META(KEEP=NAME CREATOR);
35126      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35127      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 38 observations read from the data set EMWS1.REG3_CMETA_TRAIN.
NOTE: The data set WORK.META has 38 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

35128      proc sort data=EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Score_EMOUTPUTVARS;
35129      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35130      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 30 observations read from the data set EMWS1.SCORE_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE_EMOUTPUTVARS has 30 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
      

35131      data EMWS1.Score_EMOUTPUTVARS;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_EMOUTPUTVARS;
35132      merge WORK.META EMWS1.Score_EMOUTPUTVARS(in=_a);
MPRINT(EM_DIAGRAM):   merge WORK.META EMWS1.Score_EMOUTPUTVARS(in=_a);
35133      label CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel ,  NOQUOTE))" FUNCTION = "%sysfunc(sasmsg(sashelp.dmine,  meta_function_vlabel ,  NOQUOTE))" TYPE = "%sysfunc(sasmsg(sashelp.dmine,  meta_type_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label CREATOR = "Creator" FUNCTION = "Function" TYPE = "Type";
35134      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
35135      if NAME =: 'EM_' and CREATOR = '' then CREATOR = "Score";
MPRINT(EM_DIAGRAM):   if NAME =: 'EM_' and CREATOR = '' then CREATOR = "Score";
35136      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
35137      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 38 observations read from the data set WORK.META.
NOTE: There were 30 observations read from the data set EMWS1.SCORE_EMOUTPUTVARS.
NOTE: The data set EMWS1.SCORE_EMOUTPUTVARS has 30 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.09 seconds
      

35138      %let _cn = %sysfunc(getoption(CENTER));
35139      %let _nb = %sysfunc(getoption(NUMBER));
35140      options nonumber nocenter;
MPRINT(EM_DIAGRAM):    options nonumber nocenter;
35141      title;
MPRINT(EM_DIAGRAM):   title;
35142      proc print data=EMWS1.Score_EMINPUTVARS noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Score_EMINPUTVARS noobs label;
35143      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,  NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel ,  NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" CREATOR = "Creator" LABEL = "Label";
35144      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
35145      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreInputVariables_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Score Input Variables";
MPRINT(EM_DIAGRAM):   run;
35146      run;

NOTE: There were 11 observations read from the data set EMWS1.SCORE_EMINPUTVARS.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

35147      title10;
MPRINT(EM_DIAGRAM):   title10;
35148      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
35149      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
35150      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
35151      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
35152      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

35153      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
35154      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
35155      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
35156      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

35157      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
35158      create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp4 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp4 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR3 created, with 10 rows and 3 columns.

35159      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

35160      data _CodeVar3;
MPRINT(EM_DIAGRAM):   data _CodeVar3;
35161      set _all_ _CodeVar3 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar3 _postall_;
35162      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 10 observations read from the data set WORK._CODEVAR3.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR3 has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

35163      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
35164      set EMWS1.BINNING_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_EMSCOREVAR;
35165      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
35166      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.BINNING_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

35167      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
35168      set EMWS1.BINNING_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_EMSCOREVAR;
35169      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
35170      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.BINNING_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

35171      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
35172      create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp3 p, EMWS1.BINNING_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp3 p, EMWS1.BINNING_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR4 created, with 13 rows and 3 columns.

35173      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

35174      data _CodeVar4;
MPRINT(EM_DIAGRAM):   data _CodeVar4;
35175      set _all_ _CodeVar4 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar4 _postall_;
35176      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK._ALL_.
NOTE: There were 13 observations read from the data set WORK._CODEVAR4.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR4 has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

35177      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
35178      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
35179      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
35180      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

35181      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
35182      set EMWS1.Trans_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_EMSCOREVAR;
35183      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
35184      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

35185      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
35186      create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp4 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar3 as select p.lhs, p2.formula, p2.file from _temp4 p, EMWS1.Trans_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR3 created, with 10 rows and 3 columns.

35187      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

35188      data _CodeVar3;
MPRINT(EM_DIAGRAM):   data _CodeVar3;
35189      set _all_ _CodeVar3 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar3 _postall_;
35190      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK._ALL_.
NOTE: There were 10 observations read from the data set WORK._CODEVAR3.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR3 has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

35191      data _all_;
MPRINT(EM_DIAGRAM):    data _all_;
35192      set EMWS1.BINNING_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_EMSCOREVAR;
35193      where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and ^index(file, '_POSTALL_.sas');
35194      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.BINNING_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and (not INDEX(file, '_POSTALL_.sas'));
NOTE: The data set WORK._ALL_ has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

35195      data _postall_;
MPRINT(EM_DIAGRAM):   data _postall_;
35196      set EMWS1.BINNING_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_EMSCOREVAR;
35197      where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
MPRINT(EM_DIAGRAM):   where NAME='' and file ne '' and index(file, '_POSTALL_.sas');
35198      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.BINNING_EMSCOREVAR.
      WHERE (NAME=' ') and (file not = ' ') and INDEX(file, '_POSTALL_.sas');
NOTE: The data set WORK._POSTALL_ has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

35199      proc sql;
MPRINT(EM_DIAGRAM):   proc sql;
35200      create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp3 p, EMWS1.BINNING_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
MPRINT(EM_DIAGRAM):   create table _CodeVar4 as select p.lhs, p2.formula, p2.file from _temp3 p, EMWS1.BINNING_EMSCOREVAR p2 where substr(upcase(p.LHS), 1, 3) ='EM_' or (upcase(p.LHS)=upcase(p2.NAME)) order by p.lhs;
NOTE: The execution of this query involves performing one or more Cartesian product joins that can not be optimized.
NOTE: Table WORK._CODEVAR4 created, with 13 rows and 3 columns.

35201      quit;
MPRINT(EM_DIAGRAM):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

35202      data _CodeVar4;
MPRINT(EM_DIAGRAM):   data _CodeVar4;
35203      set _all_ _CodeVar4 _postall_;
MPRINT(EM_DIAGRAM):   set _all_ _CodeVar4 _postall_;
35204      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK._ALL_.
NOTE: There were 13 observations read from the data set WORK._CODEVAR4.
NOTE: There were 0 observations read from the data set WORK._POSTALL_.
NOTE: The data set WORK._CODEVAR4 has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

35205      %let _cn = %sysfunc(getoption(CENTER));
35206      %let _nb = %sysfunc(getoption(NUMBER));
35207      options nonumber nocenter;
MPRINT(EM_DIAGRAM):    options nonumber nocenter;
35208      title;
MPRINT(EM_DIAGRAM):   title;
35209      proc print data=EMWS1.Score_EMOUTPUTVARS noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Score_EMOUTPUTVARS noobs label;
35210      var NAME FUNCTION CREATOR LABEL;
MPRINT(EM_DIAGRAM):   var NAME FUNCTION CREATOR LABEL;
35211      label NAME = "%sysfunc(sasmsg(sashelp.dmine,  meta_name_vlabel ,    NOQUOTE))" FUNCTION = "%sysfunc(sasmsg(sashelp.dmine,  meta_function_vlabel ,    NOQUOTE))" CREATOR = "%sysfunc(sasmsg(sashelp.dmine,  meta_creator_vlabel , NOQUOTE))" LABEL =
35212         "%sysfunc(sasmsg(sashelp.dmine,  meta_label_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" FUNCTION = "Function" CREATOR = "Creator" LABEL = "Label";
35213      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
35214      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreOutputVariables_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Score Output Variables";
MPRINT(EM_DIAGRAM):   run;
35215      run;

NOTE: There were 30 observations read from the data set EMWS1.SCORE_EMOUTPUTVARS.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

35216      title10;
MPRINT(EM_DIAGRAM):   title10;
35217      options &_cn &_nb;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
35218      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
35219      * Score: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Score: Computing metadata for TRAIN data;
35220      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.SCORE_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Score_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Score_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Score_TRAIN out=WORK.M3ID90QE noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3ID90QE;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3ID90QE(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3ID90QE;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3ID90QE;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1MRJWSU NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1MRJWSU;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1MRJWSU;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2_SERCE(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1MRJWSU;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1MRJWSU;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1MRJWSU;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1MRJWSU;
MPRINT(EMADVISECOLUMNS):   set WORK.M1MRJWSU;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Reg3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Score";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME = "I_BAD" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "P_BAD0" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "P_BAD1" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "EM_CLASSIFICATION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PREDICTION" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_EVENTPROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_DECISION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROFIT" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_SEGMENT" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_VALUETARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_CLASSTARGET" then LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.SCORE_TRAIN.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.10 seconds
      
NOTE: View EMWS1.SCORE_VALIDATE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      
NOTE: View EMWS1.SCORE_TEST.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
      
35570      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
35571      * Score: Computing metadata for SCORE data;
MPRINT(EM_DIAGRAM):   * Score: Computing metadata for SCORE data;
35572      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.SCORE_SCORE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for SCORE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "J:\JMMORR01\CIS 445\Tutorial 2\My Project\Workspaces\EMWS1\Score\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Score_SCORE out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Score_SCORE');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Score_SCORE out=WORK.M2MPQ1DF noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2MPQ1DF;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2MPQ1DF(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2MPQ1DF;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2MPQ1DF;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3UFB67O NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3UFB67O;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3UFB67O;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2YV3DZ0(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3UFB67O;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3UFB67O;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3UFB67O;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3UFB67O;
MPRINT(EMADVISECOLUMNS):   set WORK.M3UFB67O;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Ids2_DATA noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids2_CMeta_DATA out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Score_CMeta_SCORE;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Score";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME = "I_BAD" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "P_BAD0" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "P_BAD1" then ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   if NAME = "EM_CLASSIFICATION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PREDICTION" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_EVENTPROBABILITY" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_DECISION" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_PROFIT" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_SEGMENT" then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_VALUETARGET" then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   else if NAME = "EM_CLASSTARGET" then LEVEL = 'BINARY';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.SCORE_SCORE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
